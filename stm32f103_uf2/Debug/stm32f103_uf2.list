
stm32f103_uf2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003478  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037bc  080037bc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080037bc  080037bc  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037bc  080037bc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000000  080037bc  080037bc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000000  080037bc  080037bc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080037bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe0  20000090  08003848  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001070  08003848  00021070  2**0
                  ALLOC
 11 .ARM.attributes 0000002b  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f9d  00000000  00000000  000200b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000539d  00000000  00000000  00038054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0003d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002518  00000000  00000000  0003df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e213  00000000  00000000  00040488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001951e  00000000  00000000  0005e69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b452  00000000  00000000  00077bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011300b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc4  00000000  00000000  0011305c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000d952  00000000  00000000  00114c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <strlen>:
 800010c:	4603      	mov	r3, r0
 800010e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000112:	2a00      	cmp	r2, #0
 8000114:	d1fb      	bne.n	800010e <strlen+0x2>
 8000116:	1a18      	subs	r0, r3, r0
 8000118:	3801      	subs	r0, #1
 800011a:	4770      	bx	lr

0800011c <apInit>:
extern int tinyuf2(void);



void apInit(void)
{
 800011c:	b508      	push	{r3, lr}
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
//
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);


  ledInit();
 800011e:	f000 f80a 	bl	8000136 <ledInit>
  buttonInit();
}
 8000122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  buttonInit();
 8000126:	f000 b802 	b.w	800012e <buttonInit>

0800012a <apMain>:

void apMain(void)
{
  tinyuf2();
 800012a:	f000 b859 	b.w	80001e0 <tinyuf2>

0800012e <buttonInit>:


bool buttonInit(void)
{
  return true;
}
 800012e:	2001      	movs	r0, #1
 8000130:	4770      	bx	lr

08000132 <buttonGetPressed>:
//      }
      break;
  }

  return ret;
}
 8000132:	2000      	movs	r0, #0
 8000134:	4770      	bx	lr

08000136 <ledInit>:


bool ledInit(void)
{
  return true;
}
 8000136:	2001      	movs	r0, #1
 8000138:	4770      	bx	lr
	...

0800013c <ledOn>:

void ledOn(uint8_t ch)
{
  switch(ch)
 800013c:	4602      	mov	r2, r0
 800013e:	b920      	cbnz	r0, 800014a <ledOn+0xe>
  {
    case _DEF_CH1:
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000144:	4801      	ldr	r0, [pc, #4]	; (800014c <ledOn+0x10>)
 8000146:	f003 b951 	b.w	80033ec <HAL_GPIO_WritePin>
      break;
  }
}
 800014a:	4770      	bx	lr
 800014c:	40010c00 	.word	0x40010c00

08000150 <ledOff>:

void ledOff(uint8_t ch)
{
  switch(ch)
 8000150:	b928      	cbnz	r0, 800015e <ledOff+0xe>
  {
    case _DEF_CH1:
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000152:	2201      	movs	r2, #1
 8000154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000158:	4801      	ldr	r0, [pc, #4]	; (8000160 <ledOff+0x10>)
 800015a:	f003 b947 	b.w	80033ec <HAL_GPIO_WritePin>
      break;
  }
}
 800015e:	4770      	bx	lr
 8000160:	40010c00 	.word	0x40010c00

08000164 <tud_hid_get_report_cb>:
  (void) report_type;
  (void) buffer;
  (void) reqlen;

  return 0;
}
 8000164:	2000      	movs	r0, #0
 8000166:	4770      	bx	lr

08000168 <tud_hid_set_report_cb>:
  (void) itf;
  (void) report_id;
  (void) report_type;
  (void) buffer;
  (void) bufsize;
}
 8000168:	4770      	bx	lr
	...

0800016c <indicator_set>:

static uint32_t _indicator_state = STATE_BOOTLOADER_STARTED;
static uint8_t _indicator_rgb[3];

void indicator_set(uint32_t state)
{
 800016c:	b508      	push	{r3, lr}
  _indicator_state = state;
 800016e:	4b17      	ldr	r3, [pc, #92]	; (80001cc <indicator_set+0x60>)
 8000170:	6018      	str	r0, [r3, #0]
  switch(state)
 8000172:	3801      	subs	r0, #1
 8000174:	2803      	cmp	r0, #3
 8000176:	d823      	bhi.n	80001c0 <indicator_set+0x54>
 8000178:	e8df f000 	tbb	[pc, r0]
 800017c:	2319020f 	.word	0x2319020f
  {
    case STATE_USB_UNPLUGGED:
      board_timer_start(1);
 8000180:	2001      	movs	r0, #1
 8000182:	f002 faa9 	bl	80026d8 <board_timer_start>
      memcpy(_indicator_rgb, RGB_USB_UNMOUNTED, 3);
 8000186:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <indicator_set+0x64>)
 8000188:	4812      	ldr	r0, [pc, #72]	; (80001d4 <indicator_set+0x68>)
 800018a:	881a      	ldrh	r2, [r3, #0]
 800018c:	789b      	ldrb	r3, [r3, #2]
 800018e:	8002      	strh	r2, [r0, #0]
      board_rgb_write(_indicator_rgb);
    break;

    case STATE_USB_PLUGGED:
      board_timer_start(100);
      memcpy(_indicator_rgb, RGB_USB_MOUNTED, 3);
 8000190:	7083      	strb	r3, [r0, #2]
      board_rgb_write(RGB_WRITING);
    break;

    default: break; // nothing to do
  }
}
 8000192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      board_rgb_write(RGB_WRITING);
 8000196:	f002 ba9d 	b.w	80026d4 <board_rgb_write>
      board_timer_start(100);
 800019a:	2064      	movs	r0, #100	; 0x64
 800019c:	f002 fa9c 	bl	80026d8 <board_timer_start>
      memcpy(_indicator_rgb, RGB_USB_MOUNTED, 3);
 80001a0:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <indicator_set+0x64>)
 80001a2:	480c      	ldr	r0, [pc, #48]	; (80001d4 <indicator_set+0x68>)
 80001a4:	f8b3 2003 	ldrh.w	r2, [r3, #3]
 80001a8:	795b      	ldrb	r3, [r3, #5]
 80001aa:	8002      	strh	r2, [r0, #0]
 80001ac:	e7f0      	b.n	8000190 <indicator_set+0x24>
      board_timer_start(25);
 80001ae:	2019      	movs	r0, #25
 80001b0:	f002 fa92 	bl	80026d8 <board_timer_start>
      memcpy(_indicator_rgb, RGB_WRITING, 3);
 80001b4:	4a08      	ldr	r2, [pc, #32]	; (80001d8 <indicator_set+0x6c>)
 80001b6:	4b07      	ldr	r3, [pc, #28]	; (80001d4 <indicator_set+0x68>)
 80001b8:	8811      	ldrh	r1, [r2, #0]
 80001ba:	7892      	ldrb	r2, [r2, #2]
 80001bc:	8019      	strh	r1, [r3, #0]
 80001be:	709a      	strb	r2, [r3, #2]
}
 80001c0:	bd08      	pop	{r3, pc}
      board_timer_stop();
 80001c2:	f002 fa8f 	bl	80026e4 <board_timer_stop>
      board_rgb_write(RGB_WRITING);
 80001c6:	4805      	ldr	r0, [pc, #20]	; (80001dc <indicator_set+0x70>)
 80001c8:	e7e3      	b.n	8000192 <indicator_set+0x26>
 80001ca:	bf00      	nop
 80001cc:	20000094 	.word	0x20000094
 80001d0:	08003584 	.word	0x08003584
 80001d4:	20000090 	.word	0x20000090
 80001d8:	0800358a 	.word	0x0800358a
 80001dc:	08003593 	.word	0x08003593

080001e0 <tinyuf2>:
{
 80001e0:	b508      	push	{r3, lr}
  board_init();
 80001e2:	f002 f99f 	bl	8002524 <board_init>
  if (board_init2) board_init2();
 80001e6:	4b31      	ldr	r3, [pc, #196]	; (80002ac <tinyuf2+0xcc>)
 80001e8:	b10b      	cbz	r3, 80001ee <tinyuf2+0xe>
 80001ea:	f3af 8000 	nop.w
  if (DBL_TAP_REG == DBL_TAP_MAGIC_ERASE_APP)
 80001ee:	4c30      	ldr	r4, [pc, #192]	; (80002b0 <tinyuf2+0xd0>)
 80001f0:	4b30      	ldr	r3, [pc, #192]	; (80002b4 <tinyuf2+0xd4>)
 80001f2:	6822      	ldr	r2, [r4, #0]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d109      	bne.n	800020c <tinyuf2+0x2c>
    DBL_TAP_REG = 0;
 80001f8:	2300      	movs	r3, #0
    indicator_set(STATE_WRITING_STARTED);
 80001fa:	2003      	movs	r0, #3
    DBL_TAP_REG = 0;
 80001fc:	6023      	str	r3, [r4, #0]
    indicator_set(STATE_WRITING_STARTED);
 80001fe:	f7ff ffb5 	bl	800016c <indicator_set>
    board_flash_erase_app();
 8000202:	f002 f97b 	bl	80024fc <board_flash_erase_app>
    indicator_set(STATE_WRITING_FINISHED);
 8000206:	2004      	movs	r0, #4
 8000208:	f7ff ffb0 	bl	800016c <indicator_set>
  if (buttonGetPressed(_DEF_CH1)) return true;
 800020c:	2000      	movs	r0, #0
 800020e:	f7ff ff90 	bl	8000132 <buttonGetPressed>
 8000212:	b9d0      	cbnz	r0, 800024a <tinyuf2+0x6a>
  if ( !board_app_valid() ) return true;
 8000214:	f002 fa00 	bl	8002618 <board_app_valid>
 8000218:	b1b8      	cbz	r0, 800024a <tinyuf2+0x6a>
  if ( board_app_valid2 && !board_app_valid2() ) return true;
 800021a:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <tinyuf2+0xd8>)
 800021c:	b98b      	cbnz	r3, 8000242 <tinyuf2+0x62>
  if (DBL_TAP_REG == DBL_TAP_MAGIC_QUICK_BOOT)
 800021e:	4b27      	ldr	r3, [pc, #156]	; (80002bc <tinyuf2+0xdc>)
 8000220:	6821      	ldr	r1, [r4, #0]
 8000222:	4299      	cmp	r1, r3
 8000224:	f04f 0300 	mov.w	r3, #0
 8000228:	d120      	bne.n	800026c <tinyuf2+0x8c>
  DBL_TAP_REG = 0;
 800022a:	6023      	str	r3, [r4, #0]
    if (board_teardown) board_teardown();
 800022c:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <tinyuf2+0xe0>)
 800022e:	b10b      	cbz	r3, 8000234 <tinyuf2+0x54>
 8000230:	f3af 8000 	nop.w
    if (board_teardown2) board_teardown2();
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <tinyuf2+0xe4>)
 8000236:	b10b      	cbz	r3, 800023c <tinyuf2+0x5c>
 8000238:	f3af 8000 	nop.w
    board_app_jump();
 800023c:	f002 fa04 	bl	8002648 <board_app_jump>
    while(1) {}
 8000240:	e7fe      	b.n	8000240 <tinyuf2+0x60>
  if ( board_app_valid2 && !board_app_valid2() ) return true;
 8000242:	f3af 8000 	nop.w
 8000246:	2800      	cmp	r0, #0
 8000248:	d1e9      	bne.n	800021e <tinyuf2+0x3e>
  board_dfu_init();
 800024a:	f002 f9af 	bl	80025ac <board_dfu_init>
  board_flash_init();
 800024e:	f002 f903 	bl	8002458 <board_flash_init>
  uf2_init();
 8000252:	f002 fa67 	bl	8002724 <uf2_init>
  tusb_init();
 8000256:	f002 f8ae 	bl	80023b6 <tusb_init>
  indicator_set(STATE_USB_UNPLUGGED);
 800025a:	2002      	movs	r0, #2
 800025c:	f7ff ff86 	bl	800016c <indicator_set>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8000260:	2100      	movs	r1, #0
 8000262:	f04f 30ff 	mov.w	r0, #4294967295
 8000266:	f001 f8cd 	bl	8001404 <tud_task_ext>
 800026a:	e7f9      	b.n	8000260 <tinyuf2+0x80>
  if (DBL_TAP_REG == DBL_TAP_MAGIC)
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <tinyuf2+0xe8>)
 800026e:	4291      	cmp	r1, r2
 8000270:	d101      	bne.n	8000276 <tinyuf2+0x96>
    DBL_TAP_REG = 0;
 8000272:	6023      	str	r3, [r4, #0]
    return true;
 8000274:	e7e9      	b.n	800024a <tinyuf2+0x6a>
  _timer_count = 0;
 8000276:	4d15      	ldr	r5, [pc, #84]	; (80002cc <tinyuf2+0xec>)
  board_timer_start(1);
 8000278:	2001      	movs	r0, #1
  DBL_TAP_REG = DBL_TAP_MAGIC;
 800027a:	6022      	str	r2, [r4, #0]
  _timer_count = 0;
 800027c:	602b      	str	r3, [r5, #0]
  board_timer_start(1);
 800027e:	f002 fa2b 	bl	80026d8 <board_timer_start>
  board_led_write(0xff);
 8000282:	20ff      	movs	r0, #255	; 0xff
 8000284:	f002 fa1e 	bl	80026c4 <board_led_write>
  board_rgb_write(RGB_DOUBLE_TAP);
 8000288:	4811      	ldr	r0, [pc, #68]	; (80002d0 <tinyuf2+0xf0>)
 800028a:	f002 fa23 	bl	80026d4 <board_rgb_write>
  while(_timer_count < DBL_TAP_DELAY) {}
 800028e:	682b      	ldr	r3, [r5, #0]
 8000290:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000294:	d3fb      	bcc.n	800028e <tinyuf2+0xae>
  board_timer_stop();
 8000296:	f002 fa25 	bl	80026e4 <board_timer_stop>
  board_rgb_write(RGB_OFF);
 800029a:	480e      	ldr	r0, [pc, #56]	; (80002d4 <tinyuf2+0xf4>)
 800029c:	f002 fa1a 	bl	80026d4 <board_rgb_write>
  board_led_write(0x00);
 80002a0:	2000      	movs	r0, #0
 80002a2:	f002 fa0f 	bl	80026c4 <board_led_write>
  DBL_TAP_REG = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	e7bf      	b.n	800022a <tinyuf2+0x4a>
 80002aa:	bf00      	nop
 80002ac:	00000000 	.word	0x00000000
 80002b0:	20004ffc 	.word	0x20004ffc
 80002b4:	f5e80ab4 	.word	0xf5e80ab4
 80002b8:	00000000 	.word	0x00000000
 80002bc:	f02669ef 	.word	0xf02669ef
	...
 80002c8:	f01669ef 	.word	0xf01669ef
 80002cc:	20000098 	.word	0x20000098
 80002d0:	0800358d 	.word	0x0800358d
 80002d4:	08003590 	.word	0x08003590

080002d8 <tud_mount_cb>:
  indicator_set(STATE_USB_PLUGGED);
 80002d8:	2001      	movs	r0, #1
 80002da:	f7ff bf47 	b.w	800016c <indicator_set>

080002de <tud_umount_cb>:
  indicator_set(STATE_USB_UNPLUGGED);
 80002de:	2002      	movs	r0, #2
 80002e0:	f7ff bf44 	b.w	800016c <indicator_set>

080002e4 <board_timer_handler>:

void board_timer_handler(void)
{
  _timer_count++;
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <board_timer_handler+0x50>)
{
 80002e6:	b510      	push	{r4, lr}
  _timer_count++;
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	3201      	adds	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]

  switch (_indicator_state)
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <board_timer_handler+0x54>)
 80002f0:	6812      	ldr	r2, [r2, #0]
 80002f2:	2a02      	cmp	r2, #2
 80002f4:	d809      	bhi.n	800030a <board_timer_handler+0x26>
 80002f6:	b152      	cbz	r2, 800030e <board_timer_handler+0x2a>
    }
    break;

    default: break; // nothing to do
  }
}
 80002f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      bool is_on = _timer_count & 0x01;
 80002fc:	6818      	ldr	r0, [r3, #0]
      board_led_write(is_on ? 0xff : 0x000);
 80002fe:	f010 0001 	ands.w	r0, r0, #1
 8000302:	bf18      	it	ne
 8000304:	20ff      	movne	r0, #255	; 0xff
 8000306:	f002 b9dd 	b.w	80026c4 <board_led_write>
  switch (_indicator_state)
 800030a:	2a03      	cmp	r2, #3
 800030c:	d000      	beq.n	8000310 <board_timer_handler+0x2c>
}
 800030e:	bd10      	pop	{r4, pc}
      bool is_on = _timer_count & 0x01;
 8000310:	681c      	ldr	r4, [r3, #0]
      board_led_write(is_on ? 0xff : 0x000);
 8000312:	f014 0401 	ands.w	r4, r4, #1
 8000316:	bf14      	ite	ne
 8000318:	20ff      	movne	r0, #255	; 0xff
 800031a:	2000      	moveq	r0, #0
 800031c:	f002 f9d2 	bl	80026c4 <board_led_write>
      board_rgb_write(is_on ? _indicator_rgb : RGB_OFF);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <board_timer_handler+0x58>)
 8000322:	4b07      	ldr	r3, [pc, #28]	; (8000340 <board_timer_handler+0x5c>)
 8000324:	2c00      	cmp	r4, #0
 8000326:	bf08      	it	eq
 8000328:	4618      	moveq	r0, r3
}
 800032a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      board_rgb_write(is_on ? _indicator_rgb : RGB_OFF);
 800032e:	f002 b9d1 	b.w	80026d4 <board_rgb_write>
 8000332:	bf00      	nop
 8000334:	20000098 	.word	0x20000098
 8000338:	20000094 	.word	0x20000094
 800033c:	20000090 	.word	0x20000090
 8000340:	08003590 	.word	0x08003590

08000344 <delay>:



void delay(uint32_t time_ms)
{
  HAL_Delay(time_ms);
 8000344:	f002 bdea 	b.w	8002f1c <HAL_Delay>

08000348 <hidd_reset>:
}

void hidd_reset(uint8_t rhport)
{
  (void) rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8000348:	228c      	movs	r2, #140	; 0x8c
 800034a:	2100      	movs	r1, #0
 800034c:	4801      	ldr	r0, [pc, #4]	; (8000354 <hidd_reset+0xc>)
 800034e:	f003 b911 	b.w	8003574 <memset>
 8000352:	bf00      	nop
 8000354:	2000009c 	.word	0x2000009c

08000358 <hidd_init>:
  hidd_reset(0);
 8000358:	2000      	movs	r0, #0
 800035a:	f7ff bff5 	b.w	8000348 <hidd_reset>
	...

08000360 <hidd_open>:
}

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t max_len)
{
 8000360:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000364:	460d      	mov	r5, r1
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8000366:	796b      	ldrb	r3, [r5, #5]
{
 8000368:	4607      	mov	r7, r0
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 800036a:	2b03      	cmp	r3, #3
{
 800036c:	4611      	mov	r1, r2
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 800036e:	d004      	beq.n	800037a <hidd_open+0x1a>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
  TU_ASSERT(max_len >= drv_len, 0);
 8000370:	2400      	movs	r4, #0
      TU_BREAKPOINT();
    }
  }

  return drv_len;
}
 8000372:	4620      	mov	r0, r4
 8000374:	b002      	add	sp, #8
 8000376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 800037a:	792a      	ldrb	r2, [r5, #4]
 800037c:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8000380:	3412      	adds	r4, #18
 8000382:	b2a4      	uxth	r4, r4
  TU_ASSERT(max_len >= drv_len, 0);
 8000384:	428c      	cmp	r4, r1
 8000386:	d907      	bls.n	8000398 <hidd_open+0x38>
 8000388:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800038c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8000390:	07da      	lsls	r2, r3, #31
 8000392:	d5ed      	bpl.n	8000370 <hidd_open+0x10>
 8000394:	be00      	bkpt	0x0000
 8000396:	e7eb      	b.n	8000370 <hidd_open+0x10>
    if ( _hidd_itf[hid_id].ep_in == 0 )
 8000398:	4e1f      	ldr	r6, [pc, #124]	; (8000418 <hidd_open+0xb8>)
 800039a:	f896 e001 	ldrb.w	lr, [r6, #1]
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d1f1      	bne.n	8000388 <hidd_open+0x28>

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 80003a4:	f895 c000 	ldrb.w	ip, [r5]
 80003a8:	eb05 010c 	add.w	r1, r5, ip
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 80003ac:	f891 8001 	ldrb.w	r8, [r1, #1]
 80003b0:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
 80003b4:	d1e8      	bne.n	8000388 <hidd_open+0x28>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *) p_desc;
 80003b6:	f8c6 1088 	str.w	r1, [r6, #136]	; 0x88
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 80003ba:	f106 0e01 	add.w	lr, r6, #1
 80003be:	f815 c00c 	ldrb.w	ip, [r5, ip]
 80003c2:	f8cd e004 	str.w	lr, [sp, #4]
 80003c6:	f106 0e02 	add.w	lr, r6, #2
 80003ca:	f8cd e000 	str.w	lr, [sp]
 80003ce:	4461      	add	r1, ip
 80003d0:	f000 ff54 	bl	800127c <usbd_open_edpt_pair>
 80003d4:	2800      	cmp	r0, #0
 80003d6:	d0d7      	beq.n	8000388 <hidd_open+0x28>
  if ( desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT ) p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 80003d8:	79ab      	ldrb	r3, [r5, #6]
  if (p_hid->ep_out)
 80003da:	78b1      	ldrb	r1, [r6, #2]
  if ( desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT ) p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 80003dc:	2b01      	cmp	r3, #1
 80003de:	bf04      	itt	eq
 80003e0:	79eb      	ldrbeq	r3, [r5, #7]
 80003e2:	70f3      	strbeq	r3, [r6, #3]
  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 80003e4:	2301      	movs	r3, #1
 80003e6:	7133      	strb	r3, [r6, #4]
  p_hid->itf_num       = desc_itf->bInterfaceNumber;
 80003e8:	78ab      	ldrb	r3, [r5, #2]
 80003ea:	7033      	strb	r3, [r6, #0]

#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 80003ec:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80003f0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const*) p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 80003f4:	80f3      	strh	r3, [r6, #6]
  if (p_hid->ep_out)
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d0bb      	beq.n	8000372 <hidd_open+0x12>
    if ( !usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)) )
 80003fa:	2340      	movs	r3, #64	; 0x40
 80003fc:	4638      	mov	r0, r7
 80003fe:	4a07      	ldr	r2, [pc, #28]	; (800041c <hidd_open+0xbc>)
 8000400:	f000 ff72 	bl	80012e8 <usbd_edpt_xfer>
 8000404:	2800      	cmp	r0, #0
 8000406:	d1b4      	bne.n	8000372 <hidd_open+0x12>
      TU_BREAKPOINT();
 8000408:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800040c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8000410:	07db      	lsls	r3, r3, #31
 8000412:	d5ae      	bpl.n	8000372 <hidd_open+0x12>
 8000414:	be00      	bkpt	0x0000
 8000416:	e7ac      	b.n	8000372 <hidd_open+0x12>
 8000418:	2000009c 	.word	0x2000009c
 800041c:	200000e4 	.word	0x200000e4

08000420 <hidd_control_xfer_cb>:
// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb (uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8000420:	7813      	ldrb	r3, [r2, #0]
{
 8000422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000424:	4615      	mov	r5, r2
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8000426:	f003 021f 	and.w	r2, r3, #31
 800042a:	2a01      	cmp	r2, #1
{
 800042c:	4606      	mov	r6, r0
 800042e:	460c      	mov	r4, r1
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8000430:	d001      	beq.n	8000436 <hidd_control_xfer_cb+0x16>
    }
  }
  else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
  {
    //------------- Class Specific Request -------------//
    switch( request->bRequest )
 8000432:	2400      	movs	r4, #0
 8000434:	e06b      	b.n	800050e <hidd_control_xfer_cb+0xee>
		if ( itf_num == _hidd_itf[i].itf_num ) return i;
 8000436:	4f66      	ldr	r7, [pc, #408]	; (80005d0 <hidd_control_xfer_cb+0x1b0>)
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t) request->wIndex);
 8000438:	88aa      	ldrh	r2, [r5, #4]
		if ( itf_num == _hidd_itf[i].itf_num ) return i;
 800043a:	7839      	ldrb	r1, [r7, #0]
 800043c:	b2d2      	uxtb	r2, r2
 800043e:	4291      	cmp	r1, r2
 8000440:	d1f7      	bne.n	8000432 <hidd_control_xfer_cb+0x12>
  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8000442:	f013 0360 	ands.w	r3, r3, #96	; 0x60
 8000446:	d01f      	beq.n	8000488 <hidd_control_xfer_cb+0x68>
  else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8000448:	2b20      	cmp	r3, #32
 800044a:	d1f2      	bne.n	8000432 <hidd_control_xfer_cb+0x12>
    switch( request->bRequest )
 800044c:	786b      	ldrb	r3, [r5, #1]
 800044e:	3b01      	subs	r3, #1
 8000450:	2b0a      	cmp	r3, #10
 8000452:	d8ee      	bhi.n	8000432 <hidd_control_xfer_cb+0x12>
 8000454:	a201      	add	r2, pc, #4	; (adr r2, 800045c <hidd_control_xfer_cb+0x3c>)
 8000456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800045a:	bf00      	nop
 800045c:	080004cd 	.word	0x080004cd
 8000460:	08000597 	.word	0x08000597
 8000464:	080005a3 	.word	0x080005a3
 8000468:	08000433 	.word	0x08000433
 800046c:	08000433 	.word	0x08000433
 8000470:	08000433 	.word	0x08000433
 8000474:	08000433 	.word	0x08000433
 8000478:	08000433 	.word	0x08000433
 800047c:	08000529 	.word	0x08000529
 8000480:	08000573 	.word	0x08000573
 8000484:	080005af 	.word	0x080005af
    if ( stage == CONTROL_STAGE_SETUP )
 8000488:	2c01      	cmp	r4, #1
 800048a:	d001      	beq.n	8000490 <hidd_control_xfer_cb+0x70>
  }else
  {
    return false; // stall unsupported request
  }

  return true;
 800048c:	2401      	movs	r4, #1
 800048e:	e03e      	b.n	800050e <hidd_control_xfer_cb+0xee>
      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID)
 8000490:	786a      	ldrb	r2, [r5, #1]
 8000492:	2a06      	cmp	r2, #6
 8000494:	d1cd      	bne.n	8000432 <hidd_control_xfer_cb+0x12>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8000496:	886a      	ldrh	r2, [r5, #2]
 8000498:	0a12      	lsrs	r2, r2, #8
 800049a:	2a21      	cmp	r2, #33	; 0x21
 800049c:	d10a      	bne.n	80004b4 <hidd_control_xfer_cb+0x94>
        TU_VERIFY(p_hid->hid_descriptor);
 800049e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80004a2:	2a00      	cmp	r2, #0
 80004a4:	d0c5      	beq.n	8000432 <hidd_control_xfer_cb+0x12>
        TU_VERIFY(tud_control_xfer(rhport, request, (void*)(uintptr_t) p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 80004a6:	4629      	mov	r1, r5
 80004a8:	7813      	ldrb	r3, [r2, #0]
}
 80004aa:	b003      	add	sp, #12
 80004ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        TU_VERIFY(tud_control_xfer(rhport, request, (void*)(uintptr_t) p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 80004b0:	f001 babe 	b.w	8001a30 <tud_control_xfer>
      else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT)
 80004b4:	2a22      	cmp	r2, #34	; 0x22
 80004b6:	d1bc      	bne.n	8000432 <hidd_control_xfer_cb+0x12>
        uint8_t const * desc_report = tud_hid_descriptor_report_cb(hid_itf);
 80004b8:	4618      	mov	r0, r3
 80004ba:	f002 fb85 	bl	8002bc8 <tud_hid_descriptor_report_cb>
 80004be:	4602      	mov	r2, r0
        tud_control_xfer(rhport, request, (void*)(uintptr_t) desc_report, p_hid->report_desc_len);
 80004c0:	88fb      	ldrh	r3, [r7, #6]
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 80004c2:	4629      	mov	r1, r5
 80004c4:	4630      	mov	r0, r6
 80004c6:	f001 fab3 	bl	8001a30 <tud_control_xfer>
 80004ca:	e020      	b.n	800050e <hidd_control_xfer_cb+0xee>
        if ( stage == CONTROL_STAGE_SETUP )
 80004cc:	2c01      	cmp	r4, #1
 80004ce:	d1dd      	bne.n	800048c <hidd_control_xfer_cb+0x6c>
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 80004d0:	88eb      	ldrh	r3, [r5, #6]
          uint8_t const report_type = tu_u16_high(request->wValue);
 80004d2:	8869      	ldrh	r1, [r5, #2]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80004d4:	2b40      	cmp	r3, #64	; 0x40
 80004d6:	4618      	mov	r0, r3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80004d8:	ea4f 2211 	mov.w	r2, r1, lsr #8
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80004dc:	bf28      	it	cs
 80004de:	2040      	movcs	r0, #64	; 0x40
          if ( (report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1) )
 80004e0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80004e4:	d016      	beq.n	8000514 <hidd_control_xfer_cb+0xf4>
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d914      	bls.n	8000514 <hidd_control_xfer_cb+0xf4>
            req_len--;
 80004ea:	3801      	subs	r0, #1
            *report_buf++ = report_id;
 80004ec:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <hidd_control_xfer_cb+0x1b4>)
 80004ee:	7239      	strb	r1, [r7, #8]
            req_len--;
 80004f0:	b280      	uxth	r0, r0
          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 80004f2:	9000      	str	r0, [sp, #0]
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff fe35 	bl	8000164 <tud_hid_get_report_cb>
 80004fa:	4404      	add	r4, r0
 80004fc:	b2a4      	uxth	r4, r4
          TU_ASSERT( xferlen > 0 );
 80004fe:	b964      	cbnz	r4, 800051a <hidd_control_xfer_cb+0xfa>
 8000500:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000504:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8000508:	07db      	lsls	r3, r3, #31
 800050a:	d592      	bpl.n	8000432 <hidd_control_xfer_cb+0x12>
 800050c:	be00      	bkpt	0x0000
}
 800050e:	4620      	mov	r0, r4
 8000510:	b003      	add	sp, #12
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}
          uint16_t xferlen = 0;
 8000514:	2400      	movs	r4, #0
          uint8_t* report_buf = p_hid->epin_buf;
 8000516:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <hidd_control_xfer_cb+0x1b8>)
 8000518:	e7eb      	b.n	80004f2 <hidd_control_xfer_cb+0xd2>
          tud_control_xfer(rhport, request, p_hid->epin_buf, xferlen);
 800051a:	4623      	mov	r3, r4
 800051c:	4629      	mov	r1, r5
 800051e:	4630      	mov	r0, r6
 8000520:	4a2d      	ldr	r2, [pc, #180]	; (80005d8 <hidd_control_xfer_cb+0x1b8>)
 8000522:	f001 fa85 	bl	8001a30 <tud_control_xfer>
 8000526:	e7b1      	b.n	800048c <hidd_control_xfer_cb+0x6c>
        if ( stage == CONTROL_STAGE_SETUP )
 8000528:	2c01      	cmp	r4, #1
 800052a:	d105      	bne.n	8000538 <hidd_control_xfer_cb+0x118>
          TU_VERIFY(request->wLength <= sizeof(p_hid->epout_buf));
 800052c:	88eb      	ldrh	r3, [r5, #6]
 800052e:	2b40      	cmp	r3, #64	; 0x40
 8000530:	f63f af7f 	bhi.w	8000432 <hidd_control_xfer_cb+0x12>
          tud_control_xfer(rhport, request, p_hid->epout_buf, request->wLength);
 8000534:	4a29      	ldr	r2, [pc, #164]	; (80005dc <hidd_control_xfer_cb+0x1bc>)
 8000536:	e7c4      	b.n	80004c2 <hidd_control_xfer_cb+0xa2>
        else if ( stage == CONTROL_STAGE_ACK )
 8000538:	2c03      	cmp	r4, #3
 800053a:	d1a7      	bne.n	800048c <hidd_control_xfer_cb+0x6c>
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 800053c:	88eb      	ldrh	r3, [r5, #6]
          uint8_t const report_type = tu_u16_high(request->wValue);
 800053e:	8869      	ldrh	r1, [r5, #2]
 8000540:	2b40      	cmp	r3, #64	; 0x40
 8000542:	4618      	mov	r0, r3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8000544:	ea4f 2211 	mov.w	r2, r1, lsr #8
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8000548:	bf28      	it	cs
 800054a:	2040      	movcs	r0, #64	; 0x40
          if ( (report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0]) )
 800054c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8000550:	d00d      	beq.n	800056e <hidd_control_xfer_cb+0x14e>
 8000552:	2b01      	cmp	r3, #1
 8000554:	d90b      	bls.n	800056e <hidd_control_xfer_cb+0x14e>
 8000556:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800055a:	428b      	cmp	r3, r1
 800055c:	d107      	bne.n	800056e <hidd_control_xfer_cb+0x14e>
            report_len--;
 800055e:	3801      	subs	r0, #1
            report_buf++;
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <hidd_control_xfer_cb+0x1c0>)
            report_len--;
 8000562:	b280      	uxth	r0, r0
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8000564:	9000      	str	r0, [sp, #0]
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff fdfe 	bl	8000168 <tud_hid_set_report_cb>
 800056c:	e78e      	b.n	800048c <hidd_control_xfer_cb+0x6c>
          uint8_t const* report_buf = p_hid->epout_buf;
 800056e:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <hidd_control_xfer_cb+0x1bc>)
 8000570:	e7f8      	b.n	8000564 <hidd_control_xfer_cb+0x144>
        if ( stage == CONTROL_STAGE_SETUP )
 8000572:	2c01      	cmp	r4, #1
 8000574:	d18a      	bne.n	800048c <hidd_control_xfer_cb+0x6c>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8000576:	8869      	ldrh	r1, [r5, #2]
          if ( tud_hid_set_idle_cb )
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <hidd_control_xfer_cb+0x1c4>)
 800057a:	0a09      	lsrs	r1, r1, #8
          p_hid->idle_rate = tu_u16_high(request->wValue);
 800057c:	7179      	strb	r1, [r7, #5]
          if ( tud_hid_set_idle_cb )
 800057e:	b12b      	cbz	r3, 800058c <hidd_control_xfer_cb+0x16c>
            TU_VERIFY( tud_hid_set_idle_cb( hid_itf, p_hid->idle_rate) );
 8000580:	2000      	movs	r0, #0
 8000582:	f3af 8000 	nop.w
 8000586:	2800      	cmp	r0, #0
 8000588:	f43f af53 	beq.w	8000432 <hidd_control_xfer_cb+0x12>
          tud_control_status(rhport, request);
 800058c:	4629      	mov	r1, r5
 800058e:	4630      	mov	r0, r6
 8000590:	f001 fa3c 	bl	8001a0c <tud_control_status>
 8000594:	e77a      	b.n	800048c <hidd_control_xfer_cb+0x6c>
        if ( stage == CONTROL_STAGE_SETUP )
 8000596:	2c01      	cmp	r4, #1
 8000598:	f47f af78 	bne.w	800048c <hidd_control_xfer_cb+0x6c>
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 800059c:	4623      	mov	r3, r4
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <hidd_control_xfer_cb+0x1c8>)
 80005a0:	e78f      	b.n	80004c2 <hidd_control_xfer_cb+0xa2>
        if ( stage == CONTROL_STAGE_SETUP )
 80005a2:	2c01      	cmp	r4, #1
 80005a4:	f47f af72 	bne.w	800048c <hidd_control_xfer_cb+0x6c>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 80005a8:	4623      	mov	r3, r4
 80005aa:	4a10      	ldr	r2, [pc, #64]	; (80005ec <hidd_control_xfer_cb+0x1cc>)
 80005ac:	e789      	b.n	80004c2 <hidd_control_xfer_cb+0xa2>
        if ( stage == CONTROL_STAGE_SETUP )
 80005ae:	2c01      	cmp	r4, #1
 80005b0:	d0ec      	beq.n	800058c <hidd_control_xfer_cb+0x16c>
        else if ( stage == CONTROL_STAGE_ACK )
 80005b2:	2c03      	cmp	r4, #3
 80005b4:	f47f af6a 	bne.w	800048c <hidd_control_xfer_cb+0x6c>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 80005b8:	8869      	ldrh	r1, [r5, #2]
          if (tud_hid_set_protocol_cb)
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <hidd_control_xfer_cb+0x1d0>)
          p_hid->protocol_mode = (uint8_t) request->wValue;
 80005bc:	b2c9      	uxtb	r1, r1
 80005be:	7139      	strb	r1, [r7, #4]
          if (tud_hid_set_protocol_cb)
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f43f af63 	beq.w	800048c <hidd_control_xfer_cb+0x6c>
            tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f3af 8000 	nop.w
 80005cc:	e75e      	b.n	800048c <hidd_control_xfer_cb+0x6c>
 80005ce:	bf00      	nop
 80005d0:	2000009c 	.word	0x2000009c
 80005d4:	200000a5 	.word	0x200000a5
 80005d8:	200000a4 	.word	0x200000a4
 80005dc:	200000e4 	.word	0x200000e4
 80005e0:	200000e5 	.word	0x200000e5
 80005e4:	00000000 	.word	0x00000000
 80005e8:	200000a1 	.word	0x200000a1
 80005ec:	200000a0 	.word	0x200000a0
 80005f0:	00000000 	.word	0x00000000

080005f4 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80005f4:	b537      	push	{r0, r1, r2, r4, r5, lr}

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++)
  {
    p_hid = &_hidd_itf[instance];
    if ( (ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in) ) break;
 80005f6:	4c1c      	ldr	r4, [pc, #112]	; (8000668 <hidd_xfer_cb+0x74>)
{
 80005f8:	4605      	mov	r5, r0
    if ( (ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in) ) break;
 80005fa:	78a2      	ldrb	r2, [r4, #2]
 80005fc:	7860      	ldrb	r0, [r4, #1]
 80005fe:	428a      	cmp	r2, r1
 8000600:	d00c      	beq.n	800061c <hidd_xfer_cb+0x28>
 8000602:	4288      	cmp	r0, r1
 8000604:	d126      	bne.n	8000654 <hidd_xfer_cb+0x60>
  TU_ASSERT(instance < CFG_TUD_HID);

  // Sent report successfully
  if (ep_addr == p_hid->ep_in)
  {
    if (tud_hid_report_complete_cb)
 8000606:	4a19      	ldr	r2, [pc, #100]	; (800066c <hidd_xfer_cb+0x78>)
 8000608:	b912      	cbnz	r2, 8000610 <hidd_xfer_cb+0x1c>
  {
    tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_INVALID, p_hid->epout_buf, (uint16_t) xferred_bytes);
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)));
  }

  return true;
 800060a:	2001      	movs	r0, #1
}
 800060c:	b003      	add	sp, #12
 800060e:	bd30      	pop	{r4, r5, pc}
      tud_hid_report_complete_cb(instance, p_hid->epin_buf, (uint16_t) xferred_bytes);
 8000610:	2000      	movs	r0, #0
 8000612:	4917      	ldr	r1, [pc, #92]	; (8000670 <hidd_xfer_cb+0x7c>)
 8000614:	b29a      	uxth	r2, r3
 8000616:	f3af 8000 	nop.w
 800061a:	e7f6      	b.n	800060a <hidd_xfer_cb+0x16>
  if (ep_addr == p_hid->ep_in)
 800061c:	4290      	cmp	r0, r2
 800061e:	d0f2      	beq.n	8000606 <hidd_xfer_cb+0x12>
    tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_INVALID, p_hid->epout_buf, (uint16_t) xferred_bytes);
 8000620:	2200      	movs	r2, #0
 8000622:	b29b      	uxth	r3, r3
 8000624:	4611      	mov	r1, r2
 8000626:	4610      	mov	r0, r2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800062e:	f7ff fd9b 	bl	8000168 <tud_hid_set_report_cb>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)));
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	4628      	mov	r0, r5
 8000636:	78a1      	ldrb	r1, [r4, #2]
 8000638:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800063c:	f000 fe54 	bl	80012e8 <usbd_edpt_xfer>
 8000640:	2800      	cmp	r0, #0
 8000642:	d1e2      	bne.n	800060a <hidd_xfer_cb+0x16>
 8000644:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000648:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800064c:	07da      	lsls	r2, r3, #31
 800064e:	d508      	bpl.n	8000662 <hidd_xfer_cb+0x6e>
 8000650:	be00      	bkpt	0x0000
 8000652:	e7db      	b.n	800060c <hidd_xfer_cb+0x18>
  TU_ASSERT(instance < CFG_TUD_HID);
 8000654:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000658:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800065c:	07db      	lsls	r3, r3, #31
 800065e:	d500      	bpl.n	8000662 <hidd_xfer_cb+0x6e>
 8000660:	be00      	bkpt	0x0000
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)));
 8000662:	2000      	movs	r0, #0
 8000664:	e7d2      	b.n	800060c <hidd_xfer_cb+0x18>
 8000666:	bf00      	nop
 8000668:	2000009c 	.word	0x2000009c
 800066c:	00000000 	.word	0x00000000
 8000670:	200000a4 	.word	0x200000a4

08000674 <fail_scsi_op.constprop.0>:
{
  p_msc->stage = MSC_STAGE_CMD;
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
}

static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
 8000674:	b430      	push	{r4, r5}
  msc_cbw_t const * p_cbw = &p_msc->cbw;
  msc_csw_t       * p_csw = &p_msc->csw;

  p_csw->status       = status;
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
  p_msc->stage        = MSC_STAGE_STATUS;
 8000676:	2402      	movs	r4, #2
  p_csw->status       = status;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <fail_scsi_op.constprop.0+0x44>)
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800067a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  p_csw->status       = status;
 800067c:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8000680:	6899      	ldr	r1, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 8000682:	f883 4030 	strb.w	r4, [r3, #48]	; 0x30

  // failed but sense key is not set: default to Illegal Request
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8000686:	f893 403c 	ldrb.w	r4, [r3, #60]	; 0x3c
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800068a:	1a8a      	subs	r2, r1, r2
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 800068e:	b924      	cbnz	r4, 800069a <fail_scsi_op.constprop.0+0x26>
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 8000690:	f242 0505 	movw	r5, #8197	; 0x2005
  _mscd_itf.add_sense_code      = add_sense_code;
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 8000694:	f883 403e 	strb.w	r4, [r3, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 8000698:	879d      	strh	r5, [r3, #60]	; 0x3c
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800069a:	b151      	cbz	r1, 80006b2 <fail_scsi_op.constprop.0+0x3e>
 800069c:	b14a      	cbz	r2, 80006b2 <fail_scsi_op.constprop.0+0x3e>
}
 800069e:	bc30      	pop	{r4, r5}
  return tu_bit_test(dir, 7);
 80006a0:	7b1a      	ldrb	r2, [r3, #12]
    if ( is_data_in(p_cbw->dir) )
 80006a2:	09d2      	lsrs	r2, r2, #7
      usbd_edpt_stall(rhport, p_msc->ep_in);
 80006a4:	bf14      	ite	ne
 80006a6:	f893 102e 	ldrbne.w	r1, [r3, #46]	; 0x2e
      usbd_edpt_stall(rhport, p_msc->ep_out);
 80006aa:	f893 102f 	ldrbeq.w	r1, [r3, #47]	; 0x2f
 80006ae:	f000 be5f 	b.w	8001370 <usbd_edpt_stall>
}
 80006b2:	bc30      	pop	{r4, r5}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000528 	.word	0x20000528

080006bc <proc_write10_cmd.constprop.0>:
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
  }
}

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
 80006bc:	b538      	push	{r3, r4, r5, lr}
{
  msc_cbw_t const * p_cbw = &p_msc->cbw;
  bool writable = true;

  if ( tud_msc_is_writable_cb )
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <proc_write10_cmd.constprop.0+0x58>)
static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
 80006c0:	4605      	mov	r5, r0
 80006c2:	4c15      	ldr	r4, [pc, #84]	; (8000718 <proc_write10_cmd.constprop.0+0x5c>)
  if ( tud_msc_is_writable_cb )
 80006c4:	b173      	cbz	r3, 80006e4 <proc_write10_cmd.constprop.0+0x28>
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 80006c6:	7b60      	ldrb	r0, [r4, #13]
 80006c8:	f3af 8000 	nop.w
  }

  if ( !writable )
 80006cc:	b950      	cbnz	r0, 80006e4 <proc_write10_cmd.constprop.0+0x28>
  _mscd_itf.sense_key           = sense_key;
 80006ce:	f242 7307 	movw	r3, #9991	; 0x2707
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 80006d2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  _mscd_itf.sense_key           = sense_key;
 80006d6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  {
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80006d8:	4628      	mov	r0, r5
  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
}
 80006da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80006de:	2101      	movs	r1, #1
 80006e0:	f7ff bfc8 	b.w	8000674 <fail_scsi_op.constprop.0>
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 80006e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80006e6:	68a3      	ldr	r3, [r4, #8]
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 80006e8:	4628      	mov	r0, r5
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 80006ea:	1a9b      	subs	r3, r3, r2
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 80006ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006f0:	bf28      	it	cs
 80006f2:	f44f 6380 	movcs.w	r3, #1024	; 0x400
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 80006f6:	4a09      	ldr	r2, [pc, #36]	; (800071c <proc_write10_cmd.constprop.0+0x60>)
 80006f8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	f000 fdf3 	bl	80012e8 <usbd_edpt_xfer>
 8000702:	b930      	cbnz	r0, 8000712 <proc_write10_cmd.constprop.0+0x56>
 8000704:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000708:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800070c:	07db      	lsls	r3, r3, #31
 800070e:	d500      	bpl.n	8000712 <proc_write10_cmd.constprop.0+0x56>
 8000710:	be00      	bkpt	0x0000
}
 8000712:	bd38      	pop	{r3, r4, r5, pc}
 8000714:	00000000 	.word	0x00000000
 8000718:	20000528 	.word	0x20000528
 800071c:	20000128 	.word	0x20000128

08000720 <proc_read10_cmd.constprop.0>:
static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
 8000720:	b570      	push	{r4, r5, r6, lr}
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8000722:	4c28      	ldr	r4, [pc, #160]	; (80007c4 <proc_read10_cmd.constprop.0+0xa4>)
 8000724:	4605      	mov	r5, r0
  return tu_ntohs(block_count);
 8000726:	8ae2      	ldrh	r2, [r4, #22]
  return (uint16_t) (cbw->total_bytes / block_count);
 8000728:	68a3      	ldr	r3, [r4, #8]
  return tu_ntohs(block_count);
 800072a:	ba52      	rev16	r2, r2
 800072c:	b292      	uxth	r2, r2
static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
 800072e:	b086      	sub	sp, #24
  if (block_count == 0) return 0;
 8000730:	b112      	cbz	r2, 8000738 <proc_read10_cmd.constprop.0+0x18>
  return (uint16_t) (cbw->total_bytes / block_count);
 8000732:	fbb3 f2f2 	udiv	r2, r3, r2
 8000736:	b292      	uxth	r2, r2
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8000738:	6ba0      	ldr	r0, [r4, #56]	; 0x38
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 800073a:	f8d4 1011 	ldr.w	r1, [r4, #17]
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800073e:	1a1b      	subs	r3, r3, r0
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8000740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000744:	bf28      	it	cs
 8000746:	f44f 6380 	movcs.w	r3, #1024	; 0x400
  uint32_t const offset = p_msc->xferred_len % block_sz;
 800074a:	fbb0 f6f2 	udiv	r6, r0, r2
  return tu_ntohl(lba);
 800074e:	ba09      	rev	r1, r1
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 8000750:	fb02 0216 	mls	r2, r2, r6, r0
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	7b60      	ldrb	r0, [r4, #13]
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <proc_read10_cmd.constprop.0+0xa8>)
 800075a:	4431      	add	r1, r6
 800075c:	f002 f9ca 	bl	8002af4 <tud_msc_read10_cb>
  if ( nbytes < 0 )
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	da0c      	bge.n	800077e <proc_read10_cmd.constprop.0+0x5e>
  _mscd_itf.sense_key           = sense_key;
 8000764:	f643 2302 	movw	r3, #14850	; 0x3a02
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8000768:	2101      	movs	r1, #1
  _mscd_itf.sense_key           = sense_key;
 800076a:	87a3      	strh	r3, [r4, #60]	; 0x3c
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800076c:	4628      	mov	r0, r5
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800076e:	2300      	movs	r3, #0
 8000770:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8000774:	b006      	add	sp, #24
 8000776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800077a:	f7ff bf7b 	b.w	8000674 <fail_scsi_op.constprop.0>
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 800077e:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
  else if ( nbytes == 0 )
 8000782:	d10f      	bne.n	80007a4 <proc_read10_cmd.constprop.0+0x84>
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8000784:	2207      	movs	r2, #7
 8000786:	e9cd 3303 	strd	r3, r3, [sp, #12]

  event.xfer_complete.ep_addr = ep_addr;
  event.xfer_complete.len     = xferred_bytes;
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
 800078a:	a803      	add	r0, sp, #12
  event.xfer_complete.ep_addr = ep_addr;
 800078c:	f88d 1010 	strb.w	r1, [sp, #16]
  dcd_event_handler(&event, in_isr);
 8000790:	4619      	mov	r1, r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8000792:	f88d 500c 	strb.w	r5, [sp, #12]
 8000796:	f88d 200d 	strb.w	r2, [sp, #13]
  event.xfer_complete.len     = xferred_bytes;
 800079a:	9305      	str	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 800079c:	f000 fcd6 	bl	800114c <dcd_event_handler>
}
 80007a0:	b006      	add	sp, #24
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 80007a4:	4628      	mov	r0, r5
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <proc_read10_cmd.constprop.0+0xa8>)
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	f000 fd9d 	bl	80012e8 <usbd_edpt_xfer>
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d1f6      	bne.n	80007a0 <proc_read10_cmd.constprop.0+0x80>
 80007b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80007b6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80007ba:	07db      	lsls	r3, r3, #31
 80007bc:	d5f0      	bpl.n	80007a0 <proc_read10_cmd.constprop.0+0x80>
 80007be:	be00      	bkpt	0x0000
 80007c0:	e7ee      	b.n	80007a0 <proc_read10_cmd.constprop.0+0x80>
 80007c2:	bf00      	nop
 80007c4:	20000528 	.word	0x20000528
 80007c8:	20000128 	.word	0x20000128

080007cc <rdwr10_validate_cmd>:
  return tu_ntohs(block_count);
 80007cc:	8ac2      	ldrh	r2, [r0, #22]
  if ( cbw->total_bytes == 0 )
 80007ce:	6883      	ldr	r3, [r0, #8]
  return tu_ntohs(block_count);
 80007d0:	ba52      	rev16	r2, r2
 80007d2:	b292      	uxth	r2, r2
  if ( cbw->total_bytes == 0 )
 80007d4:	b923      	cbnz	r3, 80007e0 <rdwr10_validate_cmd+0x14>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf0c      	ite	eq
 80007da:	2000      	moveq	r0, #0
 80007dc:	2002      	movne	r0, #2
 80007de:	4770      	bx	lr
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80007e0:	7bc1      	ldrb	r1, [r0, #15]
 80007e2:	2928      	cmp	r1, #40	; 0x28
 80007e4:	d104      	bne.n	80007f0 <rdwr10_validate_cmd+0x24>
  return tu_bit_test(dir, 7);
 80007e6:	7b01      	ldrb	r1, [r0, #12]
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80007e8:	09c9      	lsrs	r1, r1, #7
 80007ea:	d106      	bne.n	80007fa <rdwr10_validate_cmd+0x2e>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80007ec:	2002      	movs	r0, #2
 80007ee:	4770      	bx	lr
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 80007f0:	292a      	cmp	r1, #42	; 0x2a
 80007f2:	d102      	bne.n	80007fa <rdwr10_validate_cmd+0x2e>
  return tu_bit_test(dir, 7);
 80007f4:	7b01      	ldrb	r1, [r0, #12]
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 80007f6:	09c9      	lsrs	r1, r1, #7
 80007f8:	d1f8      	bne.n	80007ec <rdwr10_validate_cmd+0x20>
    else if ( 0 == block_count )
 80007fa:	b122      	cbz	r2, 8000806 <rdwr10_validate_cmd+0x3a>
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80007fc:	4293      	cmp	r3, r2
 80007fe:	bf34      	ite	cc
 8000800:	2002      	movcc	r0, #2
 8000802:	2000      	movcs	r0, #0
 8000804:	4770      	bx	lr
      status =  MSC_CSW_STATUS_FAILED;
 8000806:	2001      	movs	r0, #1
}
 8000808:	4770      	bx	lr
	...

0800080c <tud_msc_set_sense>:
  _mscd_itf.sense_key           = sense_key;
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <tud_msc_set_sense+0x14>)
 800080e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 8000812:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 8000816:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
}
 800081a:	2001      	movs	r0, #1
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000528 	.word	0x20000528

08000824 <mscd_init>:
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8000824:	2240      	movs	r2, #64	; 0x40
 8000826:	2100      	movs	r1, #0
 8000828:	4801      	ldr	r0, [pc, #4]	; (8000830 <mscd_init+0xc>)
 800082a:	f002 bea3 	b.w	8003574 <memset>
 800082e:	bf00      	nop
 8000830:	20000528 	.word	0x20000528

08000834 <mscd_reset>:
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8000834:	2240      	movs	r2, #64	; 0x40
 8000836:	2100      	movs	r1, #0
 8000838:	4801      	ldr	r0, [pc, #4]	; (8000840 <mscd_reset+0xc>)
 800083a:	f002 be9b 	b.w	8003574 <memset>
 800083e:	bf00      	nop
 8000840:	20000528 	.word	0x20000528

08000844 <mscd_open>:
{
 8000844:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8000846:	794b      	ldrb	r3, [r1, #5]
{
 8000848:	4605      	mov	r5, r0
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 800084a:	2b08      	cmp	r3, #8
 800084c:	d002      	beq.n	8000854 <mscd_open+0x10>
  TU_ASSERT(max_len >= drv_len, 0);
 800084e:	2000      	movs	r0, #0
}
 8000850:	b002      	add	sp, #8
 8000852:	bd70      	pop	{r4, r5, r6, pc}
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8000854:	798b      	ldrb	r3, [r1, #6]
 8000856:	2b06      	cmp	r3, #6
 8000858:	d1f9      	bne.n	800084e <mscd_open+0xa>
 800085a:	79cb      	ldrb	r3, [r1, #7]
 800085c:	2b50      	cmp	r3, #80	; 0x50
 800085e:	d1f6      	bne.n	800084e <mscd_open+0xa>
  TU_ASSERT(max_len >= drv_len, 0);
 8000860:	2a16      	cmp	r2, #22
 8000862:	d807      	bhi.n	8000874 <mscd_open+0x30>
 8000864:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000868:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800086c:	07d9      	lsls	r1, r3, #31
 800086e:	d5ee      	bpl.n	800084e <mscd_open+0xa>
 8000870:	be00      	bkpt	0x0000
 8000872:	e7ec      	b.n	800084e <mscd_open+0xa>
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 8000874:	788b      	ldrb	r3, [r1, #2]
 8000876:	4c16      	ldr	r4, [pc, #88]	; (80008d0 <mscd_open+0x8c>)
 8000878:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 800087c:	f104 032e 	add.w	r3, r4, #46	; 0x2e
 8000880:	780e      	ldrb	r6, [r1, #0]
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	f104 032f 	add.w	r3, r4, #47	; 0x2f
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2302      	movs	r3, #2
 800088c:	4431      	add	r1, r6
 800088e:	461a      	mov	r2, r3
 8000890:	f000 fcf4 	bl	800127c <usbd_open_edpt_pair>
 8000894:	b938      	cbnz	r0, 80008a6 <mscd_open+0x62>
 8000896:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800089a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800089e:	07da      	lsls	r2, r3, #31
 80008a0:	d5d5      	bpl.n	800084e <mscd_open+0xa>
 80008a2:	be00      	bkpt	0x0000
 80008a4:	e7d4      	b.n	8000850 <mscd_open+0xc>
  p_msc->stage = MSC_STAGE_CMD;
 80008a6:	2300      	movs	r3, #0
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 80008a8:	4622      	mov	r2, r4
  p_msc->stage = MSC_STAGE_CMD;
 80008aa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 80008ae:	4628      	mov	r0, r5
 80008b0:	231f      	movs	r3, #31
 80008b2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80008b6:	f000 fd17 	bl	80012e8 <usbd_edpt_xfer>
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 80008ba:	b930      	cbnz	r0, 80008ca <mscd_open+0x86>
 80008bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80008c0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80008c4:	07db      	lsls	r3, r3, #31
 80008c6:	d500      	bpl.n	80008ca <mscd_open+0x86>
 80008c8:	be00      	bkpt	0x0000
  return drv_len;
 80008ca:	2017      	movs	r0, #23
 80008cc:	e7c0      	b.n	8000850 <mscd_open+0xc>
 80008ce:	bf00      	nop
 80008d0:	20000528 	.word	0x20000528

080008d4 <mscd_control_xfer_cb>:
  if (stage != CONTROL_STAGE_SETUP) return true;
 80008d4:	2901      	cmp	r1, #1
{
 80008d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80008d8:	4606      	mov	r6, r0
 80008da:	4615      	mov	r5, r2
  if (stage != CONTROL_STAGE_SETUP) return true;
 80008dc:	d114      	bne.n	8000908 <mscd_control_xfer_cb+0x34>
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 80008de:	7813      	ldrb	r3, [r2, #0]
 80008e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80008e4:	2a02      	cmp	r2, #2
 80008e6:	d148      	bne.n	800097a <mscd_control_xfer_cb+0xa6>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 80008e8:	786c      	ldrb	r4, [r5, #1]
 80008ea:	2c01      	cmp	r4, #1
 80008ec:	d145      	bne.n	800097a <mscd_control_xfer_cb+0xa6>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 80008ee:	886a      	ldrh	r2, [r5, #2]
 80008f0:	2a00      	cmp	r2, #0
 80008f2:	d142      	bne.n	800097a <mscd_control_xfer_cb+0xa6>
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 80008f4:	88ab      	ldrh	r3, [r5, #4]
    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 80008f6:	4d3d      	ldr	r5, [pc, #244]	; (80009ec <mscd_control_xfer_cb+0x118>)
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 80008fe:	2a04      	cmp	r2, #4
 8000900:	d104      	bne.n	800090c <mscd_control_xfer_cb+0x38>
      usbd_edpt_stall(rhport, ep_addr);
 8000902:	4619      	mov	r1, r3
 8000904:	f000 fd34 	bl	8001370 <usbd_edpt_stall>
  return true;
 8000908:	2001      	movs	r0, #1
    break;
 800090a:	e01a      	b.n	8000942 <mscd_control_xfer_cb+0x6e>
      if ( ep_addr == p_msc->ep_in )
 800090c:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
 8000910:	4299      	cmp	r1, r3
 8000912:	d118      	bne.n	8000946 <mscd_control_xfer_cb+0x72>
        if ( p_msc->stage == MSC_STAGE_STATUS )
 8000914:	2a02      	cmp	r2, #2
 8000916:	d1f7      	bne.n	8000908 <mscd_control_xfer_cb+0x34>
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8000918:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800091a:	68ab      	ldr	r3, [r5, #8]
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	62ab      	str	r3, [r5, #40]	; 0x28
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 8000920:	2303      	movs	r3, #3
 8000922:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 8000926:	230d      	movs	r3, #13
 8000928:	f105 0220 	add.w	r2, r5, #32
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800092c:	f000 fcdc 	bl	80012e8 <usbd_edpt_xfer>
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8000930:	2800      	cmp	r0, #0
 8000932:	d1e9      	bne.n	8000908 <mscd_control_xfer_cb+0x34>
 8000934:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000938:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800093c:	07db      	lsls	r3, r3, #31
 800093e:	d552      	bpl.n	80009e6 <mscd_control_xfer_cb+0x112>
 8000940:	be00      	bkpt	0x0000
}
 8000942:	b002      	add	sp, #8
 8000944:	bd70      	pop	{r4, r5, r6, pc}
      else if ( ep_addr == p_msc->ep_out )
 8000946:	f895 402f 	ldrb.w	r4, [r5, #47]	; 0x2f
 800094a:	429c      	cmp	r4, r3
 800094c:	d1dc      	bne.n	8000908 <mscd_control_xfer_cb+0x34>
        if ( p_msc->stage == MSC_STAGE_CMD )
 800094e:	2a00      	cmp	r2, #0
 8000950:	d1da      	bne.n	8000908 <mscd_control_xfer_cb+0x34>

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 8000952:	4621      	mov	r1, r4
 8000954:	f000 fcfe 	bl	8001354 <usbd_edpt_busy>
 8000958:	2800      	cmp	r0, #0
 800095a:	d1d5      	bne.n	8000908 <mscd_control_xfer_cb+0x34>
 800095c:	4621      	mov	r1, r4
 800095e:	4630      	mov	r0, r6
 8000960:	f000 fd42 	bl	80013e8 <usbd_edpt_stalled>
          if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
 8000964:	2800      	cmp	r0, #0
 8000966:	d1cf      	bne.n	8000908 <mscd_control_xfer_cb+0x34>
  p_msc->stage = MSC_STAGE_CMD;
 8000968:	2300      	movs	r3, #0
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 800096a:	4630      	mov	r0, r6
  p_msc->stage = MSC_STAGE_CMD;
 800096c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 8000970:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <mscd_control_xfer_cb+0x118>)
 8000972:	231f      	movs	r3, #31
 8000974:	f895 102f 	ldrb.w	r1, [r5, #47]	; 0x2f
 8000978:	e7d8      	b.n	800092c <mscd_control_xfer_cb+0x58>
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 800097a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800097e:	2b20      	cmp	r3, #32
 8000980:	d131      	bne.n	80009e6 <mscd_control_xfer_cb+0x112>
  switch ( request->bRequest )
 8000982:	786b      	ldrb	r3, [r5, #1]
 8000984:	2bfe      	cmp	r3, #254	; 0xfe
 8000986:	d013      	beq.n	80009b0 <mscd_control_xfer_cb+0xdc>
 8000988:	2bff      	cmp	r3, #255	; 0xff
 800098a:	d12c      	bne.n	80009e6 <mscd_control_xfer_cb+0x112>
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 800098c:	886b      	ldrh	r3, [r5, #2]
 800098e:	bb53      	cbnz	r3, 80009e6 <mscd_control_xfer_cb+0x112>
 8000990:	88e9      	ldrh	r1, [r5, #6]
 8000992:	b28a      	uxth	r2, r1
 8000994:	bb3a      	cbnz	r2, 80009e6 <mscd_control_xfer_cb+0x112>
  p_msc->stage       = MSC_STAGE_CMD;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <mscd_control_xfer_cb+0x118>)
      tud_control_status(rhport, request);
 8000998:	4630      	mov	r0, r6
  p_msc->sense_key           = 0;
 800099a:	8799      	strh	r1, [r3, #60]	; 0x3c
      tud_control_status(rhport, request);
 800099c:	4629      	mov	r1, r5
  p_msc->xferred_len = 0;
 800099e:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
  p_msc->stage       = MSC_STAGE_CMD;
 80009a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  p_msc->add_sense_qualifier = 0;
 80009a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      tud_control_status(rhport, request);
 80009aa:	f001 f82f 	bl	8001a0c <tud_control_status>
    break;
 80009ae:	e7ab      	b.n	8000908 <mscd_control_xfer_cb+0x34>
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 80009b0:	886b      	ldrh	r3, [r5, #2]
 80009b2:	b9c3      	cbnz	r3, 80009e6 <mscd_control_xfer_cb+0x112>
 80009b4:	88eb      	ldrh	r3, [r5, #6]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d115      	bne.n	80009e6 <mscd_control_xfer_cb+0x112>
      uint8_t maxlun = 1;
 80009ba:	f88d 3007 	strb.w	r3, [sp, #7]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <mscd_control_xfer_cb+0x11c>)
 80009c0:	b11b      	cbz	r3, 80009ca <mscd_control_xfer_cb+0xf6>
 80009c2:	f3af 8000 	nop.w
 80009c6:	f88d 0007 	strb.w	r0, [sp, #7]
      TU_VERIFY(maxlun);
 80009ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009ce:	b153      	cbz	r3, 80009e6 <mscd_control_xfer_cb+0x112>
      maxlun--;
 80009d0:	3b01      	subs	r3, #1
 80009d2:	f88d 3007 	strb.w	r3, [sp, #7]
      tud_control_xfer(rhport, request, &maxlun, 1);
 80009d6:	4629      	mov	r1, r5
 80009d8:	2301      	movs	r3, #1
 80009da:	4630      	mov	r0, r6
 80009dc:	f10d 0207 	add.w	r2, sp, #7
 80009e0:	f001 f826 	bl	8001a30 <tud_control_xfer>
 80009e4:	e790      	b.n	8000908 <mscd_control_xfer_cb+0x34>
  switch ( request->bRequest )
 80009e6:	2000      	movs	r0, #0
 80009e8:	e7ab      	b.n	8000942 <mscd_control_xfer_cb+0x6e>
 80009ea:	bf00      	nop
 80009ec:	20000528 	.word	0x20000528
 80009f0:	00000000 	.word	0x00000000

080009f4 <mscd_xfer_cb>:
{
 80009f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch (p_msc->stage)
 80009f8:	4cb8      	ldr	r4, [pc, #736]	; (8000cdc <mscd_xfer_cb+0x2e8>)
{
 80009fa:	4605      	mov	r5, r0
  switch (p_msc->stage)
 80009fc:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
{
 8000a00:	461e      	mov	r6, r3
  switch (p_msc->stage)
 8000a02:	2f01      	cmp	r7, #1
{
 8000a04:	b08f      	sub	sp, #60	; 0x3c
  switch (p_msc->stage)
 8000a06:	f000 81b5 	beq.w	8000d74 <mscd_xfer_cb+0x380>
 8000a0a:	2f03      	cmp	r7, #3
 8000a0c:	f000 8227 	beq.w	8000e5e <mscd_xfer_cb+0x46a>
 8000a10:	2f00      	cmp	r7, #0
 8000a12:	d142      	bne.n	8000a9a <mscd_xfer_cb+0xa6>
      if(ep_addr != p_msc->ep_out) return true;
 8000a14:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	d001      	beq.n	8000a20 <mscd_xfer_cb+0x2c>
  return true;
 8000a1c:	2001      	movs	r0, #1
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8000a1e:	e013      	b.n	8000a48 <mscd_xfer_cb+0x54>
      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 8000a20:	2e1f      	cmp	r6, #31
 8000a22:	d103      	bne.n	8000a2c <mscd_xfer_cb+0x38>
 8000a24:	6822      	ldr	r2, [r4, #0]
 8000a26:	4bae      	ldr	r3, [pc, #696]	; (8000ce0 <mscd_xfer_cb+0x2ec>)
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d010      	beq.n	8000a4e <mscd_xfer_cb+0x5a>
        p_msc->stage = MSC_STAGE_NEED_RESET;
 8000a2c:	2304      	movs	r3, #4
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8000a2e:	4628      	mov	r0, r5
 8000a30:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
        p_msc->stage = MSC_STAGE_NEED_RESET;
 8000a34:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8000a38:	f000 fc9a 	bl	8001370 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8000a42:	f000 fc95 	bl	8001370 <usbd_edpt_stall>
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 8000a46:	2000      	movs	r0, #0
}
 8000a48:	b00f      	add	sp, #60	; 0x3c
 8000a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p_csw->signature    = MSC_CSW_SIGNATURE;
 8000a4e:	4ba5      	ldr	r3, [pc, #660]	; (8000ce4 <mscd_xfer_cb+0x2f0>)
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 8000a50:	7be6      	ldrb	r6, [r4, #15]
      p_csw->signature    = MSC_CSW_SIGNATURE;
 8000a52:	6223      	str	r3, [r4, #32]
      p_csw->tag          = p_cbw->tag;
 8000a54:	6863      	ldr	r3, [r4, #4]
      p_msc->total_len = p_cbw->total_bytes;
 8000a56:	f8d4 8008 	ldr.w	r8, [r4, #8]
      p_csw->data_residue = 0;
 8000a5a:	e9c4 3709 	strd	r3, r7, [r4, #36]	; 0x24
      p_msc->stage = MSC_STAGE_DATA;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 8000a64:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 8000a68:	2b28      	cmp	r3, #40	; 0x28
      p_msc->xferred_len = 0;
 8000a6a:	e9c4 870d 	strd	r8, r7, [r4, #52]	; 0x34
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 8000a6e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 8000a72:	d12c      	bne.n	8000ace <mscd_xfer_cb+0xda>
        uint8_t const status = rdwr10_validate_cmd(p_cbw);
 8000a74:	4620      	mov	r0, r4
 8000a76:	f7ff fea9 	bl	80007cc <rdwr10_validate_cmd>
        if ( status != MSC_CSW_STATUS_PASSED)
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	b118      	cbz	r0, 8000a86 <mscd_xfer_cb+0x92>
    p_msc->xferred_len += xferred_bytes;

    // Set sense
    set_sense_medium_not_present(p_cbw->lun);

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f7ff fdf8 	bl	8000674 <fail_scsi_op.constprop.0>
 8000a84:	e009      	b.n	8000a9a <mscd_xfer_cb+0xa6>
        }else if ( p_cbw->total_bytes )
 8000a86:	f1b8 0f00 	cmp.w	r8, #0
 8000a8a:	f000 816d 	beq.w	8000d68 <mscd_xfer_cb+0x374>
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8000a8e:	2e28      	cmp	r6, #40	; 0x28
 8000a90:	f040 81c2 	bne.w	8000e18 <mscd_xfer_cb+0x424>
            proc_read10_cmd(rhport, p_msc);
 8000a94:	4628      	mov	r0, r5
 8000a96:	f7ff fe43 	bl	8000720 <proc_read10_cmd.constprop.0>
  if ( p_msc->stage == MSC_STAGE_STATUS )
 8000a9a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d1bc      	bne.n	8000a1c <mscd_xfer_cb+0x28>
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 8000aa2:	4628      	mov	r0, r5
 8000aa4:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8000aa8:	f000 fc9e 	bl	80013e8 <usbd_edpt_stalled>
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d1b5      	bne.n	8000a1c <mscd_xfer_cb+0x28>
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8000ab0:	68a3      	ldr	r3, [r4, #8]
 8000ab2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8000ab4:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	f240 81f9 	bls.w	8000eb0 <mscd_xfer_cb+0x4bc>
  return tu_bit_test(dir, 7);
 8000abe:	7b20      	ldrb	r0, [r4, #12]
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8000ac0:	09c0      	lsrs	r0, r0, #7
 8000ac2:	f000 81f5 	beq.w	8000eb0 <mscd_xfer_cb+0x4bc>
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	f000 fc52 	bl	8001370 <usbd_edpt_stall>
 8000acc:	e7a6      	b.n	8000a1c <mscd_xfer_cb+0x28>
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8000ace:	f1b8 0f00 	cmp.w	r8, #0
 8000ad2:	d017      	beq.n	8000b04 <mscd_xfer_cb+0x110>
  return tu_bit_test(dir, 7);
 8000ad4:	7b23      	ldrb	r3, [r4, #12]
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8000ad6:	09db      	lsrs	r3, r3, #7
 8000ad8:	d114      	bne.n	8000b04 <mscd_xfer_cb+0x110>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8000ada:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8000ade:	d901      	bls.n	8000ae4 <mscd_xfer_cb+0xf0>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	e7cc      	b.n	8000a7e <mscd_xfer_cb+0x8a>
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 8000ae4:	4a80      	ldr	r2, [pc, #512]	; (8000ce8 <mscd_xfer_cb+0x2f4>)
 8000ae6:	fa1f f388 	uxth.w	r3, r8
 8000aea:	4628      	mov	r0, r5
 8000aec:	f000 fbfc 	bl	80012e8 <usbd_edpt_xfer>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d1d2      	bne.n	8000a9a <mscd_xfer_cb+0xa6>
 8000af4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000af8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8000afc:	07da      	lsls	r2, r3, #31
 8000afe:	d5a2      	bpl.n	8000a46 <mscd_xfer_cb+0x52>
        TU_ASSERT( send_csw(rhport, p_msc) );
 8000b00:	be00      	bkpt	0x0000
 8000b02:	e7a1      	b.n	8000a48 <mscd_xfer_cb+0x54>
  switch ( scsi_cmd[0] )
 8000b04:	2e25      	cmp	r6, #37	; 0x25
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 8000b06:	f894 800d 	ldrb.w	r8, [r4, #13]
  switch ( scsi_cmd[0] )
 8000b0a:	d808      	bhi.n	8000b1e <mscd_xfer_cb+0x12a>
 8000b0c:	2e19      	cmp	r6, #25
 8000b0e:	d814      	bhi.n	8000b3a <mscd_xfer_cb+0x146>
 8000b10:	2e03      	cmp	r6, #3
 8000b12:	f000 80f3 	beq.w	8000cfc <mscd_xfer_cb+0x308>
 8000b16:	2e12      	cmp	r6, #18
 8000b18:	f000 8097 	beq.w	8000c4a <mscd_xfer_cb+0x256>
 8000b1c:	b366      	cbz	r6, 8000b78 <mscd_xfer_cb+0x184>
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 8000b1e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1dc      	bne.n	8000ae0 <mscd_xfer_cb+0xec>
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8000b26:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8000b28:	4a6f      	ldr	r2, [pc, #444]	; (8000ce8 <mscd_xfer_cb+0x2f4>)
 8000b2a:	4970      	ldr	r1, [pc, #448]	; (8000cec <mscd_xfer_cb+0x2f8>)
 8000b2c:	7b60      	ldrb	r0, [r4, #13]
 8000b2e:	f001 ffcf 	bl	8002ad0 <tud_msc_scsi_cb>
          if ( resplen < 0 )
 8000b32:	2800      	cmp	r0, #0
 8000b34:	f280 8111 	bge.w	8000d5a <mscd_xfer_cb+0x366>
 8000b38:	e7d2      	b.n	8000ae0 <mscd_xfer_cb+0xec>
  switch ( scsi_cmd[0] )
 8000b3a:	3e1a      	subs	r6, #26
 8000b3c:	2e0b      	cmp	r6, #11
 8000b3e:	d8ee      	bhi.n	8000b1e <mscd_xfer_cb+0x12a>
 8000b40:	a301      	add	r3, pc, #4	; (adr r3, 8000b48 <mscd_xfer_cb+0x154>)
 8000b42:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 8000b46:	bf00      	nop
 8000b48:	08000c9b 	.word	0x08000c9b
 8000b4c:	08000b9b 	.word	0x08000b9b
 8000b50:	08000b1f 	.word	0x08000b1f
 8000b54:	08000b1f 	.word	0x08000b1f
 8000b58:	08000b1f 	.word	0x08000b1f
 8000b5c:	08000b1f 	.word	0x08000b1f
 8000b60:	08000b1f 	.word	0x08000b1f
 8000b64:	08000b1f 	.word	0x08000b1f
 8000b68:	08000b1f 	.word	0x08000b1f
 8000b6c:	08000c03 	.word	0x08000c03
 8000b70:	08000b1f 	.word	0x08000b1f
 8000b74:	08000bb7 	.word	0x08000bb7
      if ( !tud_msc_test_unit_ready_cb(lun) )
 8000b78:	4640      	mov	r0, r8
 8000b7a:	f001 ffa7 	bl	8002acc <tud_msc_test_unit_ready_cb>
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	f040 80ee 	bne.w	8000d60 <mscd_xfer_cb+0x36c>
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8000b84:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1c8      	bne.n	8000b1e <mscd_xfer_cb+0x12a>
  _mscd_itf.sense_key           = sense_key;
 8000b8c:	f643 2302 	movw	r3, #14850	; 0x3a02
 8000b90:	87a3      	strh	r3, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 8000b98:	e7c1      	b.n	8000b1e <mscd_xfer_cb+0x12a>
      if (tud_msc_start_stop_cb)
 8000b9a:	4b55      	ldr	r3, [pc, #340]	; (8000cf0 <mscd_xfer_cb+0x2fc>)
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 80df 	beq.w	8000d60 <mscd_xfer_cb+0x36c>
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 8000ba2:	7ce1      	ldrb	r1, [r4, #19]
 8000ba4:	4640      	mov	r0, r8
 8000ba6:	f3c1 0340 	ubfx	r3, r1, #1, #1
 8000baa:	f001 0201 	and.w	r2, r1, #1
 8000bae:	0909      	lsrs	r1, r1, #4
 8000bb0:	f002 f804 	bl	8002bbc <tud_msc_start_stop_cb>
 8000bb4:	e7e3      	b.n	8000b7e <mscd_xfer_cb+0x18a>
      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 8000bb6:	4640      	mov	r0, r8
 8000bb8:	aa04      	add	r2, sp, #16
 8000bba:	a905      	add	r1, sp, #20
 8000bbc:	f001 fff6 	bl	8002bac <tud_msc_capacity_cb>
      if (block_count == 0 || block_size == 0)
 8000bc0:	9b05      	ldr	r3, [sp, #20]
 8000bc2:	b113      	cbz	r3, 8000bca <mscd_xfer_cb+0x1d6>
      block_size = (uint32_t) block_size_u16;
 8000bc4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
      if (block_count == 0 || block_size == 0)
 8000bc8:	b93a      	cbnz	r2, 8000bda <mscd_xfer_cb+0x1e6>
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8000bca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1a5      	bne.n	8000b1e <mscd_xfer_cb+0x12a>
  _mscd_itf.sense_key           = sense_key;
 8000bd2:	f643 2202 	movw	r2, #14850	; 0x3a02
 8000bd6:	87a2      	strh	r2, [r4, #60]	; 0x3c
 8000bd8:	e7dc      	b.n	8000b94 <mscd_xfer_cb+0x1a0>
        resplen = sizeof(read_capa10);
 8000bda:	2008      	movs	r0, #8
        memcpy(buffer, &read_capa10, (size_t) resplen);
 8000bdc:	4942      	ldr	r1, [pc, #264]	; (8000ce8 <mscd_xfer_cb+0x2f4>)
        read_capa10.last_lba   = tu_htonl(block_count-1);
 8000bde:	3b01      	subs	r3, #1
 8000be0:	ba1b      	rev	r3, r3
        read_capa10.block_size = tu_htonl(block_size);
 8000be2:	ba12      	rev	r2, r2
        memcpy(buffer, &read_capa10, (size_t) resplen);
 8000be4:	e9c1 3200 	strd	r3, r2, [r1]
            if ( p_cbw->total_bytes == 0 )
 8000be8:	68a3      	ldr	r3, [r4, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f43f af78 	beq.w	8000ae0 <mscd_xfer_cb+0xec>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8000bf0:	4283      	cmp	r3, r0
 8000bf2:	bf28      	it	cs
 8000bf4:	4603      	movcs	r3, r0
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 8000bf6:	4a3c      	ldr	r2, [pc, #240]	; (8000ce8 <mscd_xfer_cb+0x2f4>)
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 8000bf8:	6363      	str	r3, [r4, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 8000bfa:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	e773      	b.n	8000aea <mscd_xfer_cb+0xf6>
      scsi_read_format_capacity_data_t read_fmt_capa =
 8000c02:	2300      	movs	r3, #0
 8000c04:	ae05      	add	r6, sp, #20
 8000c06:	9305      	str	r3, [sp, #20]
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8000c08:	f10d 020e 	add.w	r2, sp, #14
 8000c0c:	4640      	mov	r0, r8
      scsi_read_format_capacity_data_t read_fmt_capa =
 8000c0e:	e9c6 3301 	strd	r3, r3, [r6, #4]
      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8000c12:	a904      	add	r1, sp, #16
 8000c14:	f001 ffca 	bl	8002bac <tud_msc_capacity_cb>
      if (block_count == 0 || block_size == 0)
 8000c18:	9a04      	ldr	r2, [sp, #16]
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d0d5      	beq.n	8000bca <mscd_xfer_cb+0x1d6>
 8000c1e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0d1      	beq.n	8000bca <mscd_xfer_cb+0x1d6>
        read_fmt_capa.block_num = tu_htonl(block_count);
 8000c26:	ba12      	rev	r2, r2
        memcpy(buffer, &read_fmt_capa, (size_t) resplen);
 8000c28:	2108      	movs	r1, #8
 8000c2a:	9206      	str	r2, [sp, #24]
 8000c2c:	2202      	movs	r2, #2
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 8000c2e:	ba5b      	rev16	r3, r3
        memcpy(buffer, &read_fmt_capa, (size_t) resplen);
 8000c30:	f8ad 301e 	strh.w	r3, [sp, #30]
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <mscd_xfer_cb+0x2f4>)
 8000c36:	f88d 1017 	strb.w	r1, [sp, #23]
 8000c3a:	f88d 201c 	strb.w	r2, [sp, #28]
 8000c3e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8000c42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        resplen = sizeof(read_fmt_capa);
 8000c46:	200c      	movs	r0, #12
 8000c48:	e7ce      	b.n	8000be8 <mscd_xfer_cb+0x1f4>
      scsi_inquiry_resp_t inquiry_rsp =
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	f88d 3015 	strb.w	r3, [sp, #21]
 8000c56:	2302      	movs	r3, #2
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 8000c58:	f04f 3620 	mov.w	r6, #538976288	; 0x20202020
      scsi_inquiry_resp_t inquiry_rsp =
 8000c5c:	f88d 3016 	strb.w	r3, [sp, #22]
 8000c60:	f88d 3017 	strb.w	r3, [sp, #23]
 8000c64:	231f      	movs	r3, #31
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 8000c66:	2210      	movs	r2, #16
 8000c68:	2120      	movs	r1, #32
      memcpy(buffer, &inquiry_rsp, (size_t) resplen);
 8000c6a:	4f1f      	ldr	r7, [pc, #124]	; (8000ce8 <mscd_xfer_cb+0x2f4>)
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 8000c6c:	a809      	add	r0, sp, #36	; 0x24
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 8000c6e:	e9cd 6607 	strd	r6, r6, [sp, #28]
      scsi_inquiry_resp_t inquiry_rsp =
 8000c72:	f88d 3018 	strb.w	r3, [sp, #24]
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 8000c76:	f002 fc7d 	bl	8003574 <memset>
      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 8000c7a:	4640      	mov	r0, r8
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 8000c7c:	960d      	str	r6, [sp, #52]	; 0x34
      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 8000c7e:	ab0d      	add	r3, sp, #52	; 0x34
 8000c80:	aa09      	add	r2, sp, #36	; 0x24
 8000c82:	a907      	add	r1, sp, #28
      memcpy(buffer, &inquiry_rsp, (size_t) resplen);
 8000c84:	ae05      	add	r6, sp, #20
      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 8000c86:	f001 fedd 	bl	8002a44 <tud_msc_inquiry_cb>
      memcpy(buffer, &inquiry_rsp, (size_t) resplen);
 8000c8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c8c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000c8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c90:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000c92:	6833      	ldr	r3, [r6, #0]
      resplen = sizeof(inquiry_rsp);
 8000c94:	2024      	movs	r0, #36	; 0x24
      memcpy(buffer, &inquiry_rsp, (size_t) resplen);
 8000c96:	603b      	str	r3, [r7, #0]
          else if (resplen == 0)
 8000c98:	e7a6      	b.n	8000be8 <mscd_xfer_cb+0x1f4>
      scsi_mode_sense6_resp_t mode_resp =
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	f88d 3014 	strb.w	r3, [sp, #20]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8000ca6:	f88d 3015 	strb.w	r3, [sp, #21]
 8000caa:	f363 0206 	bfi	r2, r3, #0, #7
 8000cae:	f88d 3017 	strb.w	r3, [sp, #23]
      if ( tud_msc_is_writable_cb )
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <mscd_xfer_cb+0x300>)
      scsi_mode_sense6_resp_t mode_resp =
 8000cb4:	f88d 2016 	strb.w	r2, [sp, #22]
      if ( tud_msc_is_writable_cb )
 8000cb8:	b1f3      	cbz	r3, 8000cf8 <mscd_xfer_cb+0x304>
        writable = tud_msc_is_writable_cb(lun);
 8000cba:	4640      	mov	r0, r8
 8000cbc:	f3af 8000 	nop.w
      mode_resp.write_protected = !writable;
 8000cc0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8000cc4:	f080 0001 	eor.w	r0, r0, #1
 8000cc8:	f360 13c7 	bfi	r3, r0, #7, #1
 8000ccc:	f88d 3016 	strb.w	r3, [sp, #22]
      memcpy(buffer, &mode_resp, (size_t) resplen);
 8000cd0:	9a05      	ldr	r2, [sp, #20]
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <mscd_xfer_cb+0x2f4>)
      resplen = sizeof(mode_resp);
 8000cd4:	2004      	movs	r0, #4
      memcpy(buffer, &mode_resp, (size_t) resplen);
 8000cd6:	601a      	str	r2, [r3, #0]
          else if (resplen == 0)
 8000cd8:	e786      	b.n	8000be8 <mscd_xfer_cb+0x1f4>
 8000cda:	bf00      	nop
 8000cdc:	20000528 	.word	0x20000528
 8000ce0:	43425355 	.word	0x43425355
 8000ce4:	53425355 	.word	0x53425355
 8000ce8:	20000128 	.word	0x20000128
 8000cec:	20000537 	.word	0x20000537
 8000cf0:	08002bbd 	.word	0x08002bbd
 8000cf4:	00000000 	.word	0x00000000
      bool writable = true;
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	e7e1      	b.n	8000cc0 <mscd_xfer_cb+0x2cc>
      scsi_sense_fixed_resp_t sense_rsp =
 8000cfc:	2212      	movs	r2, #18
 8000cfe:	2100      	movs	r1, #0
 8000d00:	a805      	add	r0, sp, #20
      sense_rsp.add_sense_qualifier = p_msc->add_sense_qualifier;
 8000d02:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 8000d06:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 8000d0a:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
      scsi_sense_fixed_resp_t sense_rsp =
 8000d0e:	f002 fc31 	bl	8003574 <memset>
      memcpy(buffer, &sense_rsp, (size_t) resplen);
 8000d12:	23f0      	movs	r3, #240	; 0xf0
 8000d14:	f88d 3014 	strb.w	r3, [sp, #20]
 8000d18:	230a      	movs	r3, #10
 8000d1a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 8000d1e:	f006 060f 	and.w	r6, r6, #15
      memcpy(buffer, &sense_rsp, (size_t) resplen);
 8000d22:	4f6a      	ldr	r7, [pc, #424]	; (8000ecc <mscd_xfer_cb+0x4d8>)
 8000d24:	f88d 6016 	strb.w	r6, [sp, #22]
 8000d28:	f88d 301b 	strb.w	r3, [sp, #27]
 8000d2c:	f88d 9020 	strb.w	r9, [sp, #32]
 8000d30:	ae05      	add	r6, sp, #20
 8000d32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d34:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000d36:	6833      	ldr	r3, [r6, #0]
 8000d38:	803b      	strh	r3, [r7, #0]
      if (tud_msc_request_sense_cb)
 8000d3a:	4b65      	ldr	r3, [pc, #404]	; (8000ed0 <mscd_xfer_cb+0x4dc>)
 8000d3c:	b1c3      	cbz	r3, 8000d70 <mscd_xfer_cb+0x37c>
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t) bufsize);
 8000d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d42:	4640      	mov	r0, r8
 8000d44:	f1a7 0110 	sub.w	r1, r7, #16
 8000d48:	f3af 8000 	nop.w
  _mscd_itf.sense_key           = sense_key;
 8000d4c:	2300      	movs	r3, #0
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 8000d4e:	4298      	cmp	r0, r3
  _mscd_itf.sense_key           = sense_key;
 8000d50:	87a3      	strh	r3, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 8000d52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 8000d56:	f6ff aee2 	blt.w	8000b1e <mscd_xfer_cb+0x12a>
          else if (resplen == 0)
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	f47f af44 	bne.w	8000be8 <mscd_xfer_cb+0x1f4>
            if (p_cbw->total_bytes)
 8000d60:	68a3      	ldr	r3, [r4, #8]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f47f aebc 	bne.w	8000ae0 <mscd_xfer_cb+0xec>
          p_msc->stage = MSC_STAGE_STATUS;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8000d6e:	e694      	b.n	8000a9a <mscd_xfer_cb+0xa6>
      resplen = sizeof(sense_rsp);
 8000d70:	2012      	movs	r0, #18
 8000d72:	e7eb      	b.n	8000d4c <mscd_xfer_cb+0x358>
      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8000d74:	7be3      	ldrb	r3, [r4, #15]
        p_msc->xferred_len += xferred_bytes;
 8000d76:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8000d78:	2b28      	cmp	r3, #40	; 0x28
 8000d7a:	d105      	bne.n	8000d88 <mscd_xfer_cb+0x394>
        if ( p_msc->xferred_len >= p_msc->total_len )
 8000d7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
        p_msc->xferred_len += xferred_bytes;
 8000d7e:	4430      	add	r0, r6
        if ( p_msc->xferred_len >= p_msc->total_len )
 8000d80:	4298      	cmp	r0, r3
        p_msc->xferred_len += xferred_bytes;
 8000d82:	63a0      	str	r0, [r4, #56]	; 0x38
        if ( p_msc->xferred_len >= p_msc->total_len )
 8000d84:	d2f0      	bcs.n	8000d68 <mscd_xfer_cb+0x374>
 8000d86:	e685      	b.n	8000a94 <mscd_xfer_cb+0xa0>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 8000d88:	2b2a      	cmp	r3, #42	; 0x2a
 8000d8a:	d149      	bne.n	8000e20 <mscd_xfer_cb+0x42c>
  return tu_ntohs(block_count);
 8000d8c:	8ae2      	ldrh	r2, [r4, #22]
 8000d8e:	ba52      	rev16	r2, r2
 8000d90:	b292      	uxth	r2, r2
  if (block_count == 0) return 0;
 8000d92:	b11a      	cbz	r2, 8000d9c <mscd_xfer_cb+0x3a8>
  return (uint16_t) (cbw->total_bytes / block_count);
 8000d94:	68a3      	ldr	r3, [r4, #8]
 8000d96:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d9a:	b292      	uxth	r2, r2
  uint32_t const offset = p_msc->xferred_len % block_sz;
 8000d9c:	fbb0 fcf2 	udiv	ip, r0, r2
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8000da0:	f8d4 1011 	ldr.w	r1, [r4, #17]
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 8000da4:	4f49      	ldr	r7, [pc, #292]	; (8000ecc <mscd_xfer_cb+0x4d8>)
  return tu_ntohl(lba);
 8000da6:	ba09      	rev	r1, r1
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 8000da8:	fb02 021c 	mls	r2, r2, ip, r0
 8000dac:	4461      	add	r1, ip
 8000dae:	463b      	mov	r3, r7
 8000db0:	7b60      	ldrb	r0, [r4, #13]
 8000db2:	9600      	str	r6, [sp, #0]
 8000db4:	f001 fec0 	bl	8002b38 <tud_msc_write10_cb>
  if ( nbytes < 0 )
 8000db8:	1e01      	subs	r1, r0, #0
 8000dba:	da09      	bge.n	8000dd0 <mscd_xfer_cb+0x3dc>
    p_msc->xferred_len += xferred_bytes;
 8000dbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000dbe:	4433      	add	r3, r6
 8000dc0:	63a3      	str	r3, [r4, #56]	; 0x38
  _mscd_itf.sense_key           = sense_key;
 8000dc2:	f643 2302 	movw	r3, #14850	; 0x3a02
 8000dc6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000dce:	e687      	b.n	8000ae0 <mscd_xfer_cb+0xec>
  }else
  {
    // Application consume less than what we got (including zero)
    if ( (uint32_t) nbytes < xferred_bytes )
 8000dd0:	428e      	cmp	r6, r1
 8000dd2:	d91b      	bls.n	8000e0c <mscd_xfer_cb+0x418>
    {
      uint32_t const left_over = xferred_bytes - (uint32_t) nbytes;
 8000dd4:	1a76      	subs	r6, r6, r1
      if ( nbytes > 0 )
 8000dd6:	b141      	cbz	r1, 8000dea <mscd_xfer_cb+0x3f6>
      {
        p_msc->xferred_len += (uint16_t) nbytes;
 8000dd8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000dda:	b28b      	uxth	r3, r1
 8000ddc:	4418      	add	r0, r3
 8000dde:	63a0      	str	r0, [r4, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 8000de0:	4632      	mov	r2, r6
 8000de2:	4638      	mov	r0, r7
 8000de4:	4439      	add	r1, r7
 8000de6:	f002 fbab 	bl	8003540 <memmove>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8000dea:	2100      	movs	r1, #0
 8000dec:	2207      	movs	r2, #7
      }

      // simulate an transfer complete with adjusted parameters --> callback will be invoked with adjusted parameter
      dcd_event_xfer_complete(rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 8000dee:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  dcd_event_handler(&event, in_isr);
 8000df2:	a805      	add	r0, sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8000df4:	e9cd 1105 	strd	r1, r1, [sp, #20]
  event.xfer_complete.len     = xferred_bytes;
 8000df8:	9607      	str	r6, [sp, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8000dfa:	f88d 5014 	strb.w	r5, [sp, #20]
 8000dfe:	f88d 2015 	strb.w	r2, [sp, #21]
  event.xfer_complete.ep_addr = ep_addr;
 8000e02:	f88d 3018 	strb.w	r3, [sp, #24]
  dcd_event_handler(&event, in_isr);
 8000e06:	f000 f9a1 	bl	800114c <dcd_event_handler>
}
 8000e0a:	e646      	b.n	8000a9a <mscd_xfer_cb+0xa6>
    }
    else
    {
      // Application consume all bytes in our buffer
      p_msc->xferred_len += xferred_bytes;
 8000e0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e0e:	441e      	add	r6, r3

      if ( p_msc->xferred_len >= p_msc->total_len )
 8000e10:	6b63      	ldr	r3, [r4, #52]	; 0x34
      p_msc->xferred_len += xferred_bytes;
 8000e12:	63a6      	str	r6, [r4, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 8000e14:	429e      	cmp	r6, r3
 8000e16:	d2a7      	bcs.n	8000d68 <mscd_xfer_cb+0x374>
            proc_write10_cmd(rhport, p_msc);
 8000e18:	4628      	mov	r0, r5
 8000e1a:	f7ff fc4f 	bl	80006bc <proc_write10_cmd.constprop.0>
 8000e1e:	e63c      	b.n	8000a9a <mscd_xfer_cb+0xa6>
  return tu_bit_test(dir, 7);
 8000e20:	7b23      	ldrb	r3, [r4, #12]
        p_msc->xferred_len += xferred_bytes;
 8000e22:	4430      	add	r0, r6
        if ( !is_data_in(p_cbw->dir) )
 8000e24:	09db      	lsrs	r3, r3, #7
        p_msc->xferred_len += xferred_bytes;
 8000e26:	63a0      	str	r0, [r4, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 8000e28:	d10c      	bne.n	8000e44 <mscd_xfer_cb+0x450>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8000e2a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8000e2c:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <mscd_xfer_cb+0x4d8>)
 8000e2e:	7b60      	ldrb	r0, [r4, #13]
 8000e30:	f104 010f 	add.w	r1, r4, #15
 8000e34:	f001 fe4c 	bl	8002ad0 <tud_msc_scsi_cb>
          if ( cb_result < 0 )
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	da03      	bge.n	8000e44 <mscd_xfer_cb+0x450>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	4628      	mov	r0, r5
 8000e40:	f7ff fc18 	bl	8000674 <fail_scsi_op.constprop.0>
        if ( p_msc->xferred_len >= p_msc->total_len )
 8000e44:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d28d      	bcs.n	8000d68 <mscd_xfer_cb+0x374>
          TU_BREAKPOINT();
 8000e4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000e50:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8000e54:	07db      	lsls	r3, r3, #31
 8000e56:	f57f ae20 	bpl.w	8000a9a <mscd_xfer_cb+0xa6>
 8000e5a:	be00      	bkpt	0x0000
 8000e5c:	e61d      	b.n	8000a9a <mscd_xfer_cb+0xa6>
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 8000e5e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8000e62:	428b      	cmp	r3, r1
 8000e64:	f47f ae19 	bne.w	8000a9a <mscd_xfer_cb+0xa6>
 8000e68:	2e0d      	cmp	r6, #13
 8000e6a:	f47f ae16 	bne.w	8000a9a <mscd_xfer_cb+0xa6>
        switch(p_cbw->command[0])
 8000e6e:	7be3      	ldrb	r3, [r4, #15]
 8000e70:	2b28      	cmp	r3, #40	; 0x28
 8000e72:	d009      	beq.n	8000e88 <mscd_xfer_cb+0x494>
 8000e74:	2b2a      	cmp	r3, #42	; 0x2a
 8000e76:	d014      	beq.n	8000ea2 <mscd_xfer_cb+0x4ae>
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <mscd_xfer_cb+0x4e0>)
 8000e7a:	b153      	cbz	r3, 8000e92 <mscd_xfer_cb+0x49e>
 8000e7c:	7b60      	ldrb	r0, [r4, #13]
 8000e7e:	f104 010f 	add.w	r1, r4, #15
 8000e82:	f3af 8000 	nop.w
 8000e86:	e004      	b.n	8000e92 <mscd_xfer_cb+0x49e>
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <mscd_xfer_cb+0x4e4>)
 8000e8a:	b113      	cbz	r3, 8000e92 <mscd_xfer_cb+0x49e>
 8000e8c:	7b60      	ldrb	r0, [r4, #13]
 8000e8e:	f3af 8000 	nop.w
  p_msc->stage = MSC_STAGE_CMD;
 8000e92:	2300      	movs	r3, #0
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <mscd_xfer_cb+0x4e8>)
  p_msc->stage = MSC_STAGE_CMD;
 8000e96:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 8000e9a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8000e9e:	231f      	movs	r3, #31
 8000ea0:	e623      	b.n	8000aea <mscd_xfer_cb+0xf6>
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <mscd_xfer_cb+0x4ec>)
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f4      	beq.n	8000e92 <mscd_xfer_cb+0x49e>
 8000ea8:	7b60      	ldrb	r0, [r4, #13]
 8000eaa:	f001 fe5d 	bl	8002b68 <tud_msc_write10_complete_cb>
 8000eae:	e7f0      	b.n	8000e92 <mscd_xfer_cb+0x49e>
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	62a3      	str	r3, [r4, #40]	; 0x28
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 8000eb4:	2303      	movs	r3, #3
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 8000eb6:	4628      	mov	r0, r5
  p_msc->stage = MSC_STAGE_STATUS_SENT;
 8000eb8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <mscd_xfer_cb+0x4f0>)
 8000ebe:	230d      	movs	r3, #13
 8000ec0:	f000 fa12 	bl	80012e8 <usbd_edpt_xfer>
        TU_ASSERT( send_csw(rhport, p_msc) );
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	f47f ada9 	bne.w	8000a1c <mscd_xfer_cb+0x28>
 8000eca:	e613      	b.n	8000af4 <mscd_xfer_cb+0x100>
 8000ecc:	20000128 	.word	0x20000128
	...
 8000edc:	20000528 	.word	0x20000528
 8000ee0:	08002b69 	.word	0x08002b69
 8000ee4:	20000548 	.word	0x20000548

08000ee8 <advance_index>:
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8000ee8:	440a      	add	r2, r1
 8000eea:	b292      	uxth	r2, r2
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8000eec:	4291      	cmp	r1, r2
 8000eee:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8000ef2:	d801      	bhi.n	8000ef8 <advance_index+0x10>
 8000ef4:	4282      	cmp	r2, r0
 8000ef6:	db01      	blt.n	8000efc <advance_index+0x14>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8000ef8:	1a12      	subs	r2, r2, r0
 8000efa:	b292      	uxth	r2, r2
  }

  return new_idx;
}
 8000efc:	4610      	mov	r0, r2
 8000efe:	4770      	bx	lr

08000f00 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8000f00:	b538      	push	{r3, r4, r5, lr}
 8000f02:	4605      	mov	r5, r0
    return (uint16_t) (wr_idx - rd_idx);
 8000f04:	1ad4      	subs	r4, r2, r3
{
 8000f06:	4608      	mov	r0, r1
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8000f08:	88a9      	ldrh	r1, [r5, #4]
    return (uint16_t) (wr_idx - rd_idx);
 8000f0a:	b2a4      	uxth	r4, r4
  if (wr_idx >= rd_idx)
 8000f0c:	429a      	cmp	r2, r3
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8000f0e:	bf3c      	itt	cc
 8000f10:	eb04 0441 	addcc.w	r4, r4, r1, lsl #1
 8000f14:	b2a4      	uxthcc	r4, r4

  // nothing to peek
  if ( cnt == 0 ) return false;
 8000f16:	b1b4      	cbz	r4, 8000f46 <_tu_fifo_peek+0x46>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8000f18:	42a1      	cmp	r1, r4
 8000f1a:	d205      	bcs.n	8000f28 <_tu_fifo_peek+0x28>
  if ( wr_idx >= f->depth )
 8000f1c:	4291      	cmp	r1, r2
    rd_idx = wr_idx - f->depth;
 8000f1e:	bf94      	ite	ls
 8000f20:	1a52      	subls	r2, r2, r1
    rd_idx = wr_idx + f->depth;
 8000f22:	1852      	addhi	r2, r2, r1
 8000f24:	b293      	uxth	r3, r2
  f->rd_idx = rd_idx;
 8000f26:	816b      	strh	r3, [r5, #10]
  while ( idx >= depth ) idx -= depth;
 8000f28:	4299      	cmp	r1, r3
 8000f2a:	d909      	bls.n	8000f40 <_tu_fifo_peek+0x40>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8000f2c:	88ea      	ldrh	r2, [r5, #6]
 8000f2e:	6829      	ldr	r1, [r5, #0]
 8000f30:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000f34:	fb02 1103 	mla	r1, r2, r3, r1
 8000f38:	f002 faf4 	bl	8003524 <memcpy>
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);

  return true;
 8000f3c:	2001      	movs	r0, #1
}
 8000f3e:	bd38      	pop	{r3, r4, r5, pc}
  while ( idx >= depth ) idx -= depth;
 8000f40:	1a5b      	subs	r3, r3, r1
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	e7f0      	b.n	8000f28 <_tu_fifo_peek+0x28>
  if ( cnt == 0 ) return false;
 8000f46:	4620      	mov	r0, r4
 8000f48:	e7f9      	b.n	8000f3e <_tu_fifo_peek+0x3e>

08000f4a <tu_fifo_full>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8000f4a:	8903      	ldrh	r3, [r0, #8]
 8000f4c:	8942      	ldrh	r2, [r0, #10]
 8000f4e:	8881      	ldrh	r1, [r0, #4]
 8000f50:	b292      	uxth	r2, r2
 8000f52:	b29b      	uxth	r3, r3
  if (wr_idx >= rd_idx)
 8000f54:	4293      	cmp	r3, r2
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8000f56:	bf36      	itet	cc
 8000f58:	ebc2 0241 	rsbcc	r2, r2, r1, lsl #1
    return (uint16_t) (wr_idx - rd_idx);
 8000f5c:	1a9b      	subcs	r3, r3, r2
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8000f5e:	189b      	addcc	r3, r3, r2
 8000f60:	b29b      	uxth	r3, r3
}
 8000f62:	4299      	cmp	r1, r3
 8000f64:	bf8c      	ite	hi
 8000f66:	2000      	movhi	r0, #0
 8000f68:	2001      	movls	r0, #1
 8000f6a:	4770      	bx	lr

08000f6c <tu_fifo_read>:
{
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8000f6c:	8902      	ldrh	r2, [r0, #8]
 8000f6e:	8943      	ldrh	r3, [r0, #10]
{
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4604      	mov	r4, r0
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	b292      	uxth	r2, r2
 8000f78:	f7ff ffc2 	bl	8000f00 <_tu_fifo_peek>

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8000f7c:	8961      	ldrh	r1, [r4, #10]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8000f7e:	4603      	mov	r3, r0
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8000f80:	b282      	uxth	r2, r0
 8000f82:	b289      	uxth	r1, r1
 8000f84:	88a0      	ldrh	r0, [r4, #4]
 8000f86:	f7ff ffaf 	bl	8000ee8 <advance_index>
 8000f8a:	8160      	strh	r0, [r4, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	bd10      	pop	{r4, pc}

08000f90 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8000f90:	b570      	push	{r4, r5, r6, lr}
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8000f92:	8905      	ldrh	r5, [r0, #8]
{
 8000f94:	4604      	mov	r4, r0
 8000f96:	460e      	mov	r6, r1
  uint16_t const wr_idx = f->wr_idx;
 8000f98:	b2ad      	uxth	r5, r5

  if ( tu_fifo_full(f) && !f->overwritable )
 8000f9a:	f7ff ffd6 	bl	8000f4a <tu_fifo_full>
 8000f9e:	b110      	cbz	r0, 8000fa6 <tu_fifo_write+0x16>
 8000fa0:	79e0      	ldrb	r0, [r4, #7]
 8000fa2:	09c0      	lsrs	r0, r0, #7
 8000fa4:	d013      	beq.n	8000fce <tu_fifo_write+0x3e>
  while ( idx >= depth ) idx -= depth;
 8000fa6:	462b      	mov	r3, r5
  {
    ret = false;
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8000fa8:	88a2      	ldrh	r2, [r4, #4]
  while ( idx >= depth ) idx -= depth;
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d910      	bls.n	8000fd0 <tu_fifo_write+0x40>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8000fae:	88e2      	ldrh	r2, [r4, #6]
 8000fb0:	6820      	ldr	r0, [r4, #0]
 8000fb2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000fb6:	4631      	mov	r1, r6
 8000fb8:	fb02 0003 	mla	r0, r2, r3, r0
 8000fbc:	f002 fab2 	bl	8003524 <memcpy>

    // Write data
    _ff_push(f, data, wr_ptr);

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4629      	mov	r1, r5
 8000fc4:	88a0      	ldrh	r0, [r4, #4]
 8000fc6:	f7ff ff8f 	bl	8000ee8 <advance_index>
 8000fca:	8120      	strh	r0, [r4, #8]

    ret = true;
 8000fcc:	2001      	movs	r0, #1
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
  while ( idx >= depth ) idx -= depth;
 8000fd0:	1a9b      	subs	r3, r3, r2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	e7e9      	b.n	8000faa <tu_fifo_write+0x1a>

08000fd6 <tu_fifo_clear>:
bool tu_fifo_clear(tu_fifo_t *f)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	8143      	strh	r3, [r0, #10]
  f->wr_idx = 0;
 8000fda:	8103      	strh	r3, [r0, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 8000fdc:	2001      	movs	r0, #1
 8000fde:	4770      	bx	lr

08000fe0 <get_driver>:
// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
  // Application drivers
  if ( usbd_app_driver_get_cb )
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <get_driver+0x28>)
 8000fe2:	b15b      	cbz	r3, 8000ffc <get_driver+0x1c>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <get_driver+0x2c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4283      	cmp	r3, r0
 8000fea:	d905      	bls.n	8000ff8 <get_driver+0x18>
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <get_driver+0x30>)
 8000fee:	681b      	ldr	r3, [r3, #0]
    drvid -= _app_driver_count;
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8000ff0:	2218      	movs	r2, #24
 8000ff2:	fb02 3000 	mla	r0, r2, r0, r3
 8000ff6:	4770      	bx	lr
    drvid -= _app_driver_count;
 8000ff8:	1ac0      	subs	r0, r0, r3
 8000ffa:	b2c0      	uxtb	r0, r0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8000ffc:	2801      	cmp	r0, #1
 8000ffe:	d801      	bhi.n	8001004 <get_driver+0x24>
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <get_driver+0x34>)
 8001002:	e7f5      	b.n	8000ff0 <get_driver+0x10>

  return NULL;
 8001004:	2000      	movs	r0, #0
}
 8001006:	4770      	bx	lr
 8001008:	00000000 	.word	0x00000000
 800100c:	2000056c 	.word	0x2000056c
 8001010:	20000568 	.word	0x20000568
 8001014:	08003598 	.word	0x08003598

08001018 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8001018:	b570      	push	{r4, r5, r6, lr}
 800101a:	460c      	mov	r4, r1
 800101c:	4605      	mov	r5, r0
 800101e:	4616      	mov	r6, r2
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8001020:	68c8      	ldr	r0, [r1, #12]
 8001022:	f000 fd3f 	bl	8001aa4 <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8001026:	4632      	mov	r2, r6
 8001028:	4628      	mov	r0, r5
 800102a:	68e3      	ldr	r3, [r4, #12]
 800102c:	2101      	movs	r1, #1
}
 800102e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8001032:	4718      	bx	r3

08001034 <configuration_reset>:
{
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	4605      	mov	r5, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8001038:	2400      	movs	r4, #0
 800103a:	4e13      	ldr	r6, [pc, #76]	; (8001088 <configuration_reset+0x54>)
    usbd_class_driver_t const * driver = get_driver(i);
 800103c:	4620      	mov	r0, r4
 800103e:	f7ff ffcf 	bl	8000fe0 <get_driver>
    TU_ASSERT(driver, );
 8001042:	b938      	cbnz	r0, 8001054 <configuration_reset+0x20>
 8001044:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001048:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800104c:	07db      	lsls	r3, r3, #31
 800104e:	d500      	bpl.n	8001052 <configuration_reset+0x1e>
 8001050:	be00      	bkpt	0x0000
}
 8001052:	bd70      	pop	{r4, r5, r6, pc}
    driver->reset(rhport);
 8001054:	6843      	ldr	r3, [r0, #4]
 8001056:	4628      	mov	r0, r5
 8001058:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800105a:	7833      	ldrb	r3, [r6, #0]
 800105c:	3401      	adds	r4, #1
 800105e:	b2e4      	uxtb	r4, r4
 8001060:	3301      	adds	r3, #1
 8001062:	42a3      	cmp	r3, r4
 8001064:	daea      	bge.n	800103c <configuration_reset+0x8>
  tu_varclr(&_usbd_dev);
 8001066:	2233      	movs	r2, #51	; 0x33
 8001068:	2100      	movs	r1, #0
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <configuration_reset+0x58>)
 800106c:	f002 fa82 	bl	8003574 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8001070:	2210      	movs	r2, #16
 8001072:	21ff      	movs	r1, #255	; 0xff
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <configuration_reset+0x5c>)
 8001076:	f002 fa7d 	bl	8003574 <memset>
}
 800107a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 800107e:	2210      	movs	r2, #16
 8001080:	21ff      	movs	r1, #255	; 0xff
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <configuration_reset+0x60>)
 8001084:	f002 ba76 	b.w	8003574 <memset>
 8001088:	2000056c 	.word	0x2000056c
 800108c:	2000056d 	.word	0x2000056d
 8001090:	20000570 	.word	0x20000570
 8001094:	20000580 	.word	0x20000580

08001098 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8001098:	4603      	mov	r3, r0
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
 800109a:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <usbd_int_set+0x10>)
 800109c:	7810      	ldrb	r0, [r2, #0]
  if (enabled)
 800109e:	b10b      	cbz	r3, 80010a4 <usbd_int_set+0xc>
    dcd_int_enable(_usbd_rhport);
 80010a0:	f000 be22 	b.w	8001ce8 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
 80010a4:	f000 be32 	b.w	8001d0c <dcd_int_disable>
 80010a8:	20000010 	.word	0x20000010

080010ac <tud_inited>:
  return _usbd_rhport != RHPORT_INVALID;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <tud_inited+0xc>)
 80010ae:	7818      	ldrb	r0, [r3, #0]
}
 80010b0:	38ff      	subs	r0, #255	; 0xff
 80010b2:	bf18      	it	ne
 80010b4:	2001      	movne	r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	20000010 	.word	0x20000010

080010bc <tud_init>:
{
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return _usbd_rhport != RHPORT_INVALID;
 80010be:	4e1c      	ldr	r6, [pc, #112]	; (8001130 <tud_init+0x74>)
{
 80010c0:	4605      	mov	r5, r0
  if ( tud_inited() ) return true;
 80010c2:	7833      	ldrb	r3, [r6, #0]
 80010c4:	2bff      	cmp	r3, #255	; 0xff
 80010c6:	d131      	bne.n	800112c <tud_init+0x70>
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 80010c8:	4c1a      	ldr	r4, [pc, #104]	; (8001134 <tud_init+0x78>)
  tu_varclr(&_usbd_dev);
 80010ca:	2233      	movs	r2, #51	; 0x33
 80010cc:	2100      	movs	r1, #0
 80010ce:	481a      	ldr	r0, [pc, #104]	; (8001138 <tud_init+0x7c>)
 80010d0:	f002 fa50 	bl	8003574 <memset>
 80010d4:	1d20      	adds	r0, r4, #4
 80010d6:	f7ff ff7e 	bl	8000fd6 <tu_fifo_clear>
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <tud_init+0x80>)
 80010dc:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <tud_init+0x84>)
 80010e0:	b123      	cbz	r3, 80010ec <tud_init+0x30>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 80010e2:	4818      	ldr	r0, [pc, #96]	; (8001144 <tud_init+0x88>)
 80010e4:	f3af 8000 	nop.w
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <tud_init+0x8c>)
 80010ea:	6018      	str	r0, [r3, #0]
{
 80010ec:	2400      	movs	r4, #0
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80010ee:	4f15      	ldr	r7, [pc, #84]	; (8001144 <tud_init+0x88>)
    usbd_class_driver_t const * driver = get_driver(i);
 80010f0:	4620      	mov	r0, r4
 80010f2:	f7ff ff75 	bl	8000fe0 <get_driver>
    TU_ASSERT(driver);
 80010f6:	4602      	mov	r2, r0
 80010f8:	b948      	cbnz	r0, 800110e <tud_init+0x52>
 80010fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80010fe:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8001102:	f010 0001 	ands.w	r0, r0, #1
 8001106:	d001      	beq.n	800110c <tud_init+0x50>
 8001108:	be00      	bkpt	0x0000
 800110a:	4610      	mov	r0, r2
}
 800110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    driver->init();
 800110e:	6803      	ldr	r3, [r0, #0]
 8001110:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8001112:	783b      	ldrb	r3, [r7, #0]
 8001114:	3401      	adds	r4, #1
 8001116:	b2e4      	uxtb	r4, r4
 8001118:	3301      	adds	r3, #1
 800111a:	42a3      	cmp	r3, r4
 800111c:	dae8      	bge.n	80010f0 <tud_init+0x34>
  dcd_init(rhport);
 800111e:	4628      	mov	r0, r5
  _usbd_rhport = rhport;
 8001120:	7035      	strb	r5, [r6, #0]
  dcd_init(rhport);
 8001122:	f000 ff0f 	bl	8001f44 <dcd_init>
  dcd_int_enable(rhport);
 8001126:	4628      	mov	r0, r5
 8001128:	f000 fdde 	bl	8001ce8 <dcd_int_enable>
  if ( tud_inited() ) return true;
 800112c:	2001      	movs	r0, #1
 800112e:	e7ed      	b.n	800110c <tud_init+0x50>
 8001130:	20000010 	.word	0x20000010
 8001134:	20000000 	.word	0x20000000
 8001138:	2000056d 	.word	0x2000056d
 800113c:	200005a0 	.word	0x200005a0
 8001140:	00000000 	.word	0x00000000
 8001144:	2000056c 	.word	0x2000056c
 8001148:	20000568 	.word	0x20000568

0800114c <dcd_event_handler>:
{
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (event->event_id)
 800114e:	7843      	ldrb	r3, [r0, #1]
{
 8001150:	4605      	mov	r5, r0
  switch (event->event_id)
 8001152:	3b02      	subs	r3, #2
{
 8001154:	460c      	mov	r4, r1
 8001156:	b085      	sub	sp, #20
  switch (event->event_id)
 8001158:	2b03      	cmp	r3, #3
 800115a:	d812      	bhi.n	8001182 <dcd_event_handler+0x36>
 800115c:	e8df f003 	tbb	[pc, r3]
 8001160:	21196302 	.word	0x21196302
      _usbd_dev.cfg_num    = 0;
 8001164:	2100      	movs	r1, #0
      _usbd_dev.connected  = 0;
 8001166:	4b31      	ldr	r3, [pc, #196]	; (800122c <dcd_event_handler+0xe0>)
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	f36f 0200 	bfc	r2, #0, #1
 800116e:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	f36f 0241 	bfc	r2, #1, #1
 8001176:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 8001178:	7059      	strb	r1, [r3, #1]
      _usbd_dev.suspended  = 0;
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	f361 0282 	bfi	r2, r1, #2, #1
        _usbd_dev.suspended = 1;
 8001180:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <dcd_event_handler+0xe4>)
 8001184:	681e      	ldr	r6, [r3, #0]
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8001186:	b914      	cbnz	r4, 800118e <dcd_event_handler+0x42>
  qhdl->interrupt_set(false);
 8001188:	4620      	mov	r0, r4
 800118a:	6833      	ldr	r3, [r6, #0]
 800118c:	4798      	blx	r3
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 800118e:	4629      	mov	r1, r5
 8001190:	e037      	b.n	8001202 <dcd_event_handler+0xb6>
      if ( _usbd_dev.connected )
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <dcd_event_handler+0xe0>)
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	07d6      	lsls	r6, r2, #31
 8001198:	d543      	bpl.n	8001222 <dcd_event_handler+0xd6>
        _usbd_dev.suspended = 1;
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	f042 0204 	orr.w	r2, r2, #4
 80011a0:	e7ee      	b.n	8001180 <dcd_event_handler+0x34>
      if ( _usbd_dev.connected )
 80011a2:	4a22      	ldr	r2, [pc, #136]	; (800122c <dcd_event_handler+0xe0>)
 80011a4:	7813      	ldrb	r3, [r2, #0]
 80011a6:	07d8      	lsls	r0, r3, #31
 80011a8:	d53b      	bpl.n	8001222 <dcd_event_handler+0xd6>
        _usbd_dev.suspended = 0;
 80011aa:	7813      	ldrb	r3, [r2, #0]
 80011ac:	f36f 0382 	bfc	r3, #2, #1
 80011b0:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80011b2:	e7e6      	b.n	8001182 <dcd_event_handler+0x36>
        usbd_class_driver_t const * driver = get_driver(i);
 80011b4:	f7ff ff14 	bl	8000fe0 <get_driver>
        if (driver && driver->sof)
 80011b8:	b120      	cbz	r0, 80011c4 <dcd_event_handler+0x78>
 80011ba:	6943      	ldr	r3, [r0, #20]
 80011bc:	b113      	cbz	r3, 80011c4 <dcd_event_handler+0x78>
          driver->sof(event->rhport, event->sof.frame_count);
 80011be:	6869      	ldr	r1, [r5, #4]
 80011c0:	7828      	ldrb	r0, [r5, #0]
 80011c2:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80011c4:	3601      	adds	r6, #1
 80011c6:	783b      	ldrb	r3, [r7, #0]
 80011c8:	b2f0      	uxtb	r0, r6
 80011ca:	3301      	adds	r3, #1
 80011cc:	4283      	cmp	r3, r0
 80011ce:	daf1      	bge.n	80011b4 <dcd_event_handler+0x68>
      if ( _usbd_dev.suspended )
 80011d0:	4a16      	ldr	r2, [pc, #88]	; (800122c <dcd_event_handler+0xe0>)
 80011d2:	7813      	ldrb	r3, [r2, #0]
 80011d4:	0759      	lsls	r1, r3, #29
 80011d6:	d524      	bpl.n	8001222 <dcd_event_handler+0xd6>
        _usbd_dev.suspended = 0;
 80011d8:	7813      	ldrb	r3, [r2, #0]
 80011da:	f36f 0382 	bfc	r3, #2, #1
 80011de:	7013      	strb	r3, [r2, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80011e0:	2300      	movs	r3, #0
 80011e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80011e6:	9303      	str	r3, [sp, #12]
 80011e8:	782b      	ldrb	r3, [r5, #0]
 80011ea:	f88d 3004 	strb.w	r3, [sp, #4]
 80011ee:	2305      	movs	r3, #5
 80011f0:	f88d 3005 	strb.w	r3, [sp, #5]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <dcd_event_handler+0xe4>)
 80011f6:	681e      	ldr	r6, [r3, #0]
  if (!in_isr) {
 80011f8:	b914      	cbnz	r4, 8001200 <dcd_event_handler+0xb4>
  qhdl->interrupt_set(false);
 80011fa:	4620      	mov	r0, r4
 80011fc:	6833      	ldr	r3, [r6, #0]
 80011fe:	4798      	blx	r3
  bool success = tu_fifo_write(&qhdl->ff, data);
 8001200:	a901      	add	r1, sp, #4
 8001202:	1d30      	adds	r0, r6, #4
 8001204:	f7ff fec4 	bl	8000f90 <tu_fifo_write>
 8001208:	4605      	mov	r5, r0

  if (!in_isr) {
 800120a:	b914      	cbnz	r4, 8001212 <dcd_event_handler+0xc6>
  qhdl->interrupt_set(true);
 800120c:	2001      	movs	r0, #1
 800120e:	6833      	ldr	r3, [r6, #0]
 8001210:	4798      	blx	r3
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8001212:	b935      	cbnz	r5, 8001222 <dcd_event_handler+0xd6>
 8001214:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001218:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800121c:	07db      	lsls	r3, r3, #31
 800121e:	d500      	bpl.n	8001222 <dcd_event_handler+0xd6>
 8001220:	be00      	bkpt	0x0000
}
 8001222:	b005      	add	sp, #20
 8001224:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (event->event_id)
 8001226:	2600      	movs	r6, #0
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8001228:	4f02      	ldr	r7, [pc, #8]	; (8001234 <dcd_event_handler+0xe8>)
 800122a:	e7cc      	b.n	80011c6 <dcd_event_handler+0x7a>
 800122c:	2000056d 	.word	0x2000056d
 8001230:	200005a0 	.word	0x200005a0
 8001234:	2000056c 	.word	0x2000056c

08001238 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8001238:	b538      	push	{r3, r4, r5, lr}
  rhport = _usbd_rhport;

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800123a:	788b      	ldrb	r3, [r1, #2]
{
 800123c:	460c      	mov	r4, r1
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800123e:	f013 0f78 	tst.w	r3, #120	; 0x78
 8001242:	d008      	beq.n	8001256 <usbd_edpt_open+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8001244:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001248:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800124c:	07db      	lsls	r3, r3, #31
 800124e:	d500      	bpl.n	8001252 <usbd_edpt_open+0x1a>
 8001250:	be00      	bkpt	0x0000

  return dcd_edpt_open(rhport, desc_ep);
}
 8001252:	2000      	movs	r0, #0
 8001254:	bd38      	pop	{r3, r4, r5, pc}
  rhport = _usbd_rhport;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <usbd_edpt_open+0x3c>)
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8001258:	4620      	mov	r0, r4
  rhport = _usbd_rhport;
 800125a:	781d      	ldrb	r5, [r3, #0]
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <usbd_edpt_open+0x40>)
 800125e:	7899      	ldrb	r1, [r3, #2]
 8001260:	f001 f8b8 	bl	80023d4 <tu_edpt_validate>
 8001264:	2800      	cmp	r0, #0
 8001266:	d0ed      	beq.n	8001244 <usbd_edpt_open+0xc>
  return dcd_edpt_open(rhport, desc_ep);
 8001268:	4621      	mov	r1, r4
 800126a:	4628      	mov	r0, r5
}
 800126c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return dcd_edpt_open(rhport, desc_ep);
 8001270:	f000 bd82 	b.w	8001d78 <dcd_edpt_open>
 8001274:	20000010 	.word	0x20000010
 8001278:	2000056d 	.word	0x2000056d

0800127c <usbd_open_edpt_pair>:
{
 800127c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001280:	4681      	mov	r9, r0
 8001282:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 8001286:	460c      	mov	r4, r1
 8001288:	4690      	mov	r8, r2
 800128a:	469a      	mov	sl, r3
  for(int i=0; i<ep_count; i++)
 800128c:	2700      	movs	r7, #0
 800128e:	45b8      	cmp	r8, r7
 8001290:	dc01      	bgt.n	8001296 <usbd_open_edpt_pair+0x1a>
  return true;
 8001292:	2001      	movs	r0, #1
 8001294:	e00e      	b.n	80012b4 <usbd_open_edpt_pair+0x38>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8001296:	7863      	ldrb	r3, [r4, #1]
 8001298:	2b05      	cmp	r3, #5
 800129a:	d104      	bne.n	80012a6 <usbd_open_edpt_pair+0x2a>
 800129c:	78e3      	ldrb	r3, [r4, #3]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	4553      	cmp	r3, sl
 80012a4:	d00a      	beq.n	80012bc <usbd_open_edpt_pair+0x40>
 80012a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80012aa:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80012ae:	07da      	lsls	r2, r3, #31
 80012b0:	d402      	bmi.n	80012b8 <usbd_open_edpt_pair+0x3c>
 80012b2:	2000      	movs	r0, #0
}
 80012b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80012b8:	be00      	bkpt	0x0000
 80012ba:	e7fa      	b.n	80012b2 <usbd_open_edpt_pair+0x36>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80012bc:	4621      	mov	r1, r4
 80012be:	4648      	mov	r0, r9
 80012c0:	f7ff ffba 	bl	8001238 <usbd_edpt_open>
 80012c4:	b938      	cbnz	r0, 80012d6 <usbd_open_edpt_pair+0x5a>
 80012c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80012ca:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80012ce:	07db      	lsls	r3, r3, #31
 80012d0:	d5ef      	bpl.n	80012b2 <usbd_open_edpt_pair+0x36>
 80012d2:	be00      	bkpt	0x0000
 80012d4:	e7ee      	b.n	80012b4 <usbd_open_edpt_pair+0x38>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80012d6:	78a3      	ldrb	r3, [r4, #2]
  for(int i=0; i<ep_count; i++)
 80012d8:	3701      	adds	r7, #1
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80012da:	09da      	lsrs	r2, r3, #7
      (*ep_in) = desc_ep->bEndpointAddress;
 80012dc:	bf14      	ite	ne
 80012de:	7033      	strbne	r3, [r6, #0]
      (*ep_out) = desc_ep->bEndpointAddress;
 80012e0:	702b      	strbeq	r3, [r5, #0]
 80012e2:	7823      	ldrb	r3, [r4, #0]
 80012e4:	441c      	add	r4, r3
  for(int i=0; i<ep_count; i++)
 80012e6:	e7d2      	b.n	800128e <usbd_open_edpt_pair+0x12>

080012e8 <usbd_edpt_xfer>:

  return tu_edpt_release(ep_state, _usbd_mutex);
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80012e8:	b538      	push	{r3, r4, r5, lr}
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80012ea:	4c18      	ldr	r4, [pc, #96]	; (800134c <usbd_edpt_xfer+0x64>)
 80012ec:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80012f0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80012f4:	eb04 14d1 	add.w	r4, r4, r1, lsr #7
 80012f8:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 80012fc:	3420      	adds	r4, #32
 80012fe:	07c0      	lsls	r0, r0, #31
 8001300:	d509      	bpl.n	8001316 <usbd_edpt_xfer+0x2e>
 8001302:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001306:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 800130a:	07da      	lsls	r2, r3, #31
 800130c:	d401      	bmi.n	8001312 <usbd_edpt_xfer+0x2a>
 800130e:	2000      	movs	r0, #0
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
    return false;
  }
}
 8001310:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8001312:	be00      	bkpt	0x0000
 8001314:	e7fb      	b.n	800130e <usbd_edpt_xfer+0x26>
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8001316:	78e0      	ldrb	r0, [r4, #3]
 8001318:	f040 0001 	orr.w	r0, r0, #1
 800131c:	70e0      	strb	r0, [r4, #3]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 800131e:	480c      	ldr	r0, [pc, #48]	; (8001350 <usbd_edpt_xfer+0x68>)
 8001320:	7800      	ldrb	r0, [r0, #0]
 8001322:	f000 ffcf 	bl	80022c4 <dcd_edpt_xfer>
 8001326:	2800      	cmp	r0, #0
 8001328:	d1f2      	bne.n	8001310 <usbd_edpt_xfer+0x28>
    _usbd_dev.ep_status[epnum][dir].busy = false;
 800132a:	78e3      	ldrb	r3, [r4, #3]
 800132c:	f360 0300 	bfi	r3, r0, #0, #1
 8001330:	70e3      	strb	r3, [r4, #3]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8001332:	78e3      	ldrb	r3, [r4, #3]
 8001334:	f360 0382 	bfi	r3, r0, #2, #1
 8001338:	70e3      	strb	r3, [r4, #3]
    TU_BREAKPOINT();
 800133a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800133e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8001342:	07db      	lsls	r3, r3, #31
 8001344:	d5e3      	bpl.n	800130e <usbd_edpt_xfer+0x26>
 8001346:	be00      	bkpt	0x0000
 8001348:	e7e2      	b.n	8001310 <usbd_edpt_xfer+0x28>
 800134a:	bf00      	nop
 800134c:	2000056d 	.word	0x2000056d
 8001350:	20000010 	.word	0x20000010

08001354 <usbd_edpt_busy>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <usbd_edpt_busy+0x18>)
 8001356:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 800135a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800135e:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
 8001362:	f891 0023 	ldrb.w	r0, [r1, #35]	; 0x23
}
 8001366:	f000 0001 	and.w	r0, r0, #1
 800136a:	4770      	bx	lr
 800136c:	2000056d 	.word	0x2000056d

08001370 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8001370:	b510      	push	{r4, lr}

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8001372:	4c0c      	ldr	r4, [pc, #48]	; (80013a4 <usbd_edpt_stall+0x34>)
 8001374:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8001378:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800137c:	eb04 14d1 	add.w	r4, r4, r1, lsr #7
 8001380:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001384:	3420      	adds	r4, #32
 8001386:	079b      	lsls	r3, r3, #30
 8001388:	d40b      	bmi.n	80013a2 <usbd_edpt_stall+0x32>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <usbd_edpt_stall+0x38>)
 800138c:	7818      	ldrb	r0, [r3, #0]
 800138e:	f000 ffce 	bl	800232e <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8001392:	78e3      	ldrb	r3, [r4, #3]
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	70e3      	strb	r3, [r4, #3]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 800139a:	78e3      	ldrb	r3, [r4, #3]
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	70e3      	strb	r3, [r4, #3]
  }
}
 80013a2:	bd10      	pop	{r4, pc}
 80013a4:	2000056d 	.word	0x2000056d
 80013a8:	20000010 	.word	0x20000010

080013ac <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 80013ac:	b510      	push	{r4, lr}

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 80013ae:	4c0c      	ldr	r4, [pc, #48]	; (80013e0 <usbd_edpt_clear_stall+0x34>)
 80013b0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80013b4:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 80013b8:	eb04 14d1 	add.w	r4, r4, r1, lsr #7
 80013bc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80013c0:	3420      	adds	r4, #32
 80013c2:	079b      	lsls	r3, r3, #30
 80013c4:	d50b      	bpl.n	80013de <usbd_edpt_clear_stall+0x32>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <usbd_edpt_clear_stall+0x38>)
 80013c8:	7818      	ldrb	r0, [r3, #0]
 80013ca:	f000 ffcd 	bl	8002368 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 80013ce:	78e3      	ldrb	r3, [r4, #3]
 80013d0:	f36f 0341 	bfc	r3, #1, #1
 80013d4:	70e3      	strb	r3, [r4, #3]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 80013d6:	78e3      	ldrb	r3, [r4, #3]
 80013d8:	f36f 0300 	bfc	r3, #0, #1
 80013dc:	70e3      	strb	r3, [r4, #3]
  }
}
 80013de:	bd10      	pop	{r4, pc}
 80013e0:	2000056d 	.word	0x2000056d
 80013e4:	20000010 	.word	0x20000010

080013e8 <usbd_edpt_stalled>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <usbd_edpt_stalled+0x18>)
 80013ea:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80013ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80013f2:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
 80013f6:	f891 0023 	ldrb.w	r0, [r1, #35]	; 0x23
}
 80013fa:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80013fe:	4770      	bx	lr
 8001400:	2000056d 	.word	0x2000056d

08001404 <tud_task_ext>:
{
 8001404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001408:	b087      	sub	sp, #28
  if ( !tusb_inited() ) return;
 800140a:	f000 ffe1 	bl	80023d0 <tusb_inited>
 800140e:	2800      	cmp	r0, #0
 8001410:	f000 8285 	beq.w	800191e <tud_task_ext+0x51a>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8001414:	4bb2      	ldr	r3, [pc, #712]	; (80016e0 <tud_task_ext+0x2dc>)
  qhdl->interrupt_set(false);
 8001416:	2000      	movs	r0, #0
 8001418:	681d      	ldr	r5, [r3, #0]
 800141a:	462c      	mov	r4, r5
 800141c:	f854 3b04 	ldr.w	r3, [r4], #4
 8001420:	4798      	blx	r3
  bool success = tu_fifo_read(&qhdl->ff, data);
 8001422:	4620      	mov	r0, r4
 8001424:	a903      	add	r1, sp, #12
 8001426:	f7ff fda1 	bl	8000f6c <tu_fifo_read>
 800142a:	4604      	mov	r4, r0
  qhdl->interrupt_set(true);
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	2001      	movs	r0, #1
 8001430:	4798      	blx	r3
 8001432:	2c00      	cmp	r4, #0
 8001434:	f000 8273 	beq.w	800191e <tud_task_ext+0x51a>
    switch ( event.event_id )
 8001438:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800143c:	3b01      	subs	r3, #1
 800143e:	2b07      	cmp	r3, #7
 8001440:	f200 829a 	bhi.w	8001978 <tud_task_ext+0x574>
 8001444:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001448:	00130008 	.word	0x00130008
 800144c:	02760298 	.word	0x02760298
 8001450:	001f0285 	.word	0x001f0285
 8001454:	02910242 	.word	0x02910242
  configuration_reset(rhport);
 8001458:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800145c:	f7ff fdea 	bl	8001034 <configuration_reset>
  usbd_control_reset();
 8001460:	f000 fb18 	bl	8001a94 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8001464:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001468:	4b9e      	ldr	r3, [pc, #632]	; (80016e4 <tud_task_ext+0x2e0>)
 800146a:	709a      	strb	r2, [r3, #2]
      break;
 800146c:	e7d2      	b.n	8001414 <tud_task_ext+0x10>
  configuration_reset(rhport);
 800146e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001472:	f7ff fddf 	bl	8001034 <configuration_reset>
  usbd_control_reset();
 8001476:	f000 fb0d 	bl	8001a94 <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 800147a:	4b9b      	ldr	r3, [pc, #620]	; (80016e8 <tud_task_ext+0x2e4>)
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0c9      	beq.n	8001414 <tud_task_ext+0x10>
 8001480:	f7fe ff2d 	bl	80002de <tud_umount_cb>
 8001484:	e7c6      	b.n	8001414 <tud_task_ext+0x10>
        _usbd_dev.connected = 1;
 8001486:	4c97      	ldr	r4, [pc, #604]	; (80016e4 <tud_task_ext+0x2e0>)
  usbd_control_set_complete_callback(NULL);
 8001488:	2000      	movs	r0, #0
        _usbd_dev.connected = 1;
 800148a:	7823      	ldrb	r3, [r4, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
 800148c:	f89d 500c 	ldrb.w	r5, [sp, #12]
        _usbd_dev.connected = 1;
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	7023      	strb	r3, [r4, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8001496:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800149a:	f36f 0300 	bfc	r3, #0, #1
 800149e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 80014a2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80014a6:	f36f 0382 	bfc	r3, #2, #1
 80014aa:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 80014ae:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80014b2:	f36f 0300 	bfc	r3, #0, #1
 80014b6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 80014ba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80014be:	f36f 0382 	bfc	r3, #2, #1
 80014c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  usbd_control_set_complete_callback(NULL);
 80014c6:	f000 faed 	bl	8001aa4 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80014ca:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80014ce:	f006 0860 	and.w	r8, r6, #96	; 0x60
 80014d2:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
 80014d6:	d111      	bne.n	80014fc <tud_task_ext+0xf8>
    default: TU_BREAKPOINT(); return false;
 80014d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80014dc:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80014e0:	07dc      	lsls	r4, r3, #31
 80014e2:	d500      	bpl.n	80014e6 <tud_task_ext+0xe2>
 80014e4:	be00      	bkpt	0x0000
          dcd_edpt_stall(event.rhport, 0);
 80014e6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80014ea:	2100      	movs	r1, #0
 80014ec:	f000 ff1f 	bl	800232e <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80014f0:	2180      	movs	r1, #128	; 0x80
 80014f2:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80014f6:	f000 ff1a 	bl	800232e <dcd_edpt_stall>
 80014fa:	e78b      	b.n	8001414 <tud_task_ext+0x10>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 80014fc:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 8001500:	d10d      	bne.n	800151e <tud_task_ext+0x11a>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8001502:	487a      	ldr	r0, [pc, #488]	; (80016ec <tud_task_ext+0x2e8>)
 8001504:	2800      	cmp	r0, #0
 8001506:	d0ee      	beq.n	80014e6 <tud_task_ext+0xe2>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8001508:	f000 facc 	bl	8001aa4 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 800150c:	2101      	movs	r1, #1
 800150e:	4628      	mov	r0, r5
 8001510:	aa04      	add	r2, sp, #16
 8001512:	f3af 8000 	nop.w
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8001516:	2800      	cmp	r0, #0
 8001518:	f47f af7c 	bne.w	8001414 <tud_task_ext+0x10>
 800151c:	e7e3      	b.n	80014e6 <tud_task_ext+0xe2>
  switch ( p_request->bmRequestType_bit.recipient )
 800151e:	f006 061f 	and.w	r6, r6, #31
 8001522:	2e01      	cmp	r6, #1
 8001524:	f000 8164 	beq.w	80017f0 <tud_task_ext+0x3ec>
 8001528:	2e02      	cmp	r6, #2
 800152a:	f000 818b 	beq.w	8001844 <tud_task_ext+0x440>
 800152e:	2e00      	cmp	r6, #0
 8001530:	d1d2      	bne.n	80014d8 <tud_task_ext+0xd4>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8001532:	f1b8 0f20 	cmp.w	r8, #32
 8001536:	d10f      	bne.n	8001558 <tud_task_ext+0x154>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8001538:	f89d 3014 	ldrb.w	r3, [sp, #20]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d8d2      	bhi.n	80014e6 <tud_task_ext+0xe2>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8001540:	4423      	add	r3, r4
 8001542:	78d8      	ldrb	r0, [r3, #3]
 8001544:	f7ff fd4c 	bl	8000fe0 <get_driver>
        TU_VERIFY(driver);
 8001548:	4601      	mov	r1, r0
 800154a:	2800      	cmp	r0, #0
 800154c:	d0cb      	beq.n	80014e6 <tud_task_ext+0xe2>
        return invoke_class_control(rhport, driver, p_request);
 800154e:	aa04      	add	r2, sp, #16
        return invoke_class_control(rhport, driver, p_request);
 8001550:	4628      	mov	r0, r5
 8001552:	f7ff fd61 	bl	8001018 <invoke_class_control>
 8001556:	e7de      	b.n	8001516 <tud_task_ext+0x112>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8001558:	f1b8 0f00 	cmp.w	r8, #0
 800155c:	d1bc      	bne.n	80014d8 <tud_task_ext+0xd4>
      switch ( p_request->bRequest )
 800155e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001562:	2b09      	cmp	r3, #9
 8001564:	d8b8      	bhi.n	80014d8 <tud_task_ext+0xd4>
 8001566:	a201      	add	r2, pc, #4	; (adr r2, 800156c <tud_task_ext+0x168>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	080017db 	.word	0x080017db
 8001570:	080017c9 	.word	0x080017c9
 8001574:	080014d9 	.word	0x080014d9
 8001578:	080017b5 	.word	0x080017b5
 800157c:	080014d9 	.word	0x080014d9
 8001580:	08001595 	.word	0x08001595
 8001584:	080016fd 	.word	0x080016fd
 8001588:	080014d9 	.word	0x080014d9
 800158c:	080015af 	.word	0x080015af
 8001590:	080015c5 	.word	0x080015c5
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8001594:	a804      	add	r0, sp, #16
 8001596:	f000 fa8b 	bl	8001ab0 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800159a:	4628      	mov	r0, r5
 800159c:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80015a0:	f000 fec0 	bl	8002324 <dcd_set_address>
          _usbd_dev.addressed = 1;
 80015a4:	7823      	ldrb	r3, [r4, #0]
 80015a6:	f043 0302 	orr.w	r3, r3, #2
 80015aa:	7023      	strb	r3, [r4, #0]
        break;
 80015ac:	e732      	b.n	8001414 <tud_task_ext+0x10>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80015ae:	7863      	ldrb	r3, [r4, #1]
 80015b0:	f88d 300a 	strb.w	r3, [sp, #10]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80015b4:	2301      	movs	r3, #1
          tud_control_xfer(rhport, p_request, &status, 2);
 80015b6:	4628      	mov	r0, r5
 80015b8:	f10d 020a 	add.w	r2, sp, #10
 80015bc:	a904      	add	r1, sp, #16
 80015be:	f000 fa37 	bl	8001a30 <tud_control_xfer>
        break;
 80015c2:	e727      	b.n	8001414 <tud_task_ext+0x10>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80015c4:	f89d 9012 	ldrb.w	r9, [sp, #18]
          if (_usbd_dev.cfg_num != cfg_num)
 80015c8:	7863      	ldrb	r3, [r4, #1]
 80015ca:	4599      	cmp	r9, r3
 80015cc:	d037      	beq.n	800163e <tud_task_ext+0x23a>
            if ( _usbd_dev.cfg_num )
 80015ce:	7863      	ldrb	r3, [r4, #1]
 80015d0:	b13b      	cbz	r3, 80015e2 <tud_task_ext+0x1de>
              dcd_edpt_close_all(rhport);
 80015d2:	4628      	mov	r0, r5
 80015d4:	f000 fe74 	bl	80022c0 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 80015d8:	78a6      	ldrb	r6, [r4, #2]
              configuration_reset(rhport);
 80015da:	4628      	mov	r0, r5
 80015dc:	f7ff fd2a 	bl	8001034 <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 80015e0:	70a6      	strb	r6, [r4, #2]
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 80015e2:	f1b9 0f00 	cmp.w	r9, #0
 80015e6:	d02a      	beq.n	800163e <tud_task_ext+0x23a>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80015e8:	f109 30ff 	add.w	r0, r9, #4294967295
 80015ec:	b2c0      	uxtb	r0, r0
 80015ee:	f001 faef 	bl	8002bd0 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80015f2:	b110      	cbz	r0, 80015fa <tud_task_ext+0x1f6>
 80015f4:	7843      	ldrb	r3, [r0, #1]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d008      	beq.n	800160c <tud_task_ext+0x208>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80015fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80015fe:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8001602:	07df      	lsls	r7, r3, #31
 8001604:	f57f af68 	bpl.w	80014d8 <tud_task_ext+0xd4>
 8001608:	be00      	bkpt	0x0000
 800160a:	e765      	b.n	80014d8 <tud_task_ext+0xd4>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 800160c:	79c3      	ldrb	r3, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 800160e:	f100 0609 	add.w	r6, r0, #9
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8001612:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8001616:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8001620:	7822      	ldrb	r2, [r4, #0]
 8001622:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001626:	4313      	orrs	r3, r2
 8001628:	7023      	strb	r3, [r4, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 800162a:	8843      	ldrh	r3, [r0, #2]
 800162c:	18c3      	adds	r3, r0, r3
 800162e:	9300      	str	r3, [sp, #0]
  while( p_desc < desc_end )
 8001630:	9b00      	ldr	r3, [sp, #0]
 8001632:	42b3      	cmp	r3, r6
 8001634:	d80a      	bhi.n	800164c <tud_task_ext+0x248>
  if (tud_mount_cb) tud_mount_cb();
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <tud_task_ext+0x2ec>)
 8001638:	b10b      	cbz	r3, 800163e <tud_task_ext+0x23a>
 800163a:	f7fe fe4d 	bl	80002d8 <tud_mount_cb>
          _usbd_dev.cfg_num = cfg_num;
 800163e:	f884 9001 	strb.w	r9, [r4, #1]
          tud_control_status(rhport, p_request);
 8001642:	4628      	mov	r0, r5
 8001644:	a904      	add	r1, sp, #16
 8001646:	f000 f9e1 	bl	8001a0c <tud_control_status>
        break;
 800164a:	e6e3      	b.n	8001414 <tud_task_ext+0x10>
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 800164c:	7873      	ldrb	r3, [r6, #1]
 800164e:	2b0b      	cmp	r3, #11
    uint8_t assoc_itf_count = 1;
 8001650:	bf15      	itete	ne
 8001652:	2301      	movne	r3, #1
      assoc_itf_count = desc_iad->bInterfaceCount;
 8001654:	78f3      	ldrbeq	r3, [r6, #3]
    uint8_t assoc_itf_count = 1;
 8001656:	9301      	strne	r3, [sp, #4]
      assoc_itf_count = desc_iad->bInterfaceCount;
 8001658:	9301      	streq	r3, [sp, #4]
 800165a:	bf04      	itt	eq
 800165c:	7833      	ldrbeq	r3, [r6, #0]
 800165e:	18f6      	addeq	r6, r6, r3
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8001660:	7873      	ldrb	r3, [r6, #1]
 8001662:	2b04      	cmp	r3, #4
 8001664:	d1c9      	bne.n	80015fa <tud_task_ext+0x1f6>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8001666:	f04f 0b00 	mov.w	fp, #0
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	eba3 0a06 	sub.w	sl, r3, r6
 8001670:	fa1f fa8a 	uxth.w	sl, sl
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <tud_task_ext+0x2f0>)
 8001676:	fa5f f88b 	uxtb.w	r8, fp
 800167a:	781a      	ldrb	r2, [r3, #0]
 800167c:	3201      	adds	r2, #1
 800167e:	4542      	cmp	r2, r8
 8001680:	dbbb      	blt.n	80015fa <tud_task_ext+0x1f6>
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8001682:	4640      	mov	r0, r8
 8001684:	f7ff fcac 	bl	8000fe0 <get_driver>
      TU_ASSERT(driver);
 8001688:	2800      	cmp	r0, #0
 800168a:	d0b6      	beq.n	80015fa <tud_task_ext+0x1f6>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 800168c:	6887      	ldr	r7, [r0, #8]
 800168e:	4652      	mov	r2, sl
 8001690:	4631      	mov	r1, r6
 8001692:	4628      	mov	r0, r5
 8001694:	47b8      	blx	r7
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8001696:	2808      	cmp	r0, #8
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8001698:	4607      	mov	r7, r0
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 800169a:	d91e      	bls.n	80016da <tud_task_ext+0x2d6>
 800169c:	4582      	cmp	sl, r0
 800169e:	d31c      	bcc.n	80016da <tud_task_ext+0x2d6>
 80016a0:	2200      	movs	r2, #0
 80016a2:	e009      	b.n	80016b8 <tud_task_ext+0x2b4>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80016a4:	78b1      	ldrb	r1, [r6, #2]
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80016a6:	3201      	adds	r2, #1
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80016a8:	440b      	add	r3, r1
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4423      	add	r3, r4
 80016ae:	78d9      	ldrb	r1, [r3, #3]
 80016b0:	29ff      	cmp	r1, #255	; 0xff
 80016b2:	d1a2      	bne.n	80015fa <tud_task_ext+0x1f6>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 80016b4:	f883 8003 	strb.w	r8, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80016b8:	9901      	ldr	r1, [sp, #4]
 80016ba:	b2d3      	uxtb	r3, r2
 80016bc:	4299      	cmp	r1, r3
 80016be:	d8f1      	bhi.n	80016a4 <tud_task_ext+0x2a0>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 80016c0:	4643      	mov	r3, r8
 80016c2:	4631      	mov	r1, r6
 80016c4:	463a      	mov	r2, r7
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <tud_task_ext+0x2f4>)
 80016c8:	f000 feb4 	bl	8002434 <tu_edpt_bind_driver>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <tud_task_ext+0x2f0>)
        p_desc += drv_len;
 80016ce:	443e      	add	r6, r7
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4598      	cmp	r8, r3
 80016d6:	ddab      	ble.n	8001630 <tud_task_ext+0x22c>
 80016d8:	e78f      	b.n	80015fa <tud_task_ext+0x1f6>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80016da:	f10b 0b01 	add.w	fp, fp, #1
 80016de:	e7c9      	b.n	8001674 <tud_task_ext+0x270>
 80016e0:	200005a0 	.word	0x200005a0
 80016e4:	2000056d 	.word	0x2000056d
 80016e8:	080002df 	.word	0x080002df
 80016ec:	00000000 	.word	0x00000000
 80016f0:	080002d9 	.word	0x080002d9
 80016f4:	2000056c 	.word	0x2000056c
 80016f8:	20000580 	.word	0x20000580
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80016fc:	f8bd 0012 	ldrh.w	r0, [sp, #18]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8001700:	0a03      	lsrs	r3, r0, #8
  switch(desc_type)
 8001702:	1e5a      	subs	r2, r3, #1
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8001704:	b2c0      	uxtb	r0, r0
 8001706:	2a0e      	cmp	r2, #14
 8001708:	f63f aeed 	bhi.w	80014e6 <tud_task_ext+0xe2>
 800170c:	a101      	add	r1, pc, #4	; (adr r1, 8001714 <tud_task_ext+0x310>)
 800170e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001712:	bf00      	nop
 8001714:	08001751 	.word	0x08001751
 8001718:	0800177b 	.word	0x0800177b
 800171c:	08001793 	.word	0x08001793
 8001720:	080014e7 	.word	0x080014e7
 8001724:	080014e7 	.word	0x080014e7
 8001728:	080017a7 	.word	0x080017a7
 800172c:	0800177b 	.word	0x0800177b
 8001730:	080014e7 	.word	0x080014e7
 8001734:	080014e7 	.word	0x080014e7
 8001738:	080014e7 	.word	0x080014e7
 800173c:	080014e7 	.word	0x080014e7
 8001740:	080014e7 	.word	0x080014e7
 8001744:	080014e7 	.word	0x080014e7
 8001748:	080014e7 	.word	0x080014e7
 800174c:	08001763 	.word	0x08001763
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8001750:	f001 fa36 	bl	8002bc0 <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8001754:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8001756:	4602      	mov	r2, r0
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8001758:	4628      	mov	r0, r5
 800175a:	a904      	add	r1, sp, #16
 800175c:	f000 f968 	bl	8001a30 <tud_control_xfer>
 8001760:	e6d9      	b.n	8001516 <tud_task_ext+0x112>
      if (!tud_descriptor_bos_cb) return false;
 8001762:	4b8a      	ldr	r3, [pc, #552]	; (800198c <tud_task_ext+0x588>)
 8001764:	2b00      	cmp	r3, #0
 8001766:	f43f aebe 	beq.w	80014e6 <tud_task_ext+0xe2>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 800176a:	f3af 8000 	nop.w
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 800176e:	4602      	mov	r2, r0
      TU_ASSERT(desc_config);
 8001770:	2800      	cmp	r0, #0
 8001772:	f43f aeb1 	beq.w	80014d8 <tud_task_ext+0xd4>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8001776:	8843      	ldrh	r3, [r0, #2]
 8001778:	e7ee      	b.n	8001758 <tud_task_ext+0x354>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 800177a:	2b02      	cmp	r3, #2
 800177c:	d102      	bne.n	8001784 <tud_task_ext+0x380>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 800177e:	f001 fa27 	bl	8002bd0 <tud_descriptor_configuration_cb>
 8001782:	e7f4      	b.n	800176e <tud_task_ext+0x36a>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8001784:	4b82      	ldr	r3, [pc, #520]	; (8001990 <tud_task_ext+0x58c>)
 8001786:	2b00      	cmp	r3, #0
 8001788:	f43f aead 	beq.w	80014e6 <tud_task_ext+0xe2>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 800178c:	f3af 8000 	nop.w
 8001790:	e7ed      	b.n	800176e <tud_task_ext+0x36a>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8001792:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8001796:	f001 fa1f 	bl	8002bd8 <tud_descriptor_string_cb>
      TU_VERIFY(desc_qualifier);
 800179a:	4602      	mov	r2, r0
 800179c:	2800      	cmp	r0, #0
 800179e:	f43f aea2 	beq.w	80014e6 <tud_task_ext+0xe2>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 80017a2:	7803      	ldrb	r3, [r0, #0]
 80017a4:	e7d8      	b.n	8001758 <tud_task_ext+0x354>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 80017a6:	4b7b      	ldr	r3, [pc, #492]	; (8001994 <tud_task_ext+0x590>)
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f43f ae9c 	beq.w	80014e6 <tud_task_ext+0xe2>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 80017ae:	f3af 8000 	nop.w
 80017b2:	e7f2      	b.n	800179a <tud_task_ext+0x396>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80017b4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	f47f ae94 	bne.w	80014e6 <tud_task_ext+0xe2>
          _usbd_dev.remote_wakeup_en = true;
 80017be:	7823      	ldrb	r3, [r4, #0]
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	7023      	strb	r3, [r4, #0]
 80017c6:	e73c      	b.n	8001642 <tud_task_ext+0x23e>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80017c8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f47f ae8a 	bne.w	80014e6 <tud_task_ext+0xe2>
          _usbd_dev.remote_wakeup_en = false;
 80017d2:	7823      	ldrb	r3, [r4, #0]
 80017d4:	f36f 03c3 	bfc	r3, #3, #1
 80017d8:	e7f4      	b.n	80017c4 <tud_task_ext+0x3c0>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80017da:	7823      	ldrb	r3, [r4, #0]
 80017dc:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	4313      	orrs	r3, r2
 80017e8:	f8ad 300a 	strh.w	r3, [sp, #10]
          tud_control_xfer(rhport, p_request, &status, 2);
 80017ec:	2302      	movs	r3, #2
 80017ee:	e6e2      	b.n	80015b6 <tud_task_ext+0x1b2>
 80017f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	f63f ae76 	bhi.w	80014e6 <tud_task_ext+0xe2>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80017fa:	4423      	add	r3, r4
 80017fc:	78d8      	ldrb	r0, [r3, #3]
 80017fe:	f7ff fbef 	bl	8000fe0 <get_driver>
      TU_VERIFY(driver);
 8001802:	4601      	mov	r1, r0
 8001804:	2800      	cmp	r0, #0
 8001806:	f43f ae6e 	beq.w	80014e6 <tud_task_ext+0xe2>
      if ( !invoke_class_control(rhport, driver, p_request) )
 800180a:	4628      	mov	r0, r5
 800180c:	aa04      	add	r2, sp, #16
 800180e:	f7ff fc03 	bl	8001018 <invoke_class_control>
 8001812:	2800      	cmp	r0, #0
 8001814:	f47f adfe 	bne.w	8001414 <tud_task_ext+0x10>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8001818:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800181c:	f013 0460 	ands.w	r4, r3, #96	; 0x60
 8001820:	f47f ae61 	bne.w	80014e6 <tud_task_ext+0xe2>
        switch(p_request->bRequest)
 8001824:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001828:	3b0a      	subs	r3, #10
 800182a:	2b01      	cmp	r3, #1
 800182c:	f63f ae5b 	bhi.w	80014e6 <tud_task_ext+0xe2>
            usbd_control_set_complete_callback(NULL);
 8001830:	f000 f938 	bl	8001aa4 <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8001834:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001838:	2b0a      	cmp	r3, #10
 800183a:	f47f af02 	bne.w	8001642 <tud_task_ext+0x23e>
              uint8_t alternate = 0;
 800183e:	f88d 400a 	strb.w	r4, [sp, #10]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8001842:	e6b7      	b.n	80015b4 <tud_task_ext+0x1b0>
 8001844:	f89d 1014 	ldrb.w	r1, [sp, #20]
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8001848:	f011 0f78 	tst.w	r1, #120	; 0x78
 800184c:	f47f ae44 	bne.w	80014d8 <tud_task_ext+0xd4>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8001850:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8001854:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001858:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 800185c:	7cd8      	ldrb	r0, [r3, #19]
 800185e:	f7ff fbbf 	bl	8000fe0 <get_driver>
 8001862:	4607      	mov	r7, r0
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8001864:	f1b8 0f00 	cmp.w	r8, #0
 8001868:	d005      	beq.n	8001876 <tud_task_ext+0x472>
        TU_VERIFY(driver);
 800186a:	2800      	cmp	r0, #0
 800186c:	f43f ae3b 	beq.w	80014e6 <tud_task_ext+0xe2>
        return invoke_class_control(rhport, driver, p_request);
 8001870:	4601      	mov	r1, r0
 8001872:	aa04      	add	r2, sp, #16
 8001874:	e66c      	b.n	8001550 <tud_task_ext+0x14c>
        switch ( p_request->bRequest )
 8001876:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800187a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800187e:	2a01      	cmp	r2, #1
 8001880:	d008      	beq.n	8001894 <tud_task_ext+0x490>
 8001882:	2b00      	cmp	r3, #0
 8001884:	f47f ae28 	bne.w	80014d8 <tud_task_ext+0xd4>
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8001888:	4628      	mov	r0, r5
 800188a:	f7ff fdad 	bl	80013e8 <usbd_edpt_stalled>
 800188e:	f8ad 000a 	strh.w	r0, [sp, #10]
            tud_control_xfer(rhport, p_request, &status, 2);
 8001892:	e7ab      	b.n	80017ec <tud_task_ext+0x3e8>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8001894:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8001898:	b922      	cbnz	r2, 80018a4 <tud_task_ext+0x4a0>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 800189a:	2b01      	cmp	r3, #1
                usbd_edpt_clear_stall(rhport, ep_addr);
 800189c:	4628      	mov	r0, r5
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 800189e:	d112      	bne.n	80018c6 <tud_task_ext+0x4c2>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80018a0:	f7ff fd84 	bl	80013ac <usbd_edpt_clear_stall>
            if (driver)
 80018a4:	2f00      	cmp	r7, #0
 80018a6:	f43f adb5 	beq.w	8001414 <tud_task_ext+0x10>
              (void) invoke_class_control(rhport, driver, p_request);
 80018aa:	4639      	mov	r1, r7
 80018ac:	aa04      	add	r2, sp, #16
 80018ae:	4628      	mov	r0, r5
 80018b0:	f7ff fbb2 	bl	8001018 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f000 f8f5 	bl	8001aa4 <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80018ba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80018be:	07de      	lsls	r6, r3, #31
 80018c0:	f53f ada8 	bmi.w	8001414 <tud_task_ext+0x10>
 80018c4:	e6bd      	b.n	8001642 <tud_task_ext+0x23e>
                usbd_edpt_stall(rhport, ep_addr);
 80018c6:	f7ff fd53 	bl	8001370 <usbd_edpt_stall>
 80018ca:	e7eb      	b.n	80018a4 <tud_task_ext+0x4a0>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80018cc:	f89d 1010 	ldrb.w	r1, [sp, #16]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <tud_task_ext+0x594>)
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80018d2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80018d6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80018da:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 80018de:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 80018e2:	f36f 0000 	bfc	r0, #0, #1
 80018e6:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80018ea:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 80018ee:	f36f 0082 	bfc	r0, #2, #1
 80018f2:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
        if ( 0 == epnum )
 80018f6:	b93c      	cbnz	r4, 8001908 <tud_task_ext+0x504>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80018f8:	9b05      	ldr	r3, [sp, #20]
 80018fa:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80018fe:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001902:	f000 f8e3 	bl	8001acc <usbd_control_xfer_cb>
 8001906:	e585      	b.n	8001414 <tud_task_ext+0x10>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8001908:	7cd8      	ldrb	r0, [r3, #19]
 800190a:	f7ff fb69 	bl	8000fe0 <get_driver>
          TU_ASSERT(driver, );
 800190e:	b948      	cbnz	r0, 8001924 <tud_task_ext+0x520>
 8001910:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001914:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8001918:	07d8      	lsls	r0, r3, #31
 800191a:	d500      	bpl.n	800191e <tud_task_ext+0x51a>
 800191c:	be00      	bkpt	0x0000
}
 800191e:	b007      	add	sp, #28
 8001920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8001924:	6904      	ldr	r4, [r0, #16]
 8001926:	9b05      	ldr	r3, [sp, #20]
 8001928:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800192c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001930:	47a0      	blx	r4
 8001932:	e56f      	b.n	8001414 <tud_task_ext+0x10>
        if ( _usbd_dev.connected )
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <tud_task_ext+0x594>)
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	07d1      	lsls	r1, r2, #31
 800193a:	f57f ad6b 	bpl.w	8001414 <tud_task_ext+0x10>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <tud_task_ext+0x598>)
 8001940:	2a00      	cmp	r2, #0
 8001942:	f43f ad67 	beq.w	8001414 <tud_task_ext+0x10>
 8001946:	7818      	ldrb	r0, [r3, #0]
 8001948:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800194c:	f3af 8000 	nop.w
 8001950:	e560      	b.n	8001414 <tud_task_ext+0x10>
        if ( _usbd_dev.connected )
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <tud_task_ext+0x594>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	07da      	lsls	r2, r3, #31
 8001958:	f57f ad5c 	bpl.w	8001414 <tud_task_ext+0x10>
          if (tud_resume_cb) tud_resume_cb();
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <tud_task_ext+0x59c>)
 800195e:	2b00      	cmp	r3, #0
 8001960:	f43f ad58 	beq.w	8001414 <tud_task_ext+0x10>
 8001964:	f3af 8000 	nop.w
 8001968:	e554      	b.n	8001414 <tud_task_ext+0x10>
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 800196a:	9b04      	ldr	r3, [sp, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f43f ad51 	beq.w	8001414 <tud_task_ext+0x10>
 8001972:	9805      	ldr	r0, [sp, #20]
 8001974:	4798      	blx	r3
 8001976:	e54d      	b.n	8001414 <tud_task_ext+0x10>
        TU_BREAKPOINT();
 8001978:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800197c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8001980:	07db      	lsls	r3, r3, #31
 8001982:	f57f ad47 	bpl.w	8001414 <tud_task_ext+0x10>
 8001986:	be00      	bkpt	0x0000
  {
 8001988:	e544      	b.n	8001414 <tud_task_ext+0x10>
 800198a:	bf00      	nop
	...
 8001998:	2000056d 	.word	0x2000056d
	...

080019a4 <_data_stage_xact>:
// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <_data_stage_xact+0x4c>)
{
 80019a6:	b570      	push	{r4, r5, r6, lr}
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80019a8:	8999      	ldrh	r1, [r3, #12]
 80019aa:	89da      	ldrh	r2, [r3, #14]
{
 80019ac:	4605      	mov	r5, r0
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80019ae:	1a8c      	subs	r4, r1, r2
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80019b0:	b2a4      	uxth	r4, r4

  uint8_t ep_addr = EDPT_CTRL_OUT;

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 80019b2:	f993 0000 	ldrsb.w	r0, [r3]
 80019b6:	2c40      	cmp	r4, #64	; 0x40
 80019b8:	bf28      	it	cs
 80019ba:	2440      	movcs	r4, #64	; 0x40
 80019bc:	2800      	cmp	r0, #0
 80019be:	da09      	bge.n	80019d4 <_data_stage_xact+0x30>
  {
    ep_addr = EDPT_CTRL_IN;
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 80019c0:	4291      	cmp	r1, r2
 80019c2:	d012      	beq.n	80019ea <_data_stage_xact+0x46>
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	4622      	mov	r2, r4
 80019c8:	480a      	ldr	r0, [pc, #40]	; (80019f4 <_data_stage_xact+0x50>)
 80019ca:	f001 fdab 	bl	8003524 <memcpy>
    ep_addr = EDPT_CTRL_IN;
 80019ce:	2180      	movs	r1, #128	; 0x80
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <_data_stage_xact+0x50>)
 80019d2:	e004      	b.n	80019de <_data_stage_xact+0x3a>
 80019d4:	4291      	cmp	r1, r2
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80019d6:	f04f 0100 	mov.w	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80019da:	d1f9      	bne.n	80019d0 <_data_stage_xact+0x2c>
 80019dc:	2200      	movs	r2, #0
 80019de:	4623      	mov	r3, r4
 80019e0:	4628      	mov	r0, r5
}
 80019e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80019e6:	f7ff bc7f 	b.w	80012e8 <usbd_edpt_xfer>
    ep_addr = EDPT_CTRL_IN;
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	e7f6      	b.n	80019dc <_data_stage_xact+0x38>
 80019ee:	bf00      	nop
 80019f0:	20000664 	.word	0x20000664
 80019f4:	20000678 	.word	0x20000678

080019f8 <_status_stage_xact.isra.0>:
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80019f8:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80019fa:	f011 0f80 	tst.w	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80019fe:	461a      	mov	r2, r3
 8001a00:	bf0c      	ite	eq
 8001a02:	2180      	moveq	r1, #128	; 0x80
 8001a04:	4619      	movne	r1, r3
 8001a06:	f7ff bc6f 	b.w	80012e8 <usbd_edpt_xfer>
	...

08001a0c <tud_control_status>:
{
 8001a0c:	b430      	push	{r4, r5}
  _ctrl_xfer.request       = (*request);
 8001a0e:	4c07      	ldr	r4, [pc, #28]	; (8001a2c <tud_control_status+0x20>)
{
 8001a10:	4605      	mov	r5, r0
  _ctrl_xfer.request       = (*request);
 8001a12:	4622      	mov	r2, r4
 8001a14:	6808      	ldr	r0, [r1, #0]
{
 8001a16:	460b      	mov	r3, r1
  _ctrl_xfer.request       = (*request);
 8001a18:	6849      	ldr	r1, [r1, #4]
 8001a1a:	c203      	stmia	r2!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8001a1c:	2200      	movs	r2, #0
  return _status_stage_xact(rhport, request);
 8001a1e:	4628      	mov	r0, r5
  _ctrl_xfer.data_len      = 0;
 8001a20:	e9c4 2202 	strd	r2, r2, [r4, #8]
}
 8001a24:	bc30      	pop	{r4, r5}
  return _status_stage_xact(rhport, request);
 8001a26:	7819      	ldrb	r1, [r3, #0]
 8001a28:	f7ff bfe6 	b.w	80019f8 <_status_stage_xact.isra.0>
 8001a2c:	20000664 	.word	0x20000664

08001a30 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  _ctrl_xfer.request       = (*request);
 8001a32:	4e17      	ldr	r6, [pc, #92]	; (8001a90 <tud_control_xfer+0x60>)
{
 8001a34:	460c      	mov	r4, r1
  _ctrl_xfer.request       = (*request);
 8001a36:	4637      	mov	r7, r6
{
 8001a38:	4605      	mov	r5, r0
  _ctrl_xfer.request       = (*request);
 8001a3a:	6808      	ldr	r0, [r1, #0]
 8001a3c:	6849      	ldr	r1, [r1, #4]
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8001a3e:	60b2      	str	r2, [r6, #8]
  _ctrl_xfer.request       = (*request);
 8001a40:	c703      	stmia	r7!, {r0, r1}
  _ctrl_xfer.total_xferred = 0U;
 8001a42:	2100      	movs	r1, #0
 8001a44:	81f1      	strh	r1, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8001a46:	88e1      	ldrh	r1, [r4, #6]
 8001a48:	428b      	cmp	r3, r1
 8001a4a:	bf28      	it	cs
 8001a4c:	460b      	movcs	r3, r1
 8001a4e:	81b3      	strh	r3, [r6, #12]

  if (request->wLength > 0U)
 8001a50:	b189      	cbz	r1, 8001a76 <tud_control_xfer+0x46>
  {
    if(_ctrl_xfer.data_len > 0U)
 8001a52:	b153      	cbz	r3, 8001a6a <tud_control_xfer+0x3a>
    {
      TU_ASSERT(buffer);
 8001a54:	b94a      	cbnz	r2, 8001a6a <tud_control_xfer+0x3a>
 8001a56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001a5a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8001a5e:	07da      	lsls	r2, r3, #31
 8001a60:	d401      	bmi.n	8001a66 <tud_control_xfer+0x36>
 8001a62:	2000      	movs	r0, #0
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
 8001a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TU_ASSERT(buffer);
 8001a66:	be00      	bkpt	0x0000
 8001a68:	e7fb      	b.n	8001a62 <tud_control_xfer+0x32>
    TU_ASSERT( _data_stage_xact(rhport) );
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f7ff ff9a 	bl	80019a4 <_data_stage_xact>
 8001a70:	b130      	cbz	r0, 8001a80 <tud_control_xfer+0x50>
  return true;
 8001a72:	2001      	movs	r0, #1
 8001a74:	e7f6      	b.n	8001a64 <tud_control_xfer+0x34>
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8001a76:	4628      	mov	r0, r5
 8001a78:	7821      	ldrb	r1, [r4, #0]
 8001a7a:	f7ff ffbd 	bl	80019f8 <_status_stage_xact.isra.0>
 8001a7e:	e7f7      	b.n	8001a70 <tud_control_xfer+0x40>
 8001a80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001a84:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8001a88:	07db      	lsls	r3, r3, #31
 8001a8a:	d5ea      	bpl.n	8001a62 <tud_control_xfer+0x32>
 8001a8c:	be00      	bkpt	0x0000
 8001a8e:	e7e9      	b.n	8001a64 <tud_control_xfer+0x34>
 8001a90:	20000664 	.word	0x20000664

08001a94 <usbd_control_reset>:
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
  tu_varclr(&_ctrl_xfer);
 8001a94:	2214      	movs	r2, #20
 8001a96:	2100      	movs	r1, #0
 8001a98:	4801      	ldr	r0, [pc, #4]	; (8001aa0 <usbd_control_reset+0xc>)
 8001a9a:	f001 bd6b 	b.w	8003574 <memset>
 8001a9e:	bf00      	nop
 8001aa0:	20000664 	.word	0x20000664

08001aa4 <usbd_control_set_complete_callback>:
}

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 8001aa4:	4b01      	ldr	r3, [pc, #4]	; (8001aac <usbd_control_set_complete_callback+0x8>)
 8001aa6:	6118      	str	r0, [r3, #16]
}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000664 	.word	0x20000664

08001ab0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
 8001ab4:	4c04      	ldr	r4, [pc, #16]	; (8001ac8 <usbd_control_set_request+0x18>)
 8001ab6:	6800      	ldr	r0, [r0, #0]
 8001ab8:	4623      	mov	r3, r4
 8001aba:	6851      	ldr	r1, [r2, #4]
 8001abc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8001abe:	2300      	movs	r3, #0
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8001ac0:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 8001ac4:	bd10      	pop	{r4, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000664 	.word	0x20000664

08001acc <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8001ace:	4c2d      	ldr	r4, [pc, #180]	; (8001b84 <usbd_control_xfer_cb+0xb8>)
{
 8001ad0:	461e      	mov	r6, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8001ad2:	7823      	ldrb	r3, [r4, #0]
 8001ad4:	09c9      	lsrs	r1, r1, #7
 8001ad6:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
{
 8001ada:	4605      	mov	r5, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8001adc:	d018      	beq.n	8001b10 <usbd_control_xfer_cb+0x44>
  {
    TU_ASSERT(0 == xferred_bytes);
 8001ade:	b14e      	cbz	r6, 8001af4 <usbd_control_xfer_cb+0x28>
 8001ae0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ae4:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8001ae8:	07da      	lsls	r2, r3, #31
 8001aea:	d401      	bmi.n	8001af0 <usbd_control_xfer_cb+0x24>
 8001aec:	2000      	movs	r0, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
 8001aee:	bd70      	pop	{r4, r5, r6, pc}
    TU_ASSERT(0 == xferred_bytes);
 8001af0:	be00      	bkpt	0x0000
 8001af2:	e7fb      	b.n	8001aec <usbd_control_xfer_cb+0x20>
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <usbd_control_xfer_cb+0xbc>)
 8001af6:	b113      	cbz	r3, 8001afe <usbd_control_xfer_cb+0x32>
 8001af8:	4621      	mov	r1, r4
 8001afa:	f000 f923 	bl	8001d44 <dcd_edpt0_status_complete>
    if (_ctrl_xfer.complete_cb)
 8001afe:	6923      	ldr	r3, [r4, #16]
 8001b00:	b90b      	cbnz	r3, 8001b06 <usbd_control_xfer_cb+0x3a>
  return true;
 8001b02:	2001      	movs	r0, #1
 8001b04:	e7f3      	b.n	8001aee <usbd_control_xfer_cb+0x22>
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8001b06:	2103      	movs	r1, #3
 8001b08:	4628      	mov	r0, r5
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <usbd_control_xfer_cb+0xb8>)
 8001b0c:	4798      	blx	r3
 8001b0e:	e7f8      	b.n	8001b02 <usbd_control_xfer_cb+0x36>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8001b10:	f994 3000 	ldrsb.w	r3, [r4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db06      	blt.n	8001b26 <usbd_control_xfer_cb+0x5a>
    TU_VERIFY(_ctrl_xfer.buffer);
 8001b18:	68a0      	ldr	r0, [r4, #8]
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d0e6      	beq.n	8001aec <usbd_control_xfer_cb+0x20>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8001b1e:	4632      	mov	r2, r6
 8001b20:	491a      	ldr	r1, [pc, #104]	; (8001b8c <usbd_control_xfer_cb+0xc0>)
 8001b22:	f001 fcff 	bl	8003524 <memcpy>
  _ctrl_xfer.buffer += xferred_bytes;
 8001b26:	68a2      	ldr	r2, [r4, #8]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8001b28:	89e3      	ldrh	r3, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8001b2a:	4432      	add	r2, r6
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8001b2c:	4433      	add	r3, r6
  _ctrl_xfer.buffer += xferred_bytes;
 8001b2e:	60a2      	str	r2, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8001b30:	88e2      	ldrh	r2, [r4, #6]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8001b32:	b29b      	uxth	r3, r3
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8001b34:	429a      	cmp	r2, r3
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8001b36:	81e3      	strh	r3, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8001b38:	d001      	beq.n	8001b3e <usbd_control_xfer_cb+0x72>
 8001b3a:	2e3f      	cmp	r6, #63	; 0x3f
 8001b3c:	d81e      	bhi.n	8001b7c <usbd_control_xfer_cb+0xb0>
    if ( _ctrl_xfer.complete_cb )
 8001b3e:	6923      	ldr	r3, [r4, #16]
 8001b40:	b96b      	cbnz	r3, 8001b5e <usbd_control_xfer_cb+0x92>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8001b42:	4628      	mov	r0, r5
 8001b44:	7821      	ldrb	r1, [r4, #0]
 8001b46:	f7ff ff57 	bl	80019f8 <_status_stage_xact.isra.0>
    TU_ASSERT( _data_stage_xact(rhport) );
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d1d9      	bne.n	8001b02 <usbd_control_xfer_cb+0x36>
 8001b4e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b52:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8001b56:	07db      	lsls	r3, r3, #31
 8001b58:	d5c8      	bpl.n	8001aec <usbd_control_xfer_cb+0x20>
 8001b5a:	be00      	bkpt	0x0000
 8001b5c:	e7c7      	b.n	8001aee <usbd_control_xfer_cb+0x22>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4628      	mov	r0, r5
 8001b62:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <usbd_control_xfer_cb+0xb8>)
 8001b64:	4798      	blx	r3
    if ( is_ok )
 8001b66:	4601      	mov	r1, r0
 8001b68:	2800      	cmp	r0, #0
 8001b6a:	d1ea      	bne.n	8001b42 <usbd_control_xfer_cb+0x76>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8001b6c:	4628      	mov	r0, r5
 8001b6e:	f000 fbde 	bl	800232e <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	4628      	mov	r0, r5
 8001b76:	f000 fbda 	bl	800232e <dcd_edpt_stall>
 8001b7a:	e7c2      	b.n	8001b02 <usbd_control_xfer_cb+0x36>
    TU_ASSERT( _data_stage_xact(rhport) );
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f7ff ff11 	bl	80019a4 <_data_stage_xact>
 8001b82:	e7e2      	b.n	8001b4a <usbd_control_xfer_cb+0x7e>
 8001b84:	20000664 	.word	0x20000664
 8001b88:	08001d45 	.word	0x08001d45
 8001b8c:	20000678 	.word	0x20000678

08001b90 <pcd_clear_tx_dtog.constprop.0>:
  *reg = (uint16_t)wRegValue;
}

/* GetENDPOINT */
static inline uint16_t pcd_get_endpoint(USB_TypeDef * USBx, uint32_t bEpNum) {
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8001b90:	0080      	lsls	r0, r0, #2
 8001b92:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001b96:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  return *reg;
 8001b9a:	8803      	ldrh	r3, [r0, #0]
}

static inline void pcd_clear_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
  if((regVal & USB_EP_DTOG_TX) != 0)
 8001b9c:	065b      	lsls	r3, r3, #25
 8001b9e:	d50b      	bpl.n	8001bb8 <pcd_clear_tx_dtog.constprop.0+0x28>
  return *reg;
 8001ba0:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX;
 8001ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  *reg = (uint16_t)wRegValue;
 8001bb6:	8003      	strh	r3, [r0, #0]
  {
    pcd_tx_dtog(USBx,bEpNum);
  }
}
 8001bb8:	4770      	bx	lr

08001bba <pcd_clear_rx_dtog.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8001bba:	0080      	lsls	r0, r0, #2
 8001bbc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001bc0:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  return *reg;
 8001bc4:	8803      	ldrh	r3, [r0, #0]
  if((regVal & USB_EP_DTOG_RX) != 0)
 8001bc6:	045b      	lsls	r3, r3, #17
 8001bc8:	d50b      	bpl.n	8001be2 <pcd_clear_rx_dtog.constprop.0+0x28>
  return *reg;
 8001bca:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX;
 8001bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  *reg = (uint16_t)wRegValue;
 8001be0:	8003      	strh	r3, [r0, #0]
}
 8001be2:	4770      	bx	lr

08001be4 <pcd_set_ep_rx_status.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8001be4:	0080      	lsls	r0, r0, #2
 8001be6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001bea:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  return *reg;
 8001bee:	8803      	ldrh	r3, [r0, #0]
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 8001bf0:	04ca      	lsls	r2, r1, #19
 8001bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfa:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8001bfe:	ea4f 4313 	mov.w	r3, r3, lsr #16
    regVal ^= USB_EPRX_DTOG1;
 8001c02:	bf48      	it	mi
 8001c04:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 8001c08:	048a      	lsls	r2, r1, #18
    regVal ^= USB_EPRX_DTOG2;
 8001c0a:	bf48      	it	mi
 8001c0c:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8001c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  *reg = (uint16_t)wRegValue;
 8001c18:	8003      	strh	r3, [r0, #0]
} /* pcd_set_ep_rx_status */
 8001c1a:	4770      	bx	lr

08001c1c <pcd_btable_word_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <pcd_btable_word_ptr.constprop.0+0x18>)
 8001c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c22:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8001c26:	4418      	add	r0, r3
  return &(pma[total_word_offset]);
 8001c28:	0080      	lsls	r0, r0, #2
}
 8001c2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001c2e:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 8001c32:	4770      	bx	lr
 8001c34:	40005c00 	.word	0x40005c00

08001c38 <pcd_set_ep_rx_cnt.constprop.0>:
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 8001c38:	0080      	lsls	r0, r0, #2
static inline void pcd_set_ep_rx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
 8001c3a:	b508      	push	{r3, lr}
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 8001c3c:	3003      	adds	r0, #3
 8001c3e:	f7ff ffed 	bl	8001c1c <pcd_btable_word_ptr.constprop.0>
  if(wCount > 62u)
 8001c42:	293e      	cmp	r1, #62	; 0x3e
 8001c44:	d90a      	bls.n	8001c5c <pcd_set_ep_rx_cnt.constprop.0+0x24>
    wNBlocks = wCount >> 5u;
 8001c46:	094b      	lsrs	r3, r1, #5
    if((wCount & 0x1fU) == 0u)
 8001c48:	06c9      	lsls	r1, r1, #27
      wNBlocks--;
 8001c4a:	bf08      	it	eq
 8001c4c:	f103 33ff 	addeq.w	r3, r3, #4294967295
    wNBlocks = wNBlocks << 10u;
 8001c50:	029b      	lsls	r3, r3, #10
    wNBlocks |= 0x8000u; // Mark block size as 32byte
 8001c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	8003      	strh	r3, [r0, #0]
}
 8001c5a:	bd08      	pop	{r3, pc}
    wNBlocks = wCount >> 1u;
 8001c5c:	084b      	lsrs	r3, r1, #1
    if((wCount & 0x1U) != 0u)
 8001c5e:	07ca      	lsls	r2, r1, #31
      wNBlocks++;
 8001c60:	bf48      	it	mi
 8001c62:	3301      	addmi	r3, #1
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	e7f6      	b.n	8001c56 <pcd_set_ep_rx_cnt.constprop.0+0x1e>

08001c68 <dcd_transmit_packet>:
}

// Currently, single-buffered, and only 64 bytes at a time (max)

static void dcd_transmit_packet(xfer_ctl_t * xfer, uint16_t ep_ix)
{
 8001c68:	b570      	push	{r4, r5, r6, lr}
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 8001c6a:	88c3      	ldrh	r3, [r0, #6]
 8001c6c:	8884      	ldrh	r4, [r0, #4]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 0u);
 8001c6e:	0089      	lsls	r1, r1, #2
 8001c70:	1ae4      	subs	r4, r4, r3
 8001c72:	b2a3      	uxth	r3, r4

  if(len > xfer->max_packet_size) // max packet size for FS transfer
 8001c74:	7a84      	ldrb	r4, [r0, #10]
{
 8001c76:	4602      	mov	r2, r0
 8001c78:	429c      	cmp	r4, r3
 8001c7a:	4608      	mov	r0, r1
 8001c7c:	bf28      	it	cs
 8001c7e:	461c      	movcs	r4, r3
 8001c80:	f7ff ffcc 	bl	8001c1c <pcd_btable_word_ptr.constprop.0>
  {
    len = xfer->max_packet_size;
  }
  uint16_t oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 8001c84:	8803      	ldrh	r3, [r0, #0]
    dcd_write_packet_memory_ff(xfer->ff, oldAddr, len);
  }
  else
#endif
  {
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 8001c86:	88d5      	ldrh	r5, [r2, #6]
 8001c88:	6810      	ldr	r0, [r2, #0]
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO uint16_t *pdwVal;

  srcVal = src;
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 8001c8a:	f3c3 034e 	ubfx	r3, r3, #1, #15
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 8001c8e:	4428      	add	r0, r5
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 8001c90:	009b      	lsls	r3, r3, #2
  uint32_t n =  ((uint32_t)wNBytes + 1U) >> 1U;
 8001c92:	1c65      	adds	r5, r4, #1
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 8001c94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  uint32_t n =  ((uint32_t)wNBytes + 1U) >> 1U;
 8001c98:	f3c5 054e 	ubfx	r5, r5, #1, #15
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 8001c9c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000

  for (i = n; i != 0; i--)
 8001ca0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8001ca4:	42a8      	cmp	r0, r5
 8001ca6:	d119      	bne.n	8001cdc <dcd_transmit_packet+0x74>
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 8001ca8:	88d3      	ldrh	r3, [r2, #6]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 1u);
 8001caa:	1c48      	adds	r0, r1, #1
 8001cac:	4423      	add	r3, r4
 8001cae:	80d3      	strh	r3, [r2, #6]
 8001cb0:	f7ff ffb4 	bl	8001c1c <pcd_btable_word_ptr.constprop.0>
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8001cb4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  *pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8001cb8:	8004      	strh	r4, [r0, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8001cba:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
  return *reg;
 8001cbe:	880b      	ldrh	r3, [r1, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8001cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cc8:	041b      	lsls	r3, r3, #16
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  *reg = (uint16_t)wRegValue;
 8001cd8:	800b      	strh	r3, [r1, #0]
}
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
  {
    temp1 = (uint16_t) *srcVal;
    srcVal++;
    temp2 = temp1 | ((uint16_t)((uint16_t) ((*srcVal) << 8U))) ;
 8001cdc:	f830 6b02 	ldrh.w	r6, [r0], #2
    *pdwVal = temp2;
 8001ce0:	f823 6b04 	strh.w	r6, [r3], #4
  for (i = n; i != 0; i--)
 8001ce4:	e7de      	b.n	8001ca4 <dcd_transmit_packet+0x3c>
	...

08001ce8 <dcd_int_enable>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cec:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <dcd_int_enable+0x20>)
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d02:	605a      	str	r2, [r3, #4]
}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <dcd_int_disable>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <dcd_int_disable+0x34>)
 8001d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8001d16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d1a:	f3bf 8f6f 	isb	sy
 8001d1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8001d26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d2a:	f3bf 8f6f 	isb	sy
 8001d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d3a:	f3bf 8f6f 	isb	sy
}
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <dcd_edpt0_status_complete>:
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8001d44:	780b      	ldrb	r3, [r1, #0]
 8001d46:	065b      	lsls	r3, r3, #25
 8001d48:	d113      	bne.n	8001d72 <dcd_edpt0_status_complete+0x2e>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8001d4a:	784b      	ldrb	r3, [r1, #1]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d110      	bne.n	8001d72 <dcd_edpt0_status_complete+0x2e>
  *reg = (uint16_t)(*reg & ~mask);
 8001d50:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <dcd_edpt0_status_complete+0x30>)
    uint8_t const dev_addr = (uint8_t) request->wValue;
 8001d52:	8849      	ldrh	r1, [r1, #2]
  *reg = (uint16_t)(*reg & ~mask);
 8001d54:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    USB->DADDR = (uint16_t)(USB->DADDR | dev_addr); // leave the enable bit set
 8001d58:	b2c9      	uxtb	r1, r1
  *reg = (uint16_t)(*reg & ~mask);
 8001d5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
    USB->DADDR = (uint16_t)(USB->DADDR | dev_addr); // leave the enable bit set
 8001d66:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
}
 8001d72:	4770      	bx	lr
 8001d74:	40005c00 	.word	0x40005c00

08001d78 <dcd_edpt_open>:
{
 8001d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TU_ASSERT(p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS);
 8001d7c:	78cb      	ldrb	r3, [r1, #3]
 8001d7e:	f003 0203 	and.w	r2, r3, #3
 8001d82:	2a01      	cmp	r2, #1
 8001d84:	d10a      	bne.n	8001d9c <dcd_edpt_open+0x24>
  TU_ASSERT(epnum < MAX_EP_COUNT);
 8001d86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d8a:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8001d8e:	f010 0001 	ands.w	r0, r0, #1
 8001d92:	d001      	beq.n	8001d98 <dcd_edpt_open+0x20>
 8001d94:	be00      	bkpt	0x0000
 8001d96:	2000      	movs	r0, #0
}
 8001d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint8_t const epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8001d9c:	788c      	ldrb	r4, [r1, #2]
  TU_ASSERT(epnum < MAX_EP_COUNT);
 8001d9e:	f014 0278 	ands.w	r2, r4, #120	; 0x78
 8001da2:	d1f0      	bne.n	8001d86 <dcd_edpt_open+0xe>
  switch(p_endpoint_desc->bmAttributes.xfer) {
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d003      	beq.n	8001db4 <dcd_edpt_open+0x3c>
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d004      	beq.n	8001dba <dcd_edpt_open+0x42>
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e8      	bne.n	8001d86 <dcd_edpt_open+0xe>
    wType = USB_EP_CONTROL;
 8001db4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001db8:	e001      	b.n	8001dbe <dcd_edpt_open+0x46>
  switch(p_endpoint_desc->bmAttributes.xfer) {
 8001dba:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  regVal |= USB_EP_CTR_RX | USB_EP_CTR_TX; // These clear on write0, so must set high
 8001dbe:	f248 0680 	movw	r6, #32896	; 0x8080
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8001dc2:	09e7      	lsrs	r7, r4, #7
  pcd_set_eptype(USB, epnum, wType);
 8001dc4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8001dc8:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8001dcc:	f108 4280 	add.w	r2, r8, #1073741824	; 0x40000000
 8001dd0:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  return *reg;
 8001dd4:	8813      	ldrh	r3, [r2, #0]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8001dd6:	888d      	ldrh	r5, [r1, #4]
  regVal &= (uint32_t)USB_EP_T_MASK;
 8001dd8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	0c1b      	lsrs	r3, r3, #16
  regVal |= wType;
 8001de4:	4318      	orrs	r0, r3
  *reg = (uint16_t)wRegValue;
 8001de6:	4330      	orrs	r0, r6
 8001de8:	8010      	strh	r0, [r2, #0]
  return *reg;
 8001dea:	8813      	ldrh	r3, [r2, #0]
 8001dec:	4839      	ldr	r0, [pc, #228]	; (8001ed4 <dcd_edpt_open+0x15c>)
  regVal &= USB_EPREG_MASK;
 8001dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	0c1b      	lsrs	r3, r3, #16
  regVal |= bAddr;
 8001dfa:	4323      	orrs	r3, r4
  *reg = (uint16_t)wRegValue;
 8001dfc:	4333      	orrs	r3, r6
 8001dfe:	8013      	strh	r3, [r2, #0]
  return *reg;
 8001e00:	8803      	ldrh	r3, [r0, #0]
 8001e02:	f3c5 010a 	ubfx	r1, r5, #0, #11
}
static inline void pcd_clear_ep_kind(USB_TypeDef * USBx, uint32_t bEpNum)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
  regVal &= USB_EPKIND_MASK;
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8001e06:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	4333      	orrs	r3, r6
  *reg = (uint16_t)wRegValue;
 8001e14:	8003      	strh	r3, [r0, #0]
  if(epXferCtl->pma_alloc_size != 0U)
 8001e16:	2318      	movs	r3, #24
 8001e18:	200c      	movs	r0, #12
 8001e1a:	4363      	muls	r3, r4
 8001e1c:	fb00 3307 	mla	r3, r0, r7, r3
 8001e20:	4e2d      	ldr	r6, [pc, #180]	; (8001ed8 <dcd_edpt_open+0x160>)
  epXferCtl->pma_alloc_size = length;
 8001e22:	b2ed      	uxtb	r5, r5
  if(epXferCtl->pma_alloc_size != 0U)
 8001e24:	4433      	add	r3, r6
 8001e26:	7ad8      	ldrb	r0, [r3, #11]
 8001e28:	b390      	cbz	r0, 8001e90 <dcd_edpt_open+0x118>
    TU_ASSERT(length <= epXferCtl->pma_alloc_size, 0xFFFF);  // Verify no larger than previous alloc
 8001e2a:	4281      	cmp	r1, r0
 8001e2c:	d92d      	bls.n	8001e8a <dcd_edpt_open+0x112>
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 8001e2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001e32:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8001e36:	07db      	lsls	r3, r3, #31
 8001e38:	d500      	bpl.n	8001e3c <dcd_edpt_open+0xc4>
    TU_ASSERT(length <= epXferCtl->pma_alloc_size, 0xFFFF);  // Verify no larger than previous alloc
 8001e3a:	be00      	bkpt	0x0000
 8001e3c:	f64f 79ff 	movw	r9, #65535	; 0xffff
  if(dir == TUSB_DIR_IN)
 8001e40:	b3b7      	cbz	r7, 8001eb0 <dcd_edpt_open+0x138>
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 0u);
 8001e42:	4640      	mov	r0, r8
 8001e44:	f7ff feea 	bl	8001c1c <pcd_btable_word_ptr.constprop.0>
    *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr;
 8001e48:	f8a0 9000 	strh.w	r9, [r0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 1u);
 8001e4c:	f108 0001 	add.w	r0, r8, #1
 8001e50:	f7ff fee4 	bl	8001c1c <pcd_btable_word_ptr.constprop.0>
  *pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8001e54:	8001      	strh	r1, [r0, #0]
    pcd_clear_tx_dtog(USB, epnum);
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff fe9a 	bl	8001b90 <pcd_clear_tx_dtog.constprop.0>
  return *reg;
 8001e5c:	8813      	ldrh	r3, [r2, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8001e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e66:	041b      	lsls	r3, r3, #16
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	f083 0320 	eor.w	r3, r3, #32
 8001e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  *reg = (uint16_t)wRegValue;
 8001e76:	8013      	strh	r3, [r2, #0]
  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 8001e78:	2318      	movs	r3, #24
 8001e7a:	435c      	muls	r4, r3
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	fb03 4707 	mla	r7, r3, r7, r4
 8001e82:	4437      	add	r7, r6
  return true;
 8001e84:	2001      	movs	r0, #1
  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 8001e86:	72bd      	strb	r5, [r7, #10]
  return true;
 8001e88:	e786      	b.n	8001d98 <dcd_edpt_open+0x20>
    return epXferCtl->pma_ptr;
 8001e8a:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8001e8e:	e7d7      	b.n	8001e40 <dcd_edpt_open+0xc8>
  uint16_t addr = ep_buf_ptr; 
 8001e90:	f8df c048 	ldr.w	ip, [pc, #72]	; 8001edc <dcd_edpt_open+0x164>
 8001e94:	f8bc 9000 	ldrh.w	r9, [ip]
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + length); // increment buffer pointer
 8001e98:	eb01 0009 	add.w	r0, r1, r9
 8001e9c:	b280      	uxth	r0, r0
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 8001e9e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + length); // increment buffer pointer
 8001ea2:	f8ac 0000 	strh.w	r0, [ip]
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 8001ea6:	d8c2      	bhi.n	8001e2e <dcd_edpt_open+0xb6>
  epXferCtl->pma_ptr = addr;
 8001ea8:	f8a3 9008 	strh.w	r9, [r3, #8]
  epXferCtl->pma_alloc_size = length;
 8001eac:	72dd      	strb	r5, [r3, #11]
  return addr;
 8001eae:	e7c7      	b.n	8001e40 <dcd_edpt_open+0xc8>
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 8001eb0:	f108 0002 	add.w	r0, r8, #2
 8001eb4:	f7ff feb2 	bl	8001c1c <pcd_btable_word_ptr.constprop.0>
    *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr;
 8001eb8:	f8a0 9000 	strh.w	r9, [r0]
    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f7ff febb 	bl	8001c38 <pcd_set_ep_rx_cnt.constprop.0>
    pcd_clear_rx_dtog(USB, epnum);
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7ff fe79 	bl	8001bba <pcd_clear_rx_dtog.constprop.0>
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 8001ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff fe89 	bl	8001be4 <pcd_set_ep_rx_status.constprop.0>
 8001ed2:	e7d1      	b.n	8001e78 <dcd_edpt_open+0x100>
 8001ed4:	40005c00 	.word	0x40005c00
 8001ed8:	200006d4 	.word	0x200006d4
 8001edc:	200006d0 	.word	0x200006d0

08001ee0 <dcd_handle_bus_reset>:
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 8001ee0:	2300      	movs	r3, #0
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 8001ee2:	2140      	movs	r1, #64	; 0x40
{
 8001ee4:	b510      	push	{r4, lr}
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 8001ee6:	2408      	movs	r4, #8
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 8001ee8:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <dcd_handle_bus_reset+0x50>)
 8001eea:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
  *reg = (uint16_t)wRegValue;
 8001eee:	8013      	strh	r3, [r2, #0]
 8001ef0:	8093      	strh	r3, [r2, #4]
 8001ef2:	8113      	strh	r3, [r2, #8]
 8001ef4:	8193      	strh	r3, [r2, #12]
 8001ef6:	8213      	strh	r3, [r2, #16]
 8001ef8:	8293      	strh	r3, [r2, #20]
 8001efa:	8313      	strh	r3, [r2, #24]
 8001efc:	8393      	strh	r3, [r2, #28]
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 8001efe:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <dcd_handle_bus_reset+0x54>)
 8001f00:	8011      	strh	r1, [r2, #0]
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 8001f02:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <dcd_handle_bus_reset+0x58>)
 8001f04:	3c01      	subs	r4, #1
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8001f06:	72d3      	strb	r3, [r2, #11]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 8001f08:	75d3      	strb	r3, [r2, #23]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 8001f0a:	8113      	strh	r3, [r2, #8]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 8001f0c:	8293      	strh	r3, [r2, #20]
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 8001f0e:	f102 0218 	add.w	r2, r2, #24
 8001f12:	d1f7      	bne.n	8001f04 <dcd_handle_bus_reset+0x24>
  dcd_edpt_open (0, &ep0OUT_desc);
 8001f14:	4909      	ldr	r1, [pc, #36]	; (8001f3c <dcd_handle_bus_reset+0x5c>)
 8001f16:	4620      	mov	r0, r4
 8001f18:	f7ff ff2e 	bl	8001d78 <dcd_edpt_open>
  dcd_edpt_open (0, &ep0IN_desc);
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4908      	ldr	r1, [pc, #32]	; (8001f40 <dcd_handle_bus_reset+0x60>)
 8001f20:	f7ff ff2a 	bl	8001d78 <dcd_edpt_open>
  USB->DADDR = USB_DADDR_EF; // Set enable flag, and leaving the device address as zero.
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	4b02      	ldr	r3, [pc, #8]	; (8001f30 <dcd_handle_bus_reset+0x50>)
 8001f28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	bf00      	nop
 8001f30:	40005c00 	.word	0x40005c00
 8001f34:	200006d0 	.word	0x200006d0
 8001f38:	200006d4 	.word	0x200006d4
 8001f3c:	080035cf 	.word	0x080035cf
 8001f40:	080035c8 	.word	0x080035c8

08001f44 <dcd_init>:
{
 8001f44:	b510      	push	{r4, lr}
 8001f46:	23c8      	movs	r3, #200	; 0xc8
 8001f48:	4604      	mov	r4, r0
    asm("NOP");
 8001f4a:	bf00      	nop
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	d1fc      	bne.n	8001f4a <dcd_init+0x6>
  USB->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 8001f50:	2303      	movs	r3, #3
 8001f52:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <dcd_init+0x70>)
 8001f54:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8001f58:	23c8      	movs	r3, #200	; 0xc8
    asm("NOP");
 8001f5a:	bf00      	nop
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	d1fc      	bne.n	8001f5a <dcd_init+0x16>
  *reg = (uint16_t)(*reg & ~mask);
 8001f60:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001f64:	f023 0302 	bic.w	r3, r3, #2
 8001f68:	041b      	lsls	r3, r3, #16
 8001f6a:	0c1b      	lsrs	r3, r3, #16
 8001f6c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8001f70:	23c8      	movs	r3, #200	; 0xc8
    asm("NOP");
 8001f72:	bf00      	nop
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8001f74:	3b01      	subs	r3, #1
 8001f76:	d1fc      	bne.n	8001f72 <dcd_init+0x2e>
  USB->CNTR = 0; // Enable USB
 8001f78:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <dcd_init+0x70>)
 8001f7a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 8001f7e:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  USB->ISTR = 0; // Clear pending interrupts
 8001f82:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001f86:	8013      	strh	r3, [r2, #0]
 8001f88:	8093      	strh	r3, [r2, #4]
 8001f8a:	8113      	strh	r3, [r2, #8]
 8001f8c:	8193      	strh	r3, [r2, #12]
 8001f8e:	8213      	strh	r3, [r2, #16]
 8001f90:	8293      	strh	r3, [r2, #20]
 8001f92:	8313      	strh	r3, [r2, #24]
 8001f94:	8393      	strh	r3, [r2, #28]
  USB->CNTR |= USB_CNTR_RESETM | (USE_SOF ? USB_CNTR_SOFM : 0) | USB_CNTR_ESOFM | USB_CNTR_CTRM | USB_CNTR_SUSPM | USB_CNTR_WKUPM;
 8001f96:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f443 431d 	orr.w	r3, r3, #40192	; 0x9d00
 8001fa0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  dcd_handle_bus_reset();
 8001fa4:	f7ff ff9c 	bl	8001ee0 <dcd_handle_bus_reset>
  if ( dcd_connect ) dcd_connect(rhport);
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <dcd_init+0x74>)
 8001faa:	b113      	cbz	r3, 8001fb2 <dcd_init+0x6e>
 8001fac:	4620      	mov	r0, r4
 8001fae:	f3af 8000 	nop.w
}
 8001fb2:	bd10      	pop	{r4, pc}
 8001fb4:	40005c00 	.word	0x40005c00
 8001fb8:	00000000 	.word	0x00000000

08001fbc <dcd_int_handler>:
void dcd_int_handler(uint8_t rhport) {
 8001fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t int_status = USB->ISTR;
 8001fc0:	4dbb      	ldr	r5, [pc, #748]	; (80022b0 <dcd_int_handler+0x2f4>)
void dcd_int_handler(uint8_t rhport) {
 8001fc2:	b087      	sub	sp, #28
  uint32_t int_status = USB->ISTR;
 8001fc4:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
  if(int_status & USB_ISTR_RESET) {
 8001fc8:	0558      	lsls	r0, r3, #21
  uint32_t int_status = USB->ISTR;
 8001fca:	b29f      	uxth	r7, r3
  if(int_status & USB_ISTR_RESET) {
 8001fcc:	d512      	bpl.n	8001ff4 <dcd_int_handler+0x38>
  USB->ISTR = ~mask;
 8001fce:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8001fd2:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    dcd_handle_bus_reset();
 8001fd6:	f7ff ff83 	bl	8001ee0 <dcd_handle_bus_reset>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2101      	movs	r1, #1
  dcd_event_handler(&event, in_isr);
 8001fde:	a803      	add	r0, sp, #12
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8001fe0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001fe4:	9305      	str	r3, [sp, #20]
 8001fe6:	f88d 100d 	strb.w	r1, [sp, #13]
  dcd_event_handler(&event, in_isr);
 8001fea:	f7ff f8af 	bl	800114c <dcd_event_handler>
}
 8001fee:	b007      	add	sp, #28
 8001ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (int_status & USB_ISTR_CTR)
 8001ff4:	0439      	lsls	r1, r7, #16
 8001ff6:	d507      	bpl.n	8002008 <dcd_int_handler+0x4c>
  regVal &= USB_EPREG_MASK;
 8001ff8:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 80022b4 <dcd_int_handler+0x2f8>
 8001ffc:	4eae      	ldr	r6, [pc, #696]	; (80022b8 <dcd_int_handler+0x2fc>)
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 8001ffe:	f8b5 2044 	ldrh.w	r2, [r5, #68]	; 0x44
 8002002:	0411      	lsls	r1, r2, #16
 8002004:	b293      	uxth	r3, r2
 8002006:	d454      	bmi.n	80020b2 <dcd_int_handler+0xf6>
  if (int_status & USB_ISTR_WKUP)
 8002008:	04fa      	lsls	r2, r7, #19
 800200a:	d51f      	bpl.n	800204c <dcd_int_handler+0x90>
  *reg = (uint16_t)(*reg & ~mask);
 800200c:	4aa8      	ldr	r2, [pc, #672]	; (80022b0 <dcd_int_handler+0x2f4>)
  dcd_event_handler(&event, in_isr);
 800200e:	2101      	movs	r1, #1
 8002010:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002014:	a803      	add	r0, sp, #12
 8002016:	f023 0304 	bic.w	r3, r3, #4
 800201a:	041b      	lsls	r3, r3, #16
 800201c:	0c1b      	lsrs	r3, r3, #16
 800201e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8002022:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002026:	f023 0308 	bic.w	r3, r3, #8
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  USB->ISTR = ~mask;
 8002032:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002036:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800203a:	2300      	movs	r3, #0
 800203c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002040:	9305      	str	r3, [sp, #20]
 8002042:	2305      	movs	r3, #5
 8002044:	f88d 300d 	strb.w	r3, [sp, #13]
  dcd_event_handler(&event, in_isr);
 8002048:	f7ff f880 	bl	800114c <dcd_event_handler>
  if (int_status & USB_ISTR_SUSP)
 800204c:	053a      	lsls	r2, r7, #20
 800204e:	d51d      	bpl.n	800208c <dcd_int_handler+0xd0>
    USB->CNTR |= USB_CNTR_FSUSP;
 8002050:	4b97      	ldr	r3, [pc, #604]	; (80022b0 <dcd_int_handler+0x2f4>)
 8002052:	2101      	movs	r1, #1
 8002054:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002058:	a803      	add	r0, sp, #12
 800205a:	b292      	uxth	r2, r2
 800205c:	f042 0208 	orr.w	r2, r2, #8
 8002060:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    USB->CNTR |= USB_CNTR_LPMODE;
 8002064:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002068:	b292      	uxth	r2, r2
 800206a:	f042 0204 	orr.w	r2, r2, #4
 800206e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USB->ISTR = ~mask;
 8002072:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8002076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800207a:	2300      	movs	r3, #0
 800207c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002080:	9305      	str	r3, [sp, #20]
 8002082:	2304      	movs	r3, #4
 8002084:	f88d 300d 	strb.w	r3, [sp, #13]
  dcd_event_handler(&event, in_isr);
 8002088:	f7ff f860 	bl	800114c <dcd_event_handler>
  if(int_status & USB_ISTR_ESOF) {
 800208c:	05fb      	lsls	r3, r7, #23
 800208e:	d5ae      	bpl.n	8001fee <dcd_int_handler+0x32>
    if(remoteWakeCountdown == 1u)
 8002090:	498a      	ldr	r1, [pc, #552]	; (80022bc <dcd_int_handler+0x300>)
 8002092:	780a      	ldrb	r2, [r1, #0]
 8002094:	2a01      	cmp	r2, #1
 8002096:	f040 8101 	bne.w	800229c <dcd_int_handler+0x2e0>
      USB->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 800209a:	4885      	ldr	r0, [pc, #532]	; (80022b0 <dcd_int_handler+0x2f4>)
 800209c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80020a0:	f023 0310 	bic.w	r3, r3, #16
 80020a4:	041b      	lsls	r3, r3, #16
 80020a6:	0c1b      	lsrs	r3, r3, #16
 80020a8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      remoteWakeCountdown--;
 80020ac:	3a01      	subs	r2, #1
 80020ae:	700a      	strb	r2, [r1, #0]
 80020b0:	e0f7      	b.n	80022a2 <dcd_int_handler+0x2e6>
    if ((wIstr & USB_ISTR_DIR) == 0U) /* TX/IN */
 80020b2:	f003 040f 	and.w	r4, r3, #15
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80020b6:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80020ba:	f10a 4280 	add.w	r2, sl, #1073741824	; 0x40000000
 80020be:	f013 0110 	ands.w	r1, r3, #16
 80020c2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80020c6:	d126      	bne.n	8002116 <dcd_int_handler+0x15a>
  return *reg;
 80020c8:	8813      	ldrh	r3, [r2, #0]
  if((wEPRegVal & USB_EP_CTR_TX) == 0U)
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	d597      	bpl.n	8001ffe <dcd_int_handler+0x42>
  if((xfer->total_len != xfer->queued_len)) /* TX not complete */
 80020ce:	2018      	movs	r0, #24
 80020d0:	8813      	ldrh	r3, [r2, #0]
 80020d2:	4360      	muls	r0, r4
 80020d4:	b29b      	uxth	r3, r3
  regVal &= USB_EPREG_MASK;
 80020d6:	ea03 0308 	and.w	r3, r3, r8
  regVal &= ~USB_EP_CTR_TX;
 80020da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  *reg = (uint16_t)wRegValue;
 80020de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e2:	8013      	strh	r3, [r2, #0]
 80020e4:	1833      	adds	r3, r6, r0
 80020e6:	8a1a      	ldrh	r2, [r3, #16]
 80020e8:	8a5b      	ldrh	r3, [r3, #18]
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d005      	beq.n	80020fa <dcd_int_handler+0x13e>
  return &xfer_status[epnum][dir];
 80020ee:	300c      	adds	r0, #12
      dcd_transmit_packet(xfer, EPindex);
 80020f0:	4621      	mov	r1, r4
 80020f2:	4430      	add	r0, r6
 80020f4:	f7ff fdb8 	bl	8001c68 <dcd_transmit_packet>
 80020f8:	e781      	b.n	8001ffe <dcd_int_handler+0x42>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80020fa:	2207      	movs	r2, #7
 80020fc:	e9cd 1103 	strd	r1, r1, [sp, #12]
    dcd_event_xfer_complete(0, (uint8_t)(0x80 + EPindex), xfer->total_len, XFER_RESULT_SUCCESS, true);
 8002100:	3c80      	subs	r4, #128	; 0x80
  dcd_event_handler(&event, in_isr);
 8002102:	2101      	movs	r1, #1
 8002104:	a803      	add	r0, sp, #12
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8002106:	f88d 200d 	strb.w	r2, [sp, #13]
  event.xfer_complete.ep_addr = ep_addr;
 800210a:	f88d 4010 	strb.w	r4, [sp, #16]
 800210e:	9305      	str	r3, [sp, #20]
  dcd_event_handler(&event, in_isr);
 8002110:	f7ff f81c 	bl	800114c <dcd_event_handler>
}
 8002114:	e773      	b.n	8001ffe <dcd_int_handler+0x42>
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 8002116:	f10a 0003 	add.w	r0, sl, #3
  return *reg;
 800211a:	f8b2 b000 	ldrh.w	fp, [r2]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 800211e:	f7ff fd7d 	bl	8001c1c <pcd_btable_word_ptr.constprop.0>
  return *reg;
 8002122:	fa1f fb8b 	uxth.w	fp, fp
  return *regPtr & 0x3ffU;
 8002126:	8801      	ldrh	r1, [r0, #0]
  if((wEPRegVal & USB_EP_CTR_RX) == 0U)
 8002128:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
 800212c:	b289      	uxth	r1, r1
 800212e:	f43f af66 	beq.w	8001ffe <dcd_int_handler+0x42>
 8002132:	f3c1 0909 	ubfx	r9, r1, #0, #10
  if((EPindex == 0U) && ((wEPRegVal & USB_EP_SETUP) != 0U)) /* Setup packet */
 8002136:	2c00      	cmp	r4, #0
 8002138:	d14b      	bne.n	80021d2 <dcd_int_handler+0x216>
 800213a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 800213e:	d051      	beq.n	80021e4 <dcd_int_handler+0x228>
    if(count == 8) // Setup packet should always be 8 bytes. If not, ignore it, and try again.
 8002140:	f1b9 0f08 	cmp.w	r9, #8
 8002144:	d137      	bne.n	80021b6 <dcd_int_handler+0x1fa>
      pcd_set_ep_rx_status(USB,0u,USB_EP_RX_NAK);
 8002146:	4620      	mov	r0, r4
 8002148:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800214c:	f7ff fd4a 	bl	8001be4 <pcd_set_ep_rx_status.constprop.0>
  return *reg;
 8002150:	882b      	ldrh	r3, [r5, #0]
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 8002152:	2002      	movs	r0, #2
 8002154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	0c1b      	lsrs	r3, r3, #16
 8002160:	f083 0320 	eor.w	r3, r3, #32
 8002164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  *reg = (uint16_t)wRegValue;
 800216c:	802b      	strh	r3, [r5, #0]
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 800216e:	f7ff fd55 	bl	8001c1c <pcd_btable_word_ptr.constprop.0>
  // it volatile so that it won't do that.
  __IO const uint16_t *pdwVal;
  uint32_t temp;

  pdwVal = &pma[PMA_STRIDE*(src>>1)];
  uint8_t *dstVal = (uint8_t*)dst;
 8002172:	a901      	add	r1, sp, #4
      dcd_read_packet_memory(userMemBuf, *pcd_ep_rx_address_ptr(USB,EPindex), 8);
 8002174:	8803      	ldrh	r3, [r0, #0]
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8002176:	4608      	mov	r0, r1
 8002178:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002182:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000

  for (i = n; i != 0U; i--)
 8002186:	f103 0410 	add.w	r4, r3, #16
  {
    temp = *pdwVal;
 800218a:	f833 2b04 	ldrh.w	r2, [r3], #4
 800218e:	b292      	uxth	r2, r2
    pdwVal += PMA_STRIDE;
    *dstVal++ = ((temp >> 0) & 0xFF);
 8002190:	f801 2b02 	strb.w	r2, [r1], #2
  for (i = n; i != 0U; i--)
 8002194:	42a3      	cmp	r3, r4
    *dstVal++ = ((temp >> 8) & 0xFF);
 8002196:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800219a:	f801 2c01 	strb.w	r2, [r1, #-1]
  for (i = n; i != 0U; i--)
 800219e:	d1f4      	bne.n	800218a <dcd_int_handler+0x1ce>
  memcpy(&event.setup_received, setup, 8);
 80021a0:	c803      	ldmia	r0, {r0, r1}
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 80021a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021a6:	9303      	str	r3, [sp, #12]
  memcpy(&event.setup_received, setup, 8);
 80021a8:	ab06      	add	r3, sp, #24
 80021aa:	e903 0003 	stmdb	r3, {r0, r1}
  dcd_event_handler(&event, in_isr);
 80021ae:	2101      	movs	r1, #1
 80021b0:	a803      	add	r0, sp, #12
 80021b2:	f7fe ffcb 	bl	800114c <dcd_event_handler>
    pcd_set_ep_rx_cnt(USB, EPindex, CFG_TUD_ENDPOINT0_SIZE);
 80021b6:	2140      	movs	r1, #64	; 0x40
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff fd3d 	bl	8001c38 <pcd_set_ep_rx_cnt.constprop.0>
  return *reg;
 80021be:	882b      	ldrh	r3, [r5, #0]
 80021c0:	b29b      	uxth	r3, r3
  regVal &= USB_EPREG_MASK;
 80021c2:	ea03 0308 	and.w	r3, r3, r8
  regVal &= ~USB_EP_CTR_RX;
 80021c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  *reg = (uint16_t)wRegValue;
 80021ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ce:	802b      	strh	r3, [r5, #0]
}
 80021d0:	e715      	b.n	8001ffe <dcd_int_handler+0x42>
  return *reg;
 80021d2:	8813      	ldrh	r3, [r2, #0]
 80021d4:	b29b      	uxth	r3, r3
  regVal &= USB_EPREG_MASK;
 80021d6:	ea03 0308 	and.w	r3, r3, r8
  regVal &= ~USB_EP_CTR_RX;
 80021da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  *reg = (uint16_t)wRegValue;
 80021de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e2:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 80021e4:	f1b9 0f00 	cmp.w	r9, #0
 80021e8:	d027      	beq.n	800223a <dcd_int_handler+0x27e>
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), *pcd_ep_rx_address_ptr(USB,EPindex), count);
 80021ea:	2318      	movs	r3, #24
 80021ec:	4363      	muls	r3, r4
 80021ee:	18f2      	adds	r2, r6, r3
 80021f0:	88d2      	ldrh	r2, [r2, #6]
 80021f2:	58f3      	ldr	r3, [r6, r3]
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 80021f4:	f10a 0002 	add.w	r0, sl, #2
 80021f8:	eb03 0b02 	add.w	fp, r3, r2
 80021fc:	f7ff fd0e 	bl	8001c1c <pcd_btable_word_ptr.constprop.0>
 8002200:	8803      	ldrh	r3, [r0, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8002202:	4658      	mov	r0, fp
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8002204:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  uint32_t n = (uint32_t)wNBytes >> 1U;
 800220e:	ea4f 0c59 	mov.w	ip, r9, lsr #1
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8002212:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  for (i = n; i != 0U; i--)
 8002216:	eb03 0e8c 	add.w	lr, r3, ip, lsl #2
 800221a:	459e      	cmp	lr, r3
 800221c:	f100 0002 	add.w	r0, r0, #2
 8002220:	d126      	bne.n	8002270 <dcd_int_handler+0x2b4>
  }

  if (wNBytes % 2)
 8002222:	07c8      	lsls	r0, r1, #31
  {
    temp = *pdwVal;
 8002224:	bf44      	itt	mi
 8002226:	f8be 3000 	ldrhmi.w	r3, [lr]
    pdwVal += PMA_STRIDE;
    *dstVal++ = ((temp >> 0) & 0xFF);
 800222a:	f80b 301c 	strbmi.w	r3, [fp, ip, lsl #1]
      xfer->queued_len = (uint16_t)(xfer->queued_len + count);
 800222e:	2318      	movs	r3, #24
 8002230:	fb03 6304 	mla	r3, r3, r4, r6
 8002234:	88da      	ldrh	r2, [r3, #6]
 8002236:	444a      	add	r2, r9
 8002238:	80da      	strh	r2, [r3, #6]
    if ((count < xfer->max_packet_size) || (xfer->queued_len == xfer->total_len))
 800223a:	2218      	movs	r2, #24
 800223c:	fb02 6204 	mla	r2, r2, r4, r6
 8002240:	7a91      	ldrb	r1, [r2, #10]
 8002242:	88d0      	ldrh	r0, [r2, #6]
 8002244:	4549      	cmp	r1, r9
 8002246:	d802      	bhi.n	800224e <dcd_int_handler+0x292>
 8002248:	8893      	ldrh	r3, [r2, #4]
 800224a:	4283      	cmp	r3, r0
 800224c:	d119      	bne.n	8002282 <dcd_int_handler+0x2c6>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800224e:	2300      	movs	r3, #0
 8002250:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002254:	2307      	movs	r3, #7
  event.xfer_complete.len     = xferred_bytes;
 8002256:	9005      	str	r0, [sp, #20]
  dcd_event_handler(&event, in_isr);
 8002258:	2101      	movs	r1, #1
 800225a:	a803      	add	r0, sp, #12
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800225c:	f88d 300d 	strb.w	r3, [sp, #13]
      dcd_event_xfer_complete(0, EPindex, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 8002260:	f88d 4010 	strb.w	r4, [sp, #16]
  dcd_event_handler(&event, in_isr);
 8002264:	f7fe ff72 	bl	800114c <dcd_event_handler>
  if(EPindex == 0u)
 8002268:	2c00      	cmp	r4, #0
 800226a:	f47f aec8 	bne.w	8001ffe <dcd_int_handler+0x42>
 800226e:	e7a2      	b.n	80021b6 <dcd_int_handler+0x1fa>
    temp = *pdwVal;
 8002270:	f833 2b04 	ldrh.w	r2, [r3], #4
 8002274:	b292      	uxth	r2, r2
    *dstVal++ = ((temp >> 0) & 0xFF);
 8002276:	f800 2c02 	strb.w	r2, [r0, #-2]
    *dstVal++ = ((temp >> 8) & 0xFF);
 800227a:	0a12      	lsrs	r2, r2, #8
 800227c:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (i = n; i != 0U; i--)
 8002280:	e7cb      	b.n	800221a <dcd_int_handler+0x25e>
      uint32_t remaining = (uint32_t)xfer->total_len - (uint32_t)xfer->queued_len;
 8002282:	1a1b      	subs	r3, r3, r0
      if(remaining >= xfer->max_packet_size) {
 8002284:	4299      	cmp	r1, r3
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 8002286:	bf88      	it	hi
 8002288:	4619      	movhi	r1, r3
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff fcd4 	bl	8001c38 <pcd_set_ep_rx_cnt.constprop.0>
      pcd_set_ep_rx_status(USB, EPindex, USB_EP_RX_VALID);
 8002290:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002294:	4620      	mov	r0, r4
 8002296:	f7ff fca5 	bl	8001be4 <pcd_set_ep_rx_status.constprop.0>
 800229a:	e7e5      	b.n	8002268 <dcd_int_handler+0x2ac>
    if(remoteWakeCountdown > 0u)
 800229c:	2a00      	cmp	r2, #0
 800229e:	f47f af05 	bne.w	80020ac <dcd_int_handler+0xf0>
  USB->ISTR = ~mask;
 80022a2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80022a6:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <dcd_int_handler+0x2f4>)
 80022a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 80022ac:	e69f      	b.n	8001fee <dcd_int_handler+0x32>
 80022ae:	bf00      	nop
 80022b0:	40005c00 	.word	0x40005c00
 80022b4:	ffff8f8f 	.word	0xffff8f8f
 80022b8:	200006d4 	.word	0x200006d4
 80022bc:	200006d2 	.word	0x200006d2

080022c0 <dcd_edpt_close_all>:
}
 80022c0:	4770      	bx	lr
	...

080022c4 <dcd_edpt_xfer>:
{
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  xfer->buffer = buffer;
 80022c6:	2618      	movs	r6, #24
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80022c8:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80022cc:	09cd      	lsrs	r5, r1, #7
 80022ce:	210c      	movs	r1, #12
 80022d0:	4366      	muls	r6, r4
 80022d2:	fb01 6105 	mla	r1, r1, r5, r6
 80022d6:	4811      	ldr	r0, [pc, #68]	; (800231c <dcd_edpt_xfer+0x58>)
 80022d8:	1847      	adds	r7, r0, r1
 80022da:	5042      	str	r2, [r0, r1]
  xfer->queued_len = 0;
 80022dc:	2100      	movs	r1, #0
  xfer->total_len = total_bytes;
 80022de:	80bb      	strh	r3, [r7, #4]
  xfer->queued_len = 0;
 80022e0:	80f9      	strh	r1, [r7, #6]
  if ( dir == TUSB_DIR_OUT )
 80022e2:	b9a5      	cbnz	r5, 800230e <dcd_edpt_xfer+0x4a>
    if (epnum == 0 && buffer == NULL)
 80022e4:	b914      	cbnz	r4, 80022ec <dcd_edpt_xfer+0x28>
 80022e6:	b90a      	cbnz	r2, 80022ec <dcd_edpt_xfer+0x28>
        xfer->buffer = (uint8_t*)_setup_packet;
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <dcd_edpt_xfer+0x5c>)
 80022ea:	6002      	str	r2, [r0, #0]
    if(total_bytes > xfer->max_packet_size)
 80022ec:	2218      	movs	r2, #24
 80022ee:	fb02 0004 	mla	r0, r2, r4, r0
 80022f2:	7a81      	ldrb	r1, [r0, #10]
      pcd_set_ep_rx_cnt(USB,epnum,total_bytes);
 80022f4:	4620      	mov	r0, r4
    if(total_bytes > xfer->max_packet_size)
 80022f6:	4299      	cmp	r1, r3
      pcd_set_ep_rx_cnt(USB,epnum,total_bytes);
 80022f8:	bf28      	it	cs
 80022fa:	4619      	movcs	r1, r3
 80022fc:	f7ff fc9c 	bl	8001c38 <pcd_set_ep_rx_cnt.constprop.0>
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_VALID);
 8002300:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff fc6d 	bl	8001be4 <pcd_set_ep_rx_status.constprop.0>
}
 800230a:	2001      	movs	r0, #1
 800230c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return &xfer_status[epnum][dir];
 800230e:	360c      	adds	r6, #12
    dcd_transmit_packet(xfer,epnum);
 8002310:	4621      	mov	r1, r4
 8002312:	4430      	add	r0, r6
 8002314:	f7ff fca8 	bl	8001c68 <dcd_transmit_packet>
 8002318:	e7f7      	b.n	800230a <dcd_edpt_xfer+0x46>
 800231a:	bf00      	nop
 800231c:	200006d4 	.word	0x200006d4
 8002320:	200006b8 	.word	0x200006b8

08002324 <dcd_set_address>:
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8002324:	2300      	movs	r3, #0
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	461a      	mov	r2, r3
 800232a:	f7ff bfcb 	b.w	80022c4 <dcd_edpt_xfer>

0800232e <dcd_edpt_stall>:
  if (ep_addr & 0x80)
 800232e:	060b      	lsls	r3, r1, #24
{
 8002330:	4608      	mov	r0, r1
  if (ep_addr & 0x80)
 8002332:	d515      	bpl.n	8002360 <dcd_edpt_stall+0x32>
    pcd_set_ep_tx_status(USB, ep_addr & 0x7F, USB_EP_TX_STALL);
 8002334:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8002338:	0080      	lsls	r0, r0, #2
 800233a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800233e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  return *reg;
 8002342:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8002344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	f083 0310 	eor.w	r3, r3, #16
 8002354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  *reg = (uint16_t)wRegValue;
 800235c:	8003      	strh	r3, [r0, #0]
}
 800235e:	4770      	bx	lr
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
 8002360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002364:	f7ff bc3e 	b.w	8001be4 <pcd_set_ep_rx_status.constprop.0>

08002368 <dcd_edpt_clear_stall>:
{
 8002368:	b508      	push	{r3, lr}
  if (ep_addr & 0x80)
 800236a:	060b      	lsls	r3, r1, #24
{
 800236c:	460a      	mov	r2, r1
  if (ep_addr & 0x80)
 800236e:	d518      	bpl.n	80023a2 <dcd_edpt_clear_stall+0x3a>
    pcd_set_ep_tx_status(USB,ep_addr, USB_EP_TX_NAK);
 8002370:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8002374:	0082      	lsls	r2, r0, #2
 8002376:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800237a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  return *reg;
 800237e:	8813      	ldrh	r3, [r2, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8002380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	0c1b      	lsrs	r3, r3, #16
 800238c:	f083 0320 	eor.w	r3, r3, #32
 8002390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  *reg = (uint16_t)wRegValue;
 8002398:	8013      	strh	r3, [r2, #0]
}
 800239a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pcd_clear_tx_dtog(USB,ep_addr);
 800239e:	f7ff bbf7 	b.w	8001b90 <pcd_clear_tx_dtog.constprop.0>
    pcd_clear_rx_dtog(USB,ep_addr);
 80023a2:	4608      	mov	r0, r1
 80023a4:	f7ff fc09 	bl	8001bba <pcd_clear_rx_dtog.constprop.0>
}
 80023a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
 80023ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023b0:	4610      	mov	r0, r2
 80023b2:	f7ff bc17 	b.w	8001be4 <pcd_set_ep_rx_status.constprop.0>

080023b6 <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
 80023b6:	b508      	push	{r3, lr}
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7fe fe7f 	bl	80010bc <tud_init>
 80023be:	b930      	cbnz	r0, 80023ce <tusb_init+0x18>
 80023c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80023c4:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 80023c8:	07db      	lsls	r3, r3, #31
 80023ca:	d500      	bpl.n	80023ce <tusb_init+0x18>
 80023cc:	be00      	bkpt	0x0000
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
}
 80023ce:	bd08      	pop	{r3, pc}

080023d0 <tusb_inited>:
bool tusb_inited(void)
{
  bool ret = false;

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
 80023d0:	f7fe be6c 	b.w	80010ac <tud_inited>

080023d4 <tu_edpt_validate>:
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80023d4:	8883      	ldrh	r3, [r0, #4]
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 80023d6:	78c0      	ldrb	r0, [r0, #3]
 80023d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023dc:	f000 0003 	and.w	r0, r0, #3
 80023e0:	2802      	cmp	r0, #2
 80023e2:	d015      	beq.n	8002410 <tu_edpt_validate+0x3c>
 80023e4:	2803      	cmp	r0, #3
 80023e6:	d01d      	beq.n	8002424 <tu_edpt_validate+0x50>
 80023e8:	2801      	cmp	r0, #1
 80023ea:	d10f      	bne.n	800240c <tu_edpt_validate+0x38>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 80023ec:	2902      	cmp	r1, #2
 80023ee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80023f2:	bf08      	it	eq
 80023f4:	f44f 6280 	moveq.w	r2, #1024	; 0x400
      TU_ASSERT(max_packet_size <= spec_size);
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d20f      	bcs.n	800241c <tu_edpt_validate+0x48>
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
      TU_ASSERT(max_packet_size <= spec_size);
 80023fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002400:	f8d3 0df0 	ldr.w	r0, [r3, #3568]	; 0xdf0
 8002404:	f010 0001 	ands.w	r0, r0, #1
 8002408:	d008      	beq.n	800241c <tu_edpt_validate+0x48>
 800240a:	be00      	bkpt	0x0000
  switch (desc_ep->bmAttributes.xfer)
 800240c:	2000      	movs	r0, #0
 800240e:	4770      	bx	lr
      if (speed == TUSB_SPEED_HIGH)
 8002410:	2902      	cmp	r1, #2
 8002412:	d104      	bne.n	800241e <tu_edpt_validate+0x4a>
        TU_ASSERT(max_packet_size == 512);
 8002414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002418:	d1f0      	bne.n	80023fc <tu_edpt_validate+0x28>
    break;

    default: return false;
  }

  return true;
 800241a:	2001      	movs	r0, #1
}
 800241c:	4770      	bx	lr
        TU_ASSERT(max_packet_size <= 64);
 800241e:	2b40      	cmp	r3, #64	; 0x40
 8002420:	d9fb      	bls.n	800241a <tu_edpt_validate+0x46>
 8002422:	e7eb      	b.n	80023fc <tu_edpt_validate+0x28>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8002424:	2902      	cmp	r1, #2
 8002426:	bf0c      	ite	eq
 8002428:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 800242c:	2240      	movne	r2, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
 800242e:	429a      	cmp	r2, r3
 8002430:	d2f3      	bcs.n	800241a <tu_edpt_validate+0x46>
 8002432:	e7e3      	b.n	80023fc <tu_edpt_validate+0x28>

08002434 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8002434:	b530      	push	{r4, r5, lr}
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
 8002436:	440a      	add	r2, r1

  while( p_desc < desc_end )
 8002438:	4291      	cmp	r1, r2
 800243a:	d300      	bcc.n	800243e <tu_edpt_bind_driver+0xa>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
    }

    p_desc = tu_desc_next(p_desc);
  }
}
 800243c:	bd30      	pop	{r4, r5, pc}
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800243e:	784c      	ldrb	r4, [r1, #1]
 8002440:	2c05      	cmp	r4, #5
 8002442:	d106      	bne.n	8002452 <tu_edpt_bind_driver+0x1e>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8002444:	788c      	ldrb	r4, [r1, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8002446:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800244a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800244e:	09e4      	lsrs	r4, r4, #7
 8002450:	552b      	strb	r3, [r5, r4]

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002452:	780c      	ldrb	r4, [r1, #0]
 8002454:	4421      	add	r1, r4
 8002456:	e7ef      	b.n	8002438 <tu_edpt_bind_driver+0x4>

08002458 <board_flash_init>:
// Board API
//--------------------------------------------------------------------+
void board_flash_init(void)
{

}
 8002458:	4770      	bx	lr

0800245a <board_flash_size>:

uint32_t board_flash_size(void)
{
  return BOARD_FLASH_SIZE;
}
 800245a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800245e:	4770      	bx	lr

08002460 <board_flash_read>:

void board_flash_read(uint32_t addr, void* buffer, uint32_t len)
{
 8002460:	460b      	mov	r3, r1
  memcpy(buffer, (void*) addr, len);
 8002462:	4601      	mov	r1, r0
 8002464:	4618      	mov	r0, r3
 8002466:	f001 b85d 	b.w	8003524 <memcpy>

0800246a <board_flash_flush>:
 800246a:	4770      	bx	lr

0800246c <board_flash_write>:
{
}

// TODO not working quite yet
void board_flash_write (uint32_t addr, void const *data, uint32_t len)
{
 800246c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246e:	b087      	sub	sp, #28
 8002470:	4605      	mov	r5, r0
 8002472:	460e      	mov	r6, r1
 8002474:	4617      	mov	r7, r2
  for ( uint32_t i = 0; i < SECTOR_COUNT; i++ )
 8002476:	2400      	movs	r4, #0
  // TODO skip matching contents
  HAL_FLASH_Unlock();
 8002478:	f000 fde2 	bl	8003040 <HAL_FLASH_Unlock>
  uint32_t sector_addr = FLASH_BASE_ADDR;
 800247c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if ( sector_addr + size > addr )
 8002480:	4618      	mov	r0, r3
 8002482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002486:	429d      	cmp	r5, r3
 8002488:	d206      	bcs.n	8002498 <board_flash_write+0x2c>
      erased_sectors[i] = 1;    // don't erase anymore - we will continue writing here!
 800248a:	2101      	movs	r1, #1
      erased = erased_sectors[i];
 800248c:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <board_flash_write+0x8c>)
 800248e:	5d13      	ldrb	r3, [r2, r4]
      erased_sectors[i] = 1;    // don't erase anymore - we will continue writing here!
 8002490:	5511      	strb	r1, [r2, r4]
  TUF2_ASSERT(sector);
 8002492:	b93c      	cbnz	r4, 80024a4 <board_flash_write+0x38>
  for ( uint32_t i = 0; i < size; i += sizeof(uint32_t) )
 8002494:	2400      	movs	r4, #0
 8002496:	e015      	b.n	80024c4 <board_flash_write+0x58>
    TUF2_ASSERT(sector_addr < FLASH_BASE_ADDR + BOARD_FLASH_SIZE);
 8002498:	2c3f      	cmp	r4, #63	; 0x3f
  for ( uint32_t i = 0; i < SECTOR_COUNT; i++ )
 800249a:	f104 0201 	add.w	r2, r4, #1
    TUF2_ASSERT(sector_addr < FLASH_BASE_ADDR + BOARD_FLASH_SIZE);
 800249e:	d0f9      	beq.n	8002494 <board_flash_write+0x28>
  for ( uint32_t i = 0; i < SECTOR_COUNT; i++ )
 80024a0:	4614      	mov	r4, r2
 80024a2:	e7ed      	b.n	8002480 <board_flash_write+0x14>
  if ( !erased && !is_blank(sector_addr, size) )
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f5      	bne.n	8002494 <board_flash_write+0x28>
    if ( *(uint32_t*) (addr + i) != 0xffffffff )
 80024a8:	58c2      	ldr	r2, [r0, r3]
 80024aa:	3201      	adds	r2, #1
 80024ac:	d119      	bne.n	80024e2 <board_flash_write+0x76>
  for ( uint32_t i = 0; i < size; i += sizeof(uint32_t) )
 80024ae:	3304      	adds	r3, #4
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b4:	d1f8      	bne.n	80024a8 <board_flash_write+0x3c>
 80024b6:	e7ed      	b.n	8002494 <board_flash_write+0x28>
    if ( FLASH_WaitForLastOperation(HAL_MAX_DELAY) != HAL_OK )
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f000 fddc 	bl	8003078 <FLASH_WaitForLastOperation>
 80024c0:	b950      	cbnz	r0, 80024d8 <board_flash_write+0x6c>
  for ( int i = 0; i < len; i += 4 )
 80024c2:	3404      	adds	r4, #4
 80024c4:	42a7      	cmp	r7, r4
 80024c6:	dd07      	ble.n	80024d8 <board_flash_write+0x6c>
    if ( HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, dst + i, (uint64_t) data) != HAL_OK )
 80024c8:	2300      	movs	r3, #0
 80024ca:	2002      	movs	r0, #2
 80024cc:	5932      	ldr	r2, [r6, r4]
 80024ce:	1929      	adds	r1, r5, r4
 80024d0:	f000 fdfc 	bl	80030cc <HAL_FLASH_Program>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d0ef      	beq.n	80024b8 <board_flash_write+0x4c>
  flash_write(addr, data, len);
  HAL_FLASH_Lock();
}
 80024d8:	b007      	add	sp, #28
 80024da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  HAL_FLASH_Lock();
 80024de:	f000 bdc1 	b.w	8003064 <HAL_FLASH_Lock>
    init.Banks       = FLASH_BANK_1;
 80024e2:	2301      	movs	r3, #1
 80024e4:	2200      	movs	r2, #0
    init.NbPages     = size/1024;
 80024e6:	e9cd 0304 	strd	r0, r3, [sp, #16]
    HAL_FLASHEx_Erase(&init, &page_error);
 80024ea:	a901      	add	r1, sp, #4
 80024ec:	a802      	add	r0, sp, #8
    init.Banks       = FLASH_BANK_1;
 80024ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_FLASHEx_Erase(&init, &page_error);
 80024f2:	f000 fe4d 	bl	8003190 <HAL_FLASHEx_Erase>
    TUF2_ASSERT( is_blank(sector_addr, size) );
 80024f6:	e7cd      	b.n	8002494 <board_flash_write+0x28>
 80024f8:	20000794 	.word	0x20000794

080024fc <board_flash_erase_app>:
 80024fc:	4770      	bx	lr
	...

08002500 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8002500:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002504:	4905      	ldr	r1, [pc, #20]	; (800251c <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002508:	68ca      	ldr	r2, [r1, #12]
 800250a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800250e:	4313      	orrs	r3, r2
 8002510:	60cb      	str	r3, [r1, #12]
 8002512:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002516:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002518:	e7fd      	b.n	8002516 <__NVIC_SystemReset+0x16>
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00
 8002520:	05fa0004 	.word	0x05fa0004

08002524 <board_init>:
static bool is_usb = false;



void board_init(void)
{
 8002524:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002526:	2400      	movs	r4, #0
}

void board_timer_stop(void)
{
  //SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
  timer_max = 0;
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <board_init+0x7c>)
{
 800252a:	b088      	sub	sp, #32
  timer_max = 0;
 800252c:	601c      	str	r4, [r3, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <board_init+0x80>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002534:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	f042 0204 	orr.w	r2, r2, #4
 800253c:	619a      	str	r2, [r3, #24]
 800253e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	4d19      	ldr	r5, [pc, #100]	; (80025a8 <board_init+0x84>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	f002 0204 	and.w	r2, r2, #4
 8002546:	9200      	str	r2, [sp, #0]
 8002548:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	4628      	mov	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	f042 0208 	orr.w	r2, r2, #8
 8002552:	619a      	str	r2, [r3, #24]
 8002554:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002558:	f002 0208 	and.w	r2, r2, #8
 800255c:	9201      	str	r2, [sp, #4]
 800255e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	f042 0210 	orr.w	r2, r2, #16
 8002566:	619a      	str	r2, [r3, #24]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	f002 0210 	and.w	r2, r2, #16
 800256e:	9202      	str	r2, [sp, #8]
 8002570:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	f042 0220 	orr.w	r2, r2, #32
 8002578:	619a      	str	r2, [r3, #24]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	9303      	str	r3, [sp, #12]
 8002582:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002584:	2311      	movs	r3, #17
 8002586:	e9cd 6304 	strd	r6, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2302      	movs	r3, #2
 800258c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f000 fe53 	bl	8003238 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002592:	4622      	mov	r2, r4
 8002594:	4631      	mov	r1, r6
 8002596:	4628      	mov	r0, r5
 8002598:	f000 ff28 	bl	80033ec <HAL_GPIO_WritePin>
}
 800259c:	b008      	add	sp, #32
 800259e:	bd70      	pop	{r4, r5, r6, pc}
 80025a0:	20000014 	.word	0x20000014
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010800 	.word	0x40010800

080025ac <board_dfu_init>:
{
 80025ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80025ae:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80025b2:	2311      	movs	r3, #17
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80025b6:	e9cd 6300 	strd	r6, r3, [sp]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	4c12      	ldr	r4, [pc, #72]	; (8002608 <board_dfu_init+0x5c>)
 80025be:	4669      	mov	r1, sp
 80025c0:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	9303      	str	r3, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	9502      	str	r5, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f000 fe37 	bl	8003238 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80025ca:	462a      	mov	r2, r5
 80025cc:	4631      	mov	r1, r6
 80025ce:	4620      	mov	r0, r4
 80025d0:	f000 ff0c 	bl	80033ec <HAL_GPIO_WritePin>
  delay(delay_ms);
 80025d4:	20c8      	movs	r0, #200	; 0xc8
 80025d6:	f7fd feb5 	bl	8000344 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80025da:	2201      	movs	r2, #1
 80025dc:	4631      	mov	r1, r6
 80025de:	4620      	mov	r0, r4
 80025e0:	f000 ff04 	bl	80033ec <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	4669      	mov	r1, sp
 80025e6:	4620      	mov	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e8:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f000 fe25 	bl	8003238 <HAL_GPIO_Init>
  __HAL_RCC_USB_CLK_ENABLE();
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <board_dfu_init+0x60>)
 80025f0:	69da      	ldr	r2, [r3, #28]
 80025f2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025f6:	61da      	str	r2, [r3, #28]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	9b00      	ldr	r3, [sp, #0]
}
 8002602:	b004      	add	sp, #16
 8002604:	bd70      	pop	{r4, r5, r6, pc}
 8002606:	bf00      	nop
 8002608:	40010800 	.word	0x40010800
 800260c:	40021000 	.word	0x40021000

08002610 <board_dfu_complete>:
 8002610:	b508      	push	{r3, lr}
 8002612:	f7ff ff75 	bl	8002500 <__NVIC_SystemReset>
	...

08002618 <board_app_valid>:
  uint32_t sp = app_vector[0];
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <board_app_valid+0x28>)
 800261a:	681a      	ldr	r2, [r3, #0]
  uint32_t app_entry = app_vector[1];
 800261c:	6858      	ldr	r0, [r3, #4]
  if ((sp & 0xff000003) != 0x20000000) return false;
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <board_app_valid+0x2c>)
 8002620:	4013      	ands	r3, r2
 8002622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002626:	d109      	bne.n	800263c <board_app_valid+0x24>
  if (app_entry < BOARD_FLASH_APP_START || app_entry > BOARD_FLASH_APP_START + BOARD_FLASH_SIZE) {
 8002628:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 800262c:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8002630:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002634:	bf8c      	ite	hi
 8002636:	2000      	movhi	r0, #0
 8002638:	2001      	movls	r0, #1
 800263a:	4770      	bx	lr
  if ((sp & 0xff000003) != 0x20000000) return false;
 800263c:	2000      	movs	r0, #0
}
 800263e:	4770      	bx	lr
 8002640:	08004000 	.word	0x08004000
 8002644:	ff000003 	.word	0xff000003

08002648 <board_app_jump>:
{
 8002648:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <board_app_jump+0x58>)
  uint32_t sp = app_vector[0];
 800264c:	4c15      	ldr	r4, [pc, #84]	; (80026a4 <board_app_jump+0x5c>)
 800264e:	6825      	ldr	r5, [r4, #0]
  uint32_t app_entry = app_vector[1];
 8002650:	6866      	ldr	r6, [r4, #4]
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	f022 0204 	bic.w	r2, r2, #4
 8002658:	619a      	str	r2, [r3, #24]
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	f022 0208 	bic.w	r2, r2, #8
 8002660:	619a      	str	r2, [r3, #24]
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	f022 0210 	bic.w	r2, r2, #16
 8002668:	619a      	str	r2, [r3, #24]
  HAL_RCC_DeInit();
 800266a:	f000 fec5 	bl	80033f8 <HAL_RCC_DeInit>
  SysTick->CTRL = 0;
 800266e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  SysTick->LOAD = 0;
 8002676:	615a      	str	r2, [r3, #20]
  SysTick->VAL = 0;
 8002678:	619a      	str	r2, [r3, #24]
  NVIC->ICER[0] = 0xFFFFFFFF;
 800267a:	f04f 32ff 	mov.w	r2, #4294967295
 800267e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[1] = 0xFFFFFFFF;
 8002682:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ICER[2] = 0xFFFFFFFF;
 8002686:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  NVIC->ICER[3] = 0xFFFFFFFF;
 800268a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
  SCB->VTOR = (uint32_t) BOARD_FLASH_APP_START;
 800268e:	f8c3 4d08 	str.w	r4, [r3, #3336]	; 0xd08
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002692:	f385 8808 	msr	MSP, r5
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002696:	f385 8809 	msr	PSP, r5
  asm("bx %0" ::"r"(app_entry));
 800269a:	4730      	bx	r6
}
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08004000 	.word	0x08004000

080026a8 <board_usb_get_serial>:
  serial_id32[0] = STM32_UUID[0];
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <board_usb_get_serial+0x18>)
 80026aa:	f8d3 27e8 	ldr.w	r2, [r3, #2024]	; 0x7e8
 80026ae:	6002      	str	r2, [r0, #0]
  serial_id32[1] = STM32_UUID[1];
 80026b0:	f8d3 27ec 	ldr.w	r2, [r3, #2028]	; 0x7ec
 80026b4:	6042      	str	r2, [r0, #4]
  serial_id32[2] = STM32_UUID[2];
 80026b6:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 80026ba:	6083      	str	r3, [r0, #8]
}
 80026bc:	200c      	movs	r0, #12
 80026be:	4770      	bx	lr
 80026c0:	1ffff000 	.word	0x1ffff000

080026c4 <board_led_write>:
  if (state > 255/2)
 80026c4:	287f      	cmp	r0, #127	; 0x7f
    ledOn(_DEF_CH1);
 80026c6:	f04f 0000 	mov.w	r0, #0
  if (state > 255/2)
 80026ca:	d901      	bls.n	80026d0 <board_led_write+0xc>
    ledOn(_DEF_CH1);
 80026cc:	f7fd bd36 	b.w	800013c <ledOn>
    ledOff(_DEF_CH1);
 80026d0:	f7fd bd3e 	b.w	8000150 <ledOff>

080026d4 <board_rgb_write>:
}
 80026d4:	4770      	bx	lr
	...

080026d8 <board_timer_start>:
  timer_max = ms;
 80026d8:	4b01      	ldr	r3, [pc, #4]	; (80026e0 <board_timer_start+0x8>)
 80026da:	6018      	str	r0, [r3, #0]
}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000014 	.word	0x20000014

080026e4 <board_timer_stop>:
  timer_max = 0;
 80026e4:	2200      	movs	r2, #0
 80026e6:	4b01      	ldr	r3, [pc, #4]	; (80026ec <board_timer_stop+0x8>)
 80026e8:	601a      	str	r2, [r3, #0]
}
 80026ea:	4770      	bx	lr
 80026ec:	20000014 	.word	0x20000014

080026f0 <board_timer_tick>:

void board_timer_tick(void)
{
  timer_cnt++;
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <board_timer_tick+0x1c>)

  if (timer_max > 0 && timer_cnt >= timer_max)
 80026f2:	4907      	ldr	r1, [pc, #28]	; (8002710 <board_timer_tick+0x20>)
  timer_cnt++;
 80026f4:	6813      	ldr	r3, [r2, #0]
  if (timer_max > 0 && timer_cnt >= timer_max)
 80026f6:	6809      	ldr	r1, [r1, #0]
  timer_cnt++;
 80026f8:	3301      	adds	r3, #1
 80026fa:	6013      	str	r3, [r2, #0]
  if (timer_max > 0 && timer_cnt >= timer_max)
 80026fc:	b129      	cbz	r1, 800270a <board_timer_tick+0x1a>
 80026fe:	428b      	cmp	r3, r1
 8002700:	d303      	bcc.n	800270a <board_timer_tick+0x1a>
  {
    timer_cnt = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	6013      	str	r3, [r2, #0]
    board_timer_handler();
 8002706:	f7fd bded 	b.w	80002e4 <board_timer_handler>
  }
}
 800270a:	4770      	bx	lr
 800270c:	200007d4 	.word	0x200007d4
 8002710:	20000014 	.word	0x20000014

08002714 <USB_HP_CAN1_TX_IRQHandler>:
//--------------------------------------------------------------------+
// Forward USB interrupt events to TinyUSB IRQ Handler
//--------------------------------------------------------------------+
void USB_HP_IRQHandler(void)
{
  tud_int_handler(0);
 8002714:	2000      	movs	r0, #0
 8002716:	f7ff bc51 	b.w	8001fbc <dcd_int_handler>

0800271a <USB_LP_CAN1_RX0_IRQHandler>:
 800271a:	f7ff bffb 	b.w	8002714 <USB_HP_CAN1_TX_IRQHandler>

0800271e <USBWakeUp_IRQHandler>:
 800271e:	f7ff bff9 	b.w	8002714 <USB_HP_CAN1_TX_IRQHandler>

08002722 <_init>:
// Required by __libc_init_array in startup code if we are compiling using
// -nostdlib/-nostartfiles.
void _init(void)
{

}
 8002722:	4770      	bx	lr

08002724 <uf2_init>:

  return FID_UF2;
}

void uf2_init(void)
{
 8002724:	b510      	push	{r4, lr}
  // TODO maybe limit to application size only if possible board_flash_app_size()
  _flash_size = board_flash_size();
 8002726:	f7ff fe98 	bl	800245a <board_flash_size>
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <uf2_init+0x3c>)
  uint16_t start_cluster = 2;
 800272c:	2202      	movs	r2, #2
  _flash_size = board_flash_size();
 800272e:	6018      	str	r0, [r3, #0]

  // update CURRENT.UF2 file size
  info[FID_UF2].size = UF2_BYTE_COUNT;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <uf2_init+0x40>)
 8002732:	0a00      	lsrs	r0, r0, #8
 8002734:	0240      	lsls	r0, r0, #9
 8002736:	6418      	str	r0, [r3, #64]	; 0x40
 8002738:	2000      	movs	r0, #0
    info[i].cluster_end = start_cluster + UF2_DIV_CEIL(info[i].size, BPB_SECTOR_SIZE*BPB_SECTORS_PER_CLUSTER) - 1;
 800273a:	6919      	ldr	r1, [r3, #16]
    info[i].cluster_start = start_cluster;
 800273c:	829a      	strh	r2, [r3, #20]
    info[i].cluster_end = start_cluster + UF2_DIV_CEIL(info[i].size, BPB_SECTOR_SIZE*BPB_SECTORS_PER_CLUSTER) - 1;
 800273e:	f3c1 0408 	ubfx	r4, r1, #0, #9
 8002742:	0a49      	lsrs	r1, r1, #9
 8002744:	2c00      	cmp	r4, #0
 8002746:	bf18      	it	ne
 8002748:	3101      	addne	r1, #1
 800274a:	440a      	add	r2, r1
 800274c:	b292      	uxth	r2, r2
  for (uint16_t i = 0; i < NUM_FILES; i++)
 800274e:	3006      	adds	r0, #6
    info[i].cluster_end = start_cluster + UF2_DIV_CEIL(info[i].size, BPB_SECTOR_SIZE*BPB_SECTORS_PER_CLUSTER) - 1;
 8002750:	1e51      	subs	r1, r2, #1
  for (uint16_t i = 0; i < NUM_FILES; i++)
 8002752:	2812      	cmp	r0, #18
    info[i].cluster_end = start_cluster + UF2_DIV_CEIL(info[i].size, BPB_SECTOR_SIZE*BPB_SECTORS_PER_CLUSTER) - 1;
 8002754:	82d9      	strh	r1, [r3, #22]
  for (uint16_t i = 0; i < NUM_FILES; i++)
 8002756:	f103 0318 	add.w	r3, r3, #24
 800275a:	d1ee      	bne.n	800273a <uf2_init+0x16>

  init_starting_clusters();
}
 800275c:	bd10      	pop	{r4, pc}
 800275e:	bf00      	nop
 8002760:	200007d8 	.word	0x200007d8
 8002764:	20000018 	.word	0x20000018

08002768 <padded_memcpy>:
/*------------------------------------------------------------------*/
/* Read CURRENT.UF2
 *------------------------------------------------------------------*/
void padded_memcpy (char *dst, char const *src, int len)
{
  for ( int i = 0; i < len; ++i )
 8002768:	4603      	mov	r3, r0
{
 800276a:	b510      	push	{r4, lr}
  for ( int i = 0; i < len; ++i )
 800276c:	1a1c      	subs	r4, r3, r0
 800276e:	4294      	cmp	r4, r2
 8002770:	db00      	blt.n	8002774 <padded_memcpy+0xc>
    } else {
      *dst = ' ';
    }
    dst++;
  }
}
 8002772:	bd10      	pop	{r4, pc}
    if ( *src ) {
 8002774:	780c      	ldrb	r4, [r1, #0]
 8002776:	b11c      	cbz	r4, 8002780 <padded_memcpy+0x18>
      *dst = *src++;
 8002778:	3101      	adds	r1, #1
 800277a:	f803 4b01 	strb.w	r4, [r3], #1
  for ( int i = 0; i < len; ++i )
 800277e:	e7f5      	b.n	800276c <padded_memcpy+0x4>
      *dst = ' ';
 8002780:	2420      	movs	r4, #32
 8002782:	e7fa      	b.n	800277a <padded_memcpy+0x12>

08002784 <uf2_read_block>:

void uf2_read_block (uint32_t block_no, uint8_t *data)
{
 8002784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002788:	460b      	mov	r3, r1
 800278a:	4604      	mov	r4, r0
  memset(data, 0, BPB_SECTOR_SIZE);
 800278c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002790:	4618      	mov	r0, r3
 8002792:	2100      	movs	r1, #0
 8002794:	f000 feee 	bl	8003574 <memset>
 8002798:	4603      	mov	r3, r0
  uint32_t sectionRelativeSector = block_no;

  if ( block_no == 0 )
 800279a:	b99c      	cbnz	r4, 80027c4 <uf2_read_block+0x40>
  {
    // Request was for the Boot block
    memcpy(data, &BootBlock, sizeof(BootBlock));
 800279c:	4a73      	ldr	r2, [pc, #460]	; (800296c <uf2_read_block+0x1e8>)
 800279e:	4601      	mov	r1, r0
 80027a0:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 80027a4:	f852 4b04 	ldr.w	r4, [r2], #4
 80027a8:	4282      	cmp	r2, r0
 80027aa:	f841 4b04 	str.w	r4, [r1], #4
 80027ae:	d1f9      	bne.n	80027a4 <uf2_read_block+0x20>
 80027b0:	8812      	ldrh	r2, [r2, #0]
 80027b2:	800a      	strh	r2, [r1, #0]
    data[510] = 0x55;    // Always at offsets 510/511, even when BPB_SECTOR_SIZE is larger
 80027b4:	2255      	movs	r2, #85	; 0x55
 80027b6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
    data[511] = 0xaa;    // Always at offsets 510/511, even when BPB_SECTOR_SIZE is larger
 80027ba:	22aa      	movs	r2, #170	; 0xaa
 80027bc:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff

        board_flash_read(addr, bl->data, bl->payloadSize);
      }
    }
  }
}
 80027c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  else if ( block_no < FS_START_ROOTDIR_SECTOR )
 80027c4:	f5b4 7f01 	cmp.w	r4, #516	; 0x204
 80027c8:	d833      	bhi.n	8002832 <uf2_read_block+0xae>
    sectionRelativeSector -= FS_START_FAT0_SECTOR;
 80027ca:	1e60      	subs	r0, r4, #1
    if ( sectionRelativeSector >= BPB_SECTORS_PER_FAT )
 80027cc:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
      sectionRelativeSector -= BPB_SECTORS_PER_FAT;
 80027d0:	bf28      	it	cs
 80027d2:	f46f 7681 	mvncs.w	r6, #258	; 0x102
    uint32_t firstUnusedCluster = info[FID_UF2].cluster_end + 1;
 80027d6:	4a66      	ldr	r2, [pc, #408]	; (8002970 <uf2_read_block+0x1ec>)
      sectionRelativeSector -= BPB_SECTORS_PER_FAT;
 80027d8:	bf28      	it	cs
 80027da:	19a0      	addcs	r0, r4, r6
    uint32_t sectorFirstCluster = sectionRelativeSector * FAT_ENTRIES_PER_SECTOR;
 80027dc:	0201      	lsls	r1, r0, #8
    uint32_t firstUnusedCluster = info[FID_UF2].cluster_end + 1;
 80027de:	f8b2 5046 	ldrh.w	r5, [r2, #70]	; 0x46
 80027e2:	461c      	mov	r4, r3
    uint32_t sectorFirstCluster = sectionRelativeSector * FAT_ENTRIES_PER_SECTOR;
 80027e4:	460a      	mov	r2, r1
        data16[i] = 0;
 80027e6:	2700      	movs	r7, #0
    uint32_t firstUnusedCluster = info[FID_UF2].cluster_end + 1;
 80027e8:	3501      	adds	r5, #1
    for (uint16_t i = 0; i < FAT_ENTRIES_PER_SECTOR; i++)
 80027ea:	f501 7680 	add.w	r6, r1, #256	; 0x100
      if (cluster >= firstUnusedCluster)
 80027ee:	42aa      	cmp	r2, r5
 80027f0:	f102 0201 	add.w	r2, r2, #1
        data16[i] = 0;
 80027f4:	bf2c      	ite	cs
 80027f6:	8027      	strhcs	r7, [r4, #0]
        data16[i] = cluster + 1;
 80027f8:	8022      	strhcc	r2, [r4, #0]
    for (uint16_t i = 0; i < FAT_ENTRIES_PER_SECTOR; i++)
 80027fa:	4296      	cmp	r6, r2
 80027fc:	f104 0402 	add.w	r4, r4, #2
 8002800:	d1f5      	bne.n	80027ee <uf2_read_block+0x6a>
    if (sectionRelativeSector == 0)
 8002802:	b928      	cbnz	r0, 8002810 <uf2_read_block+0x8c>
      data[0] = BPB_MEDIA_DESCRIPTOR_BYTE;
 8002804:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8002808:	801a      	strh	r2, [r3, #0]
      data16[1] = FAT_END_OF_CHAIN; // cluster 1 is reserved
 800280a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800280e:	805a      	strh	r2, [r3, #2]
    uint32_t sectorFirstCluster = sectionRelativeSector * FAT_ENTRIES_PER_SECTOR;
 8002810:	2003      	movs	r0, #3
          data16[idx] = FAT_END_OF_CHAIN;
 8002812:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002816:	4c56      	ldr	r4, [pc, #344]	; (8002970 <uf2_read_block+0x1ec>)
      uint32_t lastClusterOfFile = info[i].cluster_end;
 8002818:	8ae2      	ldrh	r2, [r4, #22]
      if (lastClusterOfFile >= sectorFirstCluster)
 800281a:	4291      	cmp	r1, r2
 800281c:	d804      	bhi.n	8002828 <uf2_read_block+0xa4>
        uint32_t idx = lastClusterOfFile - sectorFirstCluster;
 800281e:	1a52      	subs	r2, r2, r1
        if (idx < FAT_ENTRIES_PER_SECTOR)
 8002820:	2aff      	cmp	r2, #255	; 0xff
          data16[idx] = FAT_END_OF_CHAIN;
 8002822:	bf98      	it	ls
 8002824:	f823 5012 	strhls.w	r5, [r3, r2, lsl #1]
    for (uint32_t i = 0; i < NUM_FILES; i++)
 8002828:	3801      	subs	r0, #1
 800282a:	f104 0418 	add.w	r4, r4, #24
 800282e:	d1f3      	bne.n	8002818 <uf2_read_block+0x94>
 8002830:	e7c6      	b.n	80027c0 <uf2_read_block+0x3c>
  else if ( block_no < FS_START_CLUSTERS_SECTOR )
 8002832:	f5b4 7f02 	cmp.w	r4, #520	; 0x208
 8002836:	d83b      	bhi.n	80028b0 <uf2_read_block+0x12c>
    if ( sectionRelativeSector == 0 )
 8002838:	f240 2205 	movw	r2, #517	; 0x205
 800283c:	4294      	cmp	r4, r2
 800283e:	d1bf      	bne.n	80027c0 <uf2_read_block+0x3c>
      padded_memcpy(d->name, (char const*) BootBlock.VolumeLabel, 11);
 8002840:	220b      	movs	r2, #11
 8002842:	494c      	ldr	r1, [pc, #304]	; (8002974 <uf2_read_block+0x1f0>)
 8002844:	f7ff ff90 	bl	8002768 <padded_memcpy>
      d->attrs = 0x28;
 8002848:	2328      	movs	r3, #40	; 0x28
      d->createTimeFine   = COMPILE_SECONDS_INT % 2 * 100;
 800284a:	2600      	movs	r6, #0
 800284c:	4d48      	ldr	r5, [pc, #288]	; (8002970 <uf2_read_block+0x1ec>)
      d->size             = (inf->content ? inf->size : UF2_BYTE_COUNT);
 800284e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8002978 <uf2_read_block+0x1f4>
      d->attrs = 0x28;
 8002852:	72c3      	strb	r3, [r0, #11]
      d++;
 8002854:	f100 0420 	add.w	r4, r0, #32
          remainingEntries > 0 && fileIndex < NUM_FILES; // while space remains in buffer and more files to add...
 8002858:	f100 0780 	add.w	r7, r0, #128	; 0x80
      padded_memcpy(d->name, inf->name, 11);
 800285c:	220b      	movs	r2, #11
 800285e:	4629      	mov	r1, r5
 8002860:	4620      	mov	r0, r4
      uint32_t const startCluster = info[fileIndex].cluster_start;
 8002862:	f8b5 9014 	ldrh.w	r9, [r5, #20]
      padded_memcpy(d->name, inf->name, 11);
 8002866:	f7ff ff7f 	bl	8002768 <padded_memcpy>
      d->createDate       = COMPILE_DOS_DATE;
 800286a:	2356      	movs	r3, #86	; 0x56
 800286c:	f06f 0272 	mvn.w	r2, #114	; 0x72
      d->createTime       = COMPILE_DOS_TIME;
 8002870:	206e      	movs	r0, #110	; 0x6e
 8002872:	2102      	movs	r1, #2
      d->createTimeFine   = COMPILE_SECONDS_INT % 2 * 100;
 8002874:	7366      	strb	r6, [r4, #13]
      d->createDate       = COMPILE_DOS_DATE;
 8002876:	7463      	strb	r3, [r4, #17]
      d->lastAccessDate   = COMPILE_DOS_DATE;
 8002878:	74e3      	strb	r3, [r4, #19]
      d->updateDate       = COMPILE_DOS_DATE;
 800287a:	7663      	strb	r3, [r4, #25]
      d->size             = (inf->content ? inf->size : UF2_BYTE_COUNT);
 800287c:	68eb      	ldr	r3, [r5, #12]
      d->createTime       = COMPILE_DOS_TIME;
 800287e:	73a0      	strb	r0, [r4, #14]
 8002880:	73e1      	strb	r1, [r4, #15]
      d->createDate       = COMPILE_DOS_DATE;
 8002882:	7422      	strb	r2, [r4, #16]
      d->lastAccessDate   = COMPILE_DOS_DATE;
 8002884:	74a2      	strb	r2, [r4, #18]
      d->highStartCluster = startCluster >> 16;
 8002886:	7526      	strb	r6, [r4, #20]
 8002888:	7566      	strb	r6, [r4, #21]
      d->updateTime       = COMPILE_DOS_TIME;
 800288a:	75a0      	strb	r0, [r4, #22]
 800288c:	75e1      	strb	r1, [r4, #23]
      d->updateDate       = COMPILE_DOS_DATE;
 800288e:	7622      	strb	r2, [r4, #24]
      d->startCluster     = startCluster & 0xFFFF;
 8002890:	f8a4 901a 	strh.w	r9, [r4, #26]
      d->size             = (inf->content ? inf->size : UF2_BYTE_COUNT);
 8002894:	b13b      	cbz	r3, 80028a6 <uf2_read_block+0x122>
 8002896:	692b      	ldr	r3, [r5, #16]
 8002898:	61e3      	str	r3, [r4, #28]
          fileIndex++, d++ )
 800289a:	3420      	adds	r4, #32
          remainingEntries > 0 && fileIndex < NUM_FILES; // while space remains in buffer and more files to add...
 800289c:	42bc      	cmp	r4, r7
 800289e:	f105 0518 	add.w	r5, r5, #24
 80028a2:	d1db      	bne.n	800285c <uf2_read_block+0xd8>
 80028a4:	e78c      	b.n	80027c0 <uf2_read_block+0x3c>
      d->size             = (inf->content ? inf->size : UF2_BYTE_COUNT);
 80028a6:	f8d8 3000 	ldr.w	r3, [r8]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	e7f3      	b.n	8002898 <uf2_read_block+0x114>
  else if ( block_no < BPB_TOTAL_SECTORS )
 80028b0:	4a32      	ldr	r2, [pc, #200]	; (800297c <uf2_read_block+0x1f8>)
 80028b2:	4294      	cmp	r4, r2
 80028b4:	d884      	bhi.n	80027c0 <uf2_read_block+0x3c>
    sectionRelativeSector -= FS_START_CLUSTERS_SECTOR;
 80028b6:	f46f 7502 	mvn.w	r5, #520	; 0x208
 80028ba:	1962      	adds	r2, r4, r5
    uint32_t fid = info_index_of(2 + sectionRelativeSector / BPB_SECTORS_PER_CLUSTER);
 80028bc:	4d2c      	ldr	r5, [pc, #176]	; (8002970 <uf2_read_block+0x1ec>)
  for (uint32_t i = 0; i < NUM_FILES; i++)
 80028be:	2100      	movs	r1, #0
 80028c0:	4628      	mov	r0, r5
    uint32_t fid = info_index_of(2 + sectionRelativeSector / BPB_SECTORS_PER_CLUSTER);
 80028c2:	f2a4 2407 	subw	r4, r4, #519	; 0x207
    if ( (info[i].cluster_start <= cluster) && (cluster <= info[i].cluster_end) )
 80028c6:	8aae      	ldrh	r6, [r5, #20]
 80028c8:	42b4      	cmp	r4, r6
 80028ca:	d302      	bcc.n	80028d2 <uf2_read_block+0x14e>
 80028cc:	8aee      	ldrh	r6, [r5, #22]
 80028ce:	42b4      	cmp	r4, r6
 80028d0:	d905      	bls.n	80028de <uf2_read_block+0x15a>
  for (uint32_t i = 0; i < NUM_FILES; i++)
 80028d2:	3101      	adds	r1, #1
 80028d4:	2903      	cmp	r1, #3
 80028d6:	f105 0518 	add.w	r5, r5, #24
 80028da:	d1f4      	bne.n	80028c6 <uf2_read_block+0x142>
  return FID_UF2;
 80028dc:	2102      	movs	r1, #2
    uint32_t fileRelativeSector = sectionRelativeSector - (info[fid].cluster_start-2) * BPB_SECTORS_PER_CLUSTER;
 80028de:	2418      	movs	r4, #24
 80028e0:	fb04 0001 	mla	r0, r4, r1, r0
 80028e4:	8a84      	ldrh	r4, [r0, #20]
    if ( fid != FID_UF2 )
 80028e6:	2902      	cmp	r1, #2
    uint32_t fileRelativeSector = sectionRelativeSector - (info[fid].cluster_start-2) * BPB_SECTORS_PER_CLUSTER;
 80028e8:	eba2 0204 	sub.w	r2, r2, r4
 80028ec:	f102 0402 	add.w	r4, r2, #2
    if ( fid != FID_UF2 )
 80028f0:	d012      	beq.n	8002918 <uf2_read_block+0x194>
      size_t fileContentLength = inf->size;
 80028f2:	6902      	ldr	r2, [r0, #16]
      size_t fileContentStartOffset = fileRelativeSector * BPB_SECTOR_SIZE;
 80028f4:	0261      	lsls	r1, r4, #9
      if (fileContentLength > fileContentStartOffset) {
 80028f6:	ebb2 2f44 	cmp.w	r2, r4, lsl #9
 80028fa:	f67f af61 	bls.w	80027c0 <uf2_read_block+0x3c>
        size_t bytesToCopy = fileContentLength - fileContentStartOffset;
 80028fe:	1a52      	subs	r2, r2, r1
        const void * dataStart = (inf->content) + fileContentStartOffset;
 8002900:	68c0      	ldr	r0, [r0, #12]
        memcpy(data, dataStart, bytesToCopy);
 8002902:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002906:	4401      	add	r1, r0
 8002908:	bf28      	it	cs
 800290a:	f44f 7200 	movcs.w	r2, #512	; 0x200
 800290e:	4618      	mov	r0, r3
}
 8002910:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy(data, dataStart, bytesToCopy);
 8002914:	f000 be06 	b.w	8003524 <memcpy>
      if ( addr < _flash_size ) // TODO abstract this out
 8002918:	4917      	ldr	r1, [pc, #92]	; (8002978 <uf2_read_block+0x1f4>)
      uint32_t addr = BOARD_FLASH_APP_START + (fileRelativeSector * UF2_FIRMWARE_BYTES_PER_SECTOR);
 800291a:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
      if ( addr < _flash_size ) // TODO abstract this out
 800291e:	6809      	ldr	r1, [r1, #0]
      uint32_t addr = BOARD_FLASH_APP_START + (fileRelativeSector * UF2_FIRMWARE_BYTES_PER_SECTOR);
 8002920:	3242      	adds	r2, #66	; 0x42
      if ( addr < _flash_size ) // TODO abstract this out
 8002922:	ebb1 2f02 	cmp.w	r1, r2, lsl #8
      uint32_t addr = BOARD_FLASH_APP_START + (fileRelativeSector * UF2_FIRMWARE_BYTES_PER_SECTOR);
 8002926:	ea4f 2002 	mov.w	r0, r2, lsl #8
      if ( addr < _flash_size ) // TODO abstract this out
 800292a:	f67f af49 	bls.w	80027c0 <uf2_read_block+0x3c>
        bl->magicStart0 = UF2_MAGIC_START0;
 800292e:	4a14      	ldr	r2, [pc, #80]	; (8002980 <uf2_read_block+0x1fc>)
        bl->numBlocks = UF2_SECTOR_COUNT;
 8002930:	0a09      	lsrs	r1, r1, #8
        bl->magicStart0 = UF2_MAGIC_START0;
 8002932:	601a      	str	r2, [r3, #0]
        bl->magicStart1 = UF2_MAGIC_START1;
 8002934:	f102 4214 	add.w	r2, r2, #2483027968	; 0x94000000
 8002938:	f502 122c 	add.w	r2, r2, #2818048	; 0x2b0000
 800293c:	f602 3202 	addw	r2, r2, #2818	; 0xb02
 8002940:	605a      	str	r2, [r3, #4]
        bl->numBlocks = UF2_SECTOR_COUNT;
 8002942:	6199      	str	r1, [r3, #24]
        bl->magicEnd = UF2_MAGIC_END;
 8002944:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <uf2_read_block+0x200>)
        bl->flags = UF2_FLAG_FAMILYID;
 8002946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        bl->magicEnd = UF2_MAGIC_END;
 800294a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        bl->payloadSize = UF2_FIRMWARE_BYTES_PER_SECTOR;
 800294e:	f44f 7280 	mov.w	r2, #256	; 0x100
        bl->flags = UF2_FLAG_FAMILYID;
 8002952:	6099      	str	r1, [r3, #8]
        bl->familyID = BOARD_UF2_FAMILY_ID;
 8002954:	490c      	ldr	r1, [pc, #48]	; (8002988 <uf2_read_block+0x204>)
        bl->blockNo = fileRelativeSector;
 8002956:	615c      	str	r4, [r3, #20]
        bl->familyID = BOARD_UF2_FAMILY_ID;
 8002958:	61d9      	str	r1, [r3, #28]
        bl->targetAddr = addr;
 800295a:	60d8      	str	r0, [r3, #12]
        bl->payloadSize = UF2_FIRMWARE_BYTES_PER_SECTOR;
 800295c:	611a      	str	r2, [r3, #16]
        board_flash_read(addr, bl->data, bl->payloadSize);
 800295e:	f103 0120 	add.w	r1, r3, #32
}
 8002962:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        board_flash_read(addr, bl->data, bl->payloadSize);
 8002966:	f7ff bd7b 	b.w	8002460 <board_flash_read>
 800296a:	bf00      	nop
 800296c:	080035d6 	.word	0x080035d6
 8002970:	20000018 	.word	0x20000018
 8002974:	08003601 	.word	0x08003601
 8002978:	200007d8 	.word	0x200007d8
 800297c:	00010108 	.word	0x00010108
 8002980:	0a324655 	.word	0x0a324655
 8002984:	0ab16f30 	.word	0x0ab16f30
 8002988:	5ee21072 	.word	0x5ee21072

0800298c <uf2_write_block>:
 *  -1 : if not an uf2 block
 * 512 : write is successful (BPB_SECTOR_SIZE == 512)
 *   0 : is busy with flashing, tinyusb stack will call write_block again with the same parameters later on
 */
int uf2_write_block (uint32_t block_no, uint8_t *data, WriteState *state)
{
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4615      	mov	r5, r2
         (bl->flags & UF2_FLAG_FAMILYID) &&
 8002990:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <uf2_write_block+0xac>)
 8002992:	680a      	ldr	r2, [r1, #0]
{
 8002994:	460c      	mov	r4, r1
         (bl->flags & UF2_FLAG_FAMILYID) &&
 8002996:	429a      	cmp	r2, r3
 8002998:	d14b      	bne.n	8002a32 <uf2_write_block+0xa6>
  return (bl->magicStart0 == UF2_MAGIC_START0) &&
 800299a:	f103 4314 	add.w	r3, r3, #2483027968	; 0x94000000
 800299e:	684a      	ldr	r2, [r1, #4]
 80029a0:	f503 132c 	add.w	r3, r3, #2818048	; 0x2b0000
 80029a4:	f603 3302 	addw	r3, r3, #2818	; 0xb02
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d142      	bne.n	8002a32 <uf2_write_block+0xa6>
         (bl->magicStart1 == UF2_MAGIC_START1) &&
 80029ac:	f8d1 21fc 	ldr.w	r2, [r1, #508]	; 0x1fc
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <uf2_write_block+0xb0>)
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d13d      	bne.n	8002a32 <uf2_write_block+0xa6>
         (bl->flags & UF2_FLAG_FAMILYID) &&
 80029b6:	688b      	ldr	r3, [r1, #8]
 80029b8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80029bc:	f023 031e 	bic.w	r3, r3, #30
 80029c0:	049b      	lsls	r3, r3, #18
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c8:	d133      	bne.n	8002a32 <uf2_write_block+0xa6>
  (void) block_no;
  UF2_Block *bl = (void*) data;

  if ( !is_uf2_block(bl) ) return -1;

  if (bl->familyID == BOARD_UF2_FAMILY_ID)
 80029ca:	69ca      	ldr	r2, [r1, #28]
 80029cc:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <uf2_write_block+0xb4>)
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d12f      	bne.n	8002a32 <uf2_write_block+0xa6>
  {
    // generic family ID
    board_flash_write(bl->targetAddr, bl->data, bl->payloadSize);
 80029d2:	690a      	ldr	r2, [r1, #16]
 80029d4:	68e0      	ldr	r0, [r4, #12]
 80029d6:	3120      	adds	r1, #32
 80029d8:	f7ff fd48 	bl	800246c <board_flash_write>
    // TODO family matches VID/PID
    return -1;
  }

  //------------- Update written blocks -------------//
  if ( bl->numBlocks )
 80029dc:	69a3      	ldr	r3, [r4, #24]
 80029de:	b913      	cbnz	r3, 80029e6 <uf2_write_block+0x5a>
        board_flash_flush();
      }
    }
  }

  return BPB_SECTOR_SIZE;
 80029e0:	f44f 7000 	mov.w	r0, #512	; 0x200
}
 80029e4:	bd38      	pop	{r3, r4, r5, pc}
    if ( state->numBlocks != bl->numBlocks )
 80029e6:	682a      	ldr	r2, [r5, #0]
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <uf2_write_block+0x70>
      if ( bl->numBlocks >= MAX_BLOCKS || state->numBlocks )
 80029ec:	f244 0163 	movw	r1, #16483	; 0x4063
 80029f0:	428b      	cmp	r3, r1
 80029f2:	d800      	bhi.n	80029f6 <uf2_write_block+0x6a>
 80029f4:	b10a      	cbz	r2, 80029fa <uf2_write_block+0x6e>
        state->numBlocks = 0xffffffff;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
        state->numBlocks = bl->numBlocks;
 80029fa:	602b      	str	r3, [r5, #0]
    if ( bl->blockNo < MAX_BLOCKS )
 80029fc:	f244 0263 	movw	r2, #16483	; 0x4063
 8002a00:	6963      	ldr	r3, [r4, #20]
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d8ec      	bhi.n	80029e0 <uf2_write_block+0x54>
      uint8_t const mask = 1 << (bl->blockNo % 8);
 8002a06:	2101      	movs	r1, #1
 8002a08:	f003 0207 	and.w	r2, r3, #7
      if ( !(state->writtenMask[pos] & mask) )
 8002a0c:	eb05 03d3 	add.w	r3, r5, r3, lsr #3
      uint8_t const mask = 1 << (bl->blockNo % 8);
 8002a10:	4091      	lsls	r1, r2
      if ( !(state->writtenMask[pos] & mask) )
 8002a12:	7a5a      	ldrb	r2, [r3, #9]
      uint8_t const mask = 1 << (bl->blockNo % 8);
 8002a14:	b2c8      	uxtb	r0, r1
      if ( !(state->writtenMask[pos] & mask) )
 8002a16:	4211      	tst	r1, r2
 8002a18:	d104      	bne.n	8002a24 <uf2_write_block+0x98>
        state->numWritten++;
 8002a1a:	6869      	ldr	r1, [r5, #4]
        state->writtenMask[pos] |= mask;
 8002a1c:	4302      	orrs	r2, r0
        state->numWritten++;
 8002a1e:	3101      	adds	r1, #1
        state->writtenMask[pos] |= mask;
 8002a20:	725a      	strb	r2, [r3, #9]
        state->numWritten++;
 8002a22:	6069      	str	r1, [r5, #4]
      if ( state->numWritten >= state->numBlocks )
 8002a24:	e9d5 3200 	ldrd	r3, r2, [r5]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d3d9      	bcc.n	80029e0 <uf2_write_block+0x54>
        board_flash_flush();
 8002a2c:	f7ff fd1d 	bl	800246a <board_flash_flush>
 8002a30:	e7d6      	b.n	80029e0 <uf2_write_block+0x54>
  if ( !is_uf2_block(bl) ) return -1;
 8002a32:	f04f 30ff 	mov.w	r0, #4294967295
 8002a36:	e7d5      	b.n	80029e4 <uf2_write_block+0x58>
 8002a38:	0a324655 	.word	0x0a324655
 8002a3c:	0ab16f30 	.word	0x0ab16f30
 8002a40:	5ee21072 	.word	0x5ee21072

08002a44 <tud_msc_inquiry_cb>:
//--------------------------------------------------------------------+

// Invoked when received SCSI_CMD_INQUIRY
// Application fill vendor id, product id and revision with string up to 8, 16, 4 characters respectively
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4])
{
 8002a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a48:	b088      	sub	sp, #32
  (void) lun;

  const char vid[] = "Adafruit";
  const char pid[] = "UF2 Bootloader";
 8002a4a:	ad04      	add	r5, sp, #16
{
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	46aa      	mov	sl, r5
 8002a50:	461f      	mov	r7, r3
  const char vid[] = "Adafruit";
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <tud_msc_inquiry_cb+0x7c>)
{
 8002a54:	4689      	mov	r9, r1
  const char vid[] = "Adafruit";
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	ac01      	add	r4, sp, #4
 8002a5c:	c403      	stmia	r4!, {r0, r1}
 8002a5e:	7a1b      	ldrb	r3, [r3, #8]
 8002a60:	7023      	strb	r3, [r4, #0]
  const char pid[] = "UF2 Bootloader";
 8002a62:	4c18      	ldr	r4, [pc, #96]	; (8002ac4 <tud_msc_inquiry_cb+0x80>)
 8002a64:	f104 0308 	add.w	r3, r4, #8
 8002a68:	462e      	mov	r6, r5
 8002a6a:	6820      	ldr	r0, [r4, #0]
 8002a6c:	6861      	ldr	r1, [r4, #4]
 8002a6e:	3408      	adds	r4, #8
 8002a70:	c603      	stmia	r6!, {r0, r1}
 8002a72:	429c      	cmp	r4, r3
 8002a74:	4635      	mov	r5, r6
 8002a76:	d1f7      	bne.n	8002a68 <tud_msc_inquiry_cb+0x24>
 8002a78:	79a3      	ldrb	r3, [r4, #6]
 8002a7a:	88a2      	ldrh	r2, [r4, #4]
 8002a7c:	6820      	ldr	r0, [r4, #0]
 8002a7e:	71b3      	strb	r3, [r6, #6]
  const char rev[] = "1.0";
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <tud_msc_inquiry_cb+0x84>)
  const char pid[] = "UF2 Bootloader";
 8002a82:	6030      	str	r0, [r6, #0]
 8002a84:	80b2      	strh	r2, [r6, #4]

  memcpy(vendor_id  , vid, strlen(vid));
 8002a86:	a801      	add	r0, sp, #4
  const char rev[] = "1.0";
 8002a88:	9300      	str	r3, [sp, #0]
  memcpy(vendor_id  , vid, strlen(vid));
 8002a8a:	f7fd fb3f 	bl	800010c <strlen>
 8002a8e:	a901      	add	r1, sp, #4
 8002a90:	4602      	mov	r2, r0
 8002a92:	4648      	mov	r0, r9
 8002a94:	f000 fd46 	bl	8003524 <memcpy>
  memcpy(product_id , pid, strlen(pid));
 8002a98:	4650      	mov	r0, sl
 8002a9a:	f7fd fb37 	bl	800010c <strlen>
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4640      	mov	r0, r8
 8002aa4:	f000 fd3e 	bl	8003524 <memcpy>
  memcpy(product_rev, rev, strlen(rev));
 8002aa8:	4668      	mov	r0, sp
 8002aaa:	f7fd fb2f 	bl	800010c <strlen>
 8002aae:	4669      	mov	r1, sp
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	f000 fd36 	bl	8003524 <memcpy>
}
 8002ab8:	b008      	add	sp, #32
 8002aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002abe:	bf00      	nop
 8002ac0:	080036f0 	.word	0x080036f0
 8002ac4:	080036f9 	.word	0x080036f9
 8002ac8:	00302e31 	.word	0x00302e31

08002acc <tud_msc_test_unit_ready_cb>:
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun)
{
  (void) lun;
  return true;
}
 8002acc:	2001      	movs	r0, #1
 8002ace:	4770      	bx	lr

08002ad0 <tud_msc_scsi_cb>:

// Callback invoked when received an SCSI command not in built-in list below
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize)
{
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	461c      	mov	r4, r3
  uint16_t resplen = 0;

  // most scsi handled is input
  bool in_xfer = true;

  switch (scsi_cmd[0])
 8002ad4:	780b      	ldrb	r3, [r1, #0]
 8002ad6:	2b1e      	cmp	r3, #30
 8002ad8:	d00a      	beq.n	8002af0 <tud_msc_scsi_cb+0x20>
      resplen = 0;
    break;

    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8002ada:	2300      	movs	r3, #0
 8002adc:	2220      	movs	r2, #32
 8002ade:	2105      	movs	r1, #5
 8002ae0:	f7fd fe94 	bl	800080c <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 8002ae4:	f64f 70ff 	movw	r0, #65535	; 0xffff
      // SCSI output
    }
  }

  return resplen;
}
 8002ae8:	42a0      	cmp	r0, r4
 8002aea:	bf28      	it	cs
 8002aec:	4620      	movcs	r0, r4
 8002aee:	bd10      	pop	{r4, pc}
      resplen = 0;
 8002af0:	2000      	movs	r0, #0
 8002af2:	e7f9      	b.n	8002ae8 <tud_msc_scsi_cb+0x18>

08002af4 <tud_msc_read10_cb>:

// Callback invoked when received READ10 command.
// Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
int32_t tud_msc_read10_cb (uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize)
{
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	4614      	mov	r4, r2
 8002af8:	9f06      	ldr	r7, [sp, #24]
 8002afa:	460d      	mov	r5, r1
  (void) lun;
  memset(buffer, 0, bufsize);
 8002afc:	463a      	mov	r2, r7
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
{
 8002b02:	461e      	mov	r6, r3
  memset(buffer, 0, bufsize);
 8002b04:	f000 fd36 	bl	8003574 <memset>

  // since we return block size each, offset should always be zero
  TU_ASSERT(offset == 0, -1);
 8002b08:	b17c      	cbz	r4, 8002b2a <tud_msc_read10_cb+0x36>
 8002b0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002b0e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	; 0xdf0
 8002b12:	07db      	lsls	r3, r3, #31
 8002b14:	d500      	bpl.n	8002b18 <tud_msc_read10_cb+0x24>
 8002b16:	be00      	bkpt	0x0000
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	e00a      	b.n	8002b34 <tud_msc_read10_cb+0x40>

  uint32_t count = 0;

  while ( count < bufsize )
  {
    uf2_read_block(lba, buffer);
 8002b1e:	4628      	mov	r0, r5
 8002b20:	f7ff fe30 	bl	8002784 <uf2_read_block>

    lba++;
 8002b24:	3501      	adds	r5, #1
    buffer += 512;
    count  += 512;
 8002b26:	f504 7400 	add.w	r4, r4, #512	; 0x200
  while ( count < bufsize )
 8002b2a:	42bc      	cmp	r4, r7
 8002b2c:	eb06 0104 	add.w	r1, r6, r4
 8002b30:	d3f5      	bcc.n	8002b1e <tud_msc_read10_cb+0x2a>
  }

  return count;
 8002b32:	4620      	mov	r0, r4
}
 8002b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b38 <tud_msc_write10_cb>:

// Callback invoked when received WRITE10 command.
// Process data in buffer to disk's storage and return number of written bytes
int32_t tud_msc_write10_cb (uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize)
{
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	460d      	mov	r5, r1
 8002b3c:	461e      	mov	r6, r3
  (void) lun;
  (void) offset;

  uint32_t count = 0;
 8002b3e:	2400      	movs	r4, #0
  while ( count < bufsize )
  {
    // Consider non-uf2 block write as successful
    // only break if write_block is busy with flashing (return 0)
    if ( 0 == uf2_write_block(lba, buffer, &_wr_state) ) break;
 8002b40:	4f08      	ldr	r7, [pc, #32]	; (8002b64 <tud_msc_write10_cb+0x2c>)
  while ( count < bufsize )
 8002b42:	9b06      	ldr	r3, [sp, #24]
 8002b44:	1931      	adds	r1, r6, r4
 8002b46:	429c      	cmp	r4, r3
 8002b48:	d301      	bcc.n	8002b4e <tud_msc_write10_cb+0x16>
    buffer += 512;
    count  += 512;
  }

  return count;
}
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( 0 == uf2_write_block(lba, buffer, &_wr_state) ) break;
 8002b4e:	463a      	mov	r2, r7
 8002b50:	4628      	mov	r0, r5
 8002b52:	f7ff ff1b 	bl	800298c <uf2_write_block>
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d0f7      	beq.n	8002b4a <tud_msc_write10_cb+0x12>
    lba++;
 8002b5a:	3501      	adds	r5, #1
    count  += 512;
 8002b5c:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8002b60:	e7ef      	b.n	8002b42 <tud_msc_write10_cb+0xa>
 8002b62:	bf00      	nop
 8002b64:	200007dc 	.word	0x200007dc

08002b68 <tud_msc_write10_complete_cb>:

// Callback invoked when WRITE10 command is completed (status received and accepted by host).
void tud_msc_write10_complete_cb(uint8_t lun)
{
 8002b68:	b510      	push	{r4, lr}
  (void) lun;
  static bool first_write = true;

  // abort the DFU, uf2 block failed integrity check
  if ( _wr_state.aborted )
 8002b6a:	4c0e      	ldr	r4, [pc, #56]	; (8002ba4 <tud_msc_write10_complete_cb+0x3c>)
 8002b6c:	7a22      	ldrb	r2, [r4, #8]
 8002b6e:	b122      	cbz	r2, 8002b7a <tud_msc_write10_complete_cb+0x12>
      // board_dfu_complete() should not return
      // getting here is an indicator of error
      while(1) {}
    }
  }
}
 8002b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    indicator_set(STATE_WRITING_FINISHED);
 8002b74:	2004      	movs	r0, #4
 8002b76:	f7fd baf9 	b.w	800016c <indicator_set>
  else if ( _wr_state.numBlocks )
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	b183      	cbz	r3, 8002ba0 <tud_msc_write10_complete_cb+0x38>
    if (first_write)
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <tud_msc_write10_complete_cb+0x40>)
 8002b80:	7819      	ldrb	r1, [r3, #0]
 8002b82:	b119      	cbz	r1, 8002b8c <tud_msc_write10_complete_cb+0x24>
      indicator_set(STATE_WRITING_STARTED);
 8002b84:	2003      	movs	r0, #3
      first_write = false;
 8002b86:	701a      	strb	r2, [r3, #0]
      indicator_set(STATE_WRITING_STARTED);
 8002b88:	f7fd faf0 	bl	800016c <indicator_set>
    if (_wr_state.numWritten >= _wr_state.numBlocks)
 8002b8c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d305      	bcc.n	8002ba0 <tud_msc_write10_complete_cb+0x38>
      indicator_set(STATE_WRITING_FINISHED);
 8002b94:	2004      	movs	r0, #4
 8002b96:	f7fd fae9 	bl	800016c <indicator_set>
      board_dfu_complete();
 8002b9a:	f7ff fd39 	bl	8002610 <board_dfu_complete>
      while(1) {}
 8002b9e:	e7fe      	b.n	8002b9e <tud_msc_write10_complete_cb+0x36>
}
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200007dc 	.word	0x200007dc
 8002ba8:	20000060 	.word	0x20000060

08002bac <tud_msc_capacity_cb>:
// Application update block count and block size
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size)
{
  (void) lun;

  *block_count = CFG_UF2_NUM_BLOCKS;
 8002bac:	4b02      	ldr	r3, [pc, #8]	; (8002bb8 <tud_msc_capacity_cb+0xc>)
 8002bae:	600b      	str	r3, [r1, #0]
  *block_size  = 512;
 8002bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb4:	8013      	strh	r3, [r2, #0]
}
 8002bb6:	4770      	bx	lr
 8002bb8:	00010109 	.word	0x00010109

08002bbc <tud_msc_start_stop_cb>:
      // unload disk storage
    }
  }

  return true;
}
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	4770      	bx	lr

08002bc0 <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
  return (uint8_t const *) &desc_device;
}
 8002bc0:	4800      	ldr	r0, [pc, #0]	; (8002bc4 <tud_descriptor_device_cb+0x4>)
 8002bc2:	4770      	bx	lr
 8002bc4:	08003786 	.word	0x08003786

08002bc8 <tud_hid_descriptor_report_cb>:
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t itf)
{
  (void) itf;
  return desc_hid_report;
}
 8002bc8:	4800      	ldr	r0, [pc, #0]	; (8002bcc <tud_hid_descriptor_report_cb+0x4>)
 8002bca:	4770      	bx	lr
 8002bcc:	08003798 	.word	0x08003798

08002bd0 <tud_descriptor_configuration_cb>:
{
  (void) index; // for multiple configurations

  // TODO when device is highspeed, host is fullspeed.
  return desc_configuration;
}
 8002bd0:	4800      	ldr	r0, [pc, #0]	; (8002bd4 <tud_descriptor_configuration_cb+0x4>)
 8002bd2:	4770      	bx	lr
 8002bd4:	08003746 	.word	0x08003746

08002bd8 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32+1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8002bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bdc:	b089      	sub	sp, #36	; 0x24
  (void) langid;

  uint8_t chr_count;

  switch (index)
 8002bde:	b1c0      	cbz	r0, 8002c12 <tud_descriptor_string_cb+0x3a>
 8002be0:	2803      	cmp	r0, #3
 8002be2:	d025      	beq.n	8002c30 <tud_descriptor_string_cb+0x58>
    break;

    default:
    {
      // Convert ASCII string into UTF-16
      if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8002be4:	2806      	cmp	r0, #6
 8002be6:	d85c      	bhi.n	8002ca2 <tud_descriptor_string_cb+0xca>

      const char* str = string_desc_arr[index];
 8002be8:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <tud_descriptor_string_cb+0xd0>)
 8002bea:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]

      // Cap at max char
      chr_count = strlen(str);
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f7fd fa8c 	bl	800010c <strlen>
 8002bf4:	b2c3      	uxtb	r3, r0
      if ( chr_count > 31 ) chr_count = 31;
 8002bf6:	2b1f      	cmp	r3, #31
 8002bf8:	bf28      	it	cs
 8002bfa:	231f      	movcs	r3, #31

      for(uint8_t i=0; i<chr_count; i++)
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	4a2b      	ldr	r2, [pc, #172]	; (8002cac <tud_descriptor_string_cb+0xd4>)
 8002c00:	18e1      	adds	r1, r4, r3
 8002c02:	4281      	cmp	r1, r0
 8002c04:	f102 0202 	add.w	r2, r2, #2
 8002c08:	d009      	beq.n	8002c1e <tud_descriptor_string_cb+0x46>
      {
        _desc_str[1+i] = str[i];
 8002c0a:	f810 4b01 	ldrb.w	r4, [r0], #1
 8002c0e:	8014      	strh	r4, [r2, #0]
      for(uint8_t i=0; i<chr_count; i++)
 8002c10:	e7f7      	b.n	8002c02 <tud_descriptor_string_cb+0x2a>
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8002c12:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <tud_descriptor_string_cb+0xd0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	4b24      	ldr	r3, [pc, #144]	; (8002cac <tud_descriptor_string_cb+0xd4>)
 8002c1a:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 8002c1c:	2301      	movs	r3, #1
    }
    break;
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4822      	ldr	r0, [pc, #136]	; (8002cac <tud_descriptor_string_cb+0xd4>)
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c28:	8003      	strh	r3, [r0, #0]

  return _desc_str;
}
 8002c2a:	b009      	add	sp, #36	; 0x24
 8002c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      serial_len = board_usb_get_serial(serial_id);
 8002c30:	4668      	mov	r0, sp
 8002c32:	f7ff fd39 	bl	80026a8 <board_usb_get_serial>
 8002c36:	466c      	mov	r4, sp
 8002c38:	4684      	mov	ip, r0
      for ( uint8_t i = 0; i < serial_len; i++ )
 8002c3a:	f04f 0800 	mov.w	r8, #0
      chr_count = 2*serial_len;
 8002c3e:	0043      	lsls	r3, r0, #1
 8002c40:	4e1a      	ldr	r6, [pc, #104]	; (8002cac <tud_descriptor_string_cb+0xd4>)
 8002c42:	b2db      	uxtb	r3, r3
      for ( uint8_t i = 0; i < serial_len; i++ )
 8002c44:	fa5f f288 	uxtb.w	r2, r8
 8002c48:	4562      	cmp	r2, ip
 8002c4a:	d2e8      	bcs.n	8002c1e <tud_descriptor_string_cb+0x46>
          const char nibble_to_hex[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
 8002c4c:	af04      	add	r7, sp, #16
 8002c4e:	463d      	mov	r5, r7
 8002c50:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <tud_descriptor_string_cb+0xd8>)
 8002c52:	f102 0910 	add.w	r9, r2, #16
 8002c56:	46be      	mov	lr, r7
 8002c58:	6810      	ldr	r0, [r2, #0]
 8002c5a:	6851      	ldr	r1, [r2, #4]
 8002c5c:	3208      	adds	r2, #8
 8002c5e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8002c62:	454a      	cmp	r2, r9
 8002c64:	4677      	mov	r7, lr
 8002c66:	d1f6      	bne.n	8002c56 <tud_descriptor_string_cb+0x7e>
          uint8_t nibble = (serial_id[i] >> (j * 4)) & 0xf;
 8002c68:	f814 7b01 	ldrb.w	r7, [r4], #1
          _desc_str[1 + i * 2 + (1 - j)] = nibble_to_hex[nibble]; // UTF-16-LE
 8002c6c:	f007 020f 	and.w	r2, r7, #15
 8002c70:	3220      	adds	r2, #32
 8002c72:	446a      	add	r2, sp
 8002c74:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002c78:	80b2      	strh	r2, [r6, #4]
          const char nibble_to_hex[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
 8002c7a:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <tud_descriptor_string_cb+0xd8>)
 8002c7c:	46ae      	mov	lr, r5
 8002c7e:	6810      	ldr	r0, [r2, #0]
 8002c80:	6851      	ldr	r1, [r2, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8002c88:	454a      	cmp	r2, r9
 8002c8a:	4675      	mov	r5, lr
 8002c8c:	d1f6      	bne.n	8002c7c <tud_descriptor_string_cb+0xa4>
          _desc_str[1 + i * 2 + (1 - j)] = nibble_to_hex[nibble]; // UTF-16-LE
 8002c8e:	aa08      	add	r2, sp, #32
 8002c90:	eb02 1717 	add.w	r7, r2, r7, lsr #4
 8002c94:	f817 2c10 	ldrb.w	r2, [r7, #-16]
 8002c98:	f108 0801 	add.w	r8, r8, #1
 8002c9c:	8072      	strh	r2, [r6, #2]
      for ( uint8_t i = 0; i < serial_len; i++ )
 8002c9e:	3604      	adds	r6, #4
 8002ca0:	e7d0      	b.n	8002c44 <tud_descriptor_string_cb+0x6c>
      if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	e7c1      	b.n	8002c2a <tud_descriptor_string_cb+0x52>
 8002ca6:	bf00      	nop
 8002ca8:	20000064 	.word	0x20000064
 8002cac:	20000ff4 	.word	0x20000ff4
 8002cb0:	08003708 	.word	0x08003708

08002cb4 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002cb4:	4a24      	ldr	r2, [pc, #144]	; (8002d48 <SystemClock_Config+0x94>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cb6:	b510      	push	{r4, lr}
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	f023 0307 	bic.w	r3, r3, #7
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002cc4:	6813      	ldr	r3, [r2, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d1fa      	bne.n	8002cc4 <SystemClock_Config+0x10>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002cce:	4c1f      	ldr	r4, [pc, #124]	; (8002d4c <SystemClock_Config+0x98>)
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd6:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002cd8:	6823      	ldr	r3, [r4, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002cda:	039a      	lsls	r2, r3, #14
 8002cdc:	d5fc      	bpl.n	8002cd8 <SystemClock_Config+0x24>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8002cde:	6863      	ldr	r3, [r4, #4]
 8002ce0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002ce4:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002ce8:	6063      	str	r3, [r4, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	6023      	str	r3, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002cf2:	6823      	ldr	r3, [r4, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	d5fc      	bpl.n	8002cf2 <SystemClock_Config+0x3e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002cf8:	6863      	ldr	r3, [r4, #4]
 8002cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cfe:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d00:	6863      	ldr	r3, [r4, #4]
 8002d02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d0a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d0c:	6863      	ldr	r3, [r4, #4]
 8002d0e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002d12:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d14:	6863      	ldr	r3, [r4, #4]
 8002d16:	f023 0303 	bic.w	r3, r3, #3
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d20:	6863      	ldr	r3, [r4, #4]
 8002d22:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d1fa      	bne.n	8002d20 <SystemClock_Config+0x6c>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8002d2a:	4809      	ldr	r0, [pc, #36]	; (8002d50 <SystemClock_Config+0x9c>)
 8002d2c:	f000 fbd0 	bl	80034d0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8002d30:	200f      	movs	r0, #15
 8002d32:	f000 f8ab 	bl	8002e8c <HAL_InitTick>
 8002d36:	b108      	cbz	r0, 8002d3c <SystemClock_Config+0x88>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d38:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <SystemClock_Config+0x86>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 8002d3c:	6863      	ldr	r3, [r4, #4]
 8002d3e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d42:	6063      	str	r3, [r4, #4]
}
 8002d44:	bd10      	pop	{r4, pc}
 8002d46:	bf00      	nop
 8002d48:	40022000 	.word	0x40022000
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	044aa200 	.word	0x044aa200

08002d54 <main>:
{
 8002d54:	b500      	push	{lr}
 8002d56:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8002d58:	f000 f8bc 	bl	8002ed4 <HAL_Init>
  SystemClock_Config();
 8002d5c:	f7ff ffaa 	bl	8002cb4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	2210      	movs	r2, #16
 8002d62:	2100      	movs	r1, #0
 8002d64:	eb0d 0002 	add.w	r0, sp, r2
 8002d68:	f000 fc04 	bl	8003574 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <main+0x80>)
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002d6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d72:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002d74:	4818      	ldr	r0, [pc, #96]	; (8002dd8 <main+0x84>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d76:	f042 0220 	orr.w	r2, r2, #32
 8002d7a:	619a      	str	r2, [r3, #24]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	f002 0220 	and.w	r2, r2, #32
 8002d82:	9201      	str	r2, [sp, #4]
 8002d84:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	f042 0208 	orr.w	r2, r2, #8
 8002d8c:	619a      	str	r2, [r3, #24]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	f002 0208 	and.w	r2, r2, #8
 8002d94:	9202      	str	r2, [sp, #8]
 8002d96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	f042 0204 	orr.w	r2, r2, #4
 8002d9e:	619a      	str	r2, [r3, #24]
 8002da0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002da2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	9303      	str	r3, [sp, #12]
 8002daa:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002dac:	f000 fb1e 	bl	80033ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002db4:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002dbe:	4806      	ldr	r0, [pc, #24]	; (8002dd8 <main+0x84>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc0:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002dc4:	a904      	add	r1, sp, #16
 8002dc6:	f000 fa37 	bl	8003238 <HAL_GPIO_Init>
  apInit();
 8002dca:	f7fd f9a7 	bl	800011c <apInit>
  apMain();
 8002dce:	f7fd f9ac 	bl	800012a <apMain>
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <main+0x7e>
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40010c00 	.word	0x40010c00

08002ddc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_MspInit+0x3c>)
{
 8002dde:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	619a      	str	r2, [r3, #24]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	f002 0201 	and.w	r2, r2, #1
 8002dee:	9200      	str	r2, [sp, #0]
 8002df0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002df8:	61da      	str	r2, [r3, #28]
 8002dfa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dfc:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e06:	6853      	ldr	r3, [r2, #4]
 8002e08:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e12:	b002      	add	sp, #8
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40010000 	.word	0x40010000

08002e20 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <NMI_Handler>

08002e22 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e22:	e7fe      	b.n	8002e22 <HardFault_Handler>

08002e24 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <MemManage_Handler>

08002e26 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e26:	e7fe      	b.n	8002e26 <BusFault_Handler>

08002e28 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <UsageFault_Handler>

08002e2a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e2a:	4770      	bx	lr

08002e2c <DebugMon_Handler>:
 8002e2c:	4770      	bx	lr

08002e2e <PendSV_Handler>:
 8002e2e:	4770      	bx	lr

08002e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e32:	f000 f861 	bl	8002ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  board_timer_tick();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  board_timer_tick();
 8002e3a:	f7ff bc59 	b.w	80026f0 <board_timer_tick>

08002e3e <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e3e:	4770      	bx	lr

08002e40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e42:	490d      	ldr	r1, [pc, #52]	; (8002e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e48:	e002      	b.n	8002e50 <LoopCopyDataInit>

08002e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4e:	3304      	adds	r3, #4

08002e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e54:	d3f9      	bcc.n	8002e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e58:	4c0a      	ldr	r4, [pc, #40]	; (8002e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e5c:	e001      	b.n	8002e62 <LoopFillZerobss>

08002e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e60:	3204      	adds	r2, #4

08002e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e64:	d3fb      	bcc.n	8002e5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e66:	f7ff ffea 	bl	8002e3e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e6a:	f000 fb37 	bl	80034dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e6e:	f7ff ff71 	bl	8002d54 <main>
  bx lr
 8002e72:	4770      	bx	lr
  ldr r0, =_sdata
 8002e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e78:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002e7c:	080037bc 	.word	0x080037bc
  ldr r2, =_sbss
 8002e80:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002e84:	20001070 	.word	0x20001070

08002e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e88:	e7fe      	b.n	8002e88 <ADC1_2_IRQHandler>
	...

08002e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e8c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_InitTick+0x3c>)
{
 8002e90:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e92:	7818      	ldrb	r0, [r3, #0]
 8002e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e98:	fbb3 f3f0 	udiv	r3, r3, r0
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <HAL_InitTick+0x40>)
 8002e9e:	6810      	ldr	r0, [r2, #0]
 8002ea0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ea4:	f000 f890 	bl	8002fc8 <HAL_SYSTICK_Config>
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	b958      	cbnz	r0, 8002ec4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eac:	2d0f      	cmp	r5, #15
 8002eae:	d809      	bhi.n	8002ec4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb8:	f000 f854 	bl	8002f64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <HAL_InitTick+0x44>)
 8002ec0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002ec2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	e7fc      	b.n	8002ec2 <HAL_InitTick+0x36>
 8002ec8:	20000084 	.word	0x20000084
 8002ecc:	20000080 	.word	0x20000080
 8002ed0:	20000088 	.word	0x20000088

08002ed4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_Init+0x20>)
{
 8002ed6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eda:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002edc:	f043 0310 	orr.w	r3, r3, #16
 8002ee0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee2:	f000 f82d 	bl	8002f40 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee6:	200f      	movs	r0, #15
 8002ee8:	f7ff ffd0 	bl	8002e8c <HAL_InitTick>
  HAL_MspInit();
 8002eec:	f7ff ff76 	bl	8002ddc <HAL_MspInit>
}
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	bd08      	pop	{r3, pc}
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ef8:	4a03      	ldr	r2, [pc, #12]	; (8002f08 <HAL_IncTick+0x10>)
 8002efa:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <HAL_IncTick+0x14>)
 8002efc:	6811      	ldr	r1, [r2, #0]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	440b      	add	r3, r1
 8002f02:	6013      	str	r3, [r2, #0]
}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20001048 	.word	0x20001048
 8002f0c:	20000084 	.word	0x20000084

08002f10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f10:	4b01      	ldr	r3, [pc, #4]	; (8002f18 <HAL_GetTick+0x8>)
 8002f12:	6818      	ldr	r0, [r3, #0]
}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20001048 	.word	0x20001048

08002f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff fff6 	bl	8002f10 <HAL_GetTick>
 8002f24:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f26:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002f28:	bf1e      	ittt	ne
 8002f2a:	4b04      	ldrne	r3, [pc, #16]	; (8002f3c <HAL_Delay+0x20>)
 8002f2c:	781b      	ldrbne	r3, [r3, #0]
 8002f2e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f30:	f7ff ffee 	bl	8002f10 <HAL_GetTick>
 8002f34:	1b43      	subs	r3, r0, r5
 8002f36:	42a3      	cmp	r3, r4
 8002f38:	d3fa      	bcc.n	8002f30 <HAL_Delay+0x14>
  {
  }
}
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
 8002f3c:	20000084 	.word	0x20000084

08002f40 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f40:	4907      	ldr	r1, [pc, #28]	; (8002f60 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f42:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f44:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f4e:	0412      	lsls	r2, r2, #16
 8002f50:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002f5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f66:	b530      	push	{r4, r5, lr}
 8002f68:	68dc      	ldr	r4, [r3, #12]
 8002f6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f72:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	bf28      	it	cs
 8002f78:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f80:	bf98      	it	ls
 8002f82:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f88:	bf88      	it	hi
 8002f8a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	ea21 0303 	bic.w	r3, r1, r3
 8002f90:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f92:	fa05 f404 	lsl.w	r4, r5, r4
 8002f96:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	bfac      	ite	ge
 8002fa2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	4a07      	ldrlt	r2, [pc, #28]	; (8002fc4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	bfab      	itete	ge
 8002fb0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbc:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002fbe:	bd30      	pop	{r4, r5, pc}
 8002fc0:	e000ed00 	.word	0xe000ed00
 8002fc4:	e000ed14 	.word	0xe000ed14

08002fc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc8:	3801      	subs	r0, #1
 8002fca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002fce:	d20b      	bcs.n	8002fe8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	21f0      	movs	r1, #240	; 0xf0
 8002fd6:	4a05      	ldr	r2, [pc, #20]	; (8002fec <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fde:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002fe8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002ff0:	4a11      	ldr	r2, [pc, #68]	; (8003038 <FLASH_SetErrorCode+0x48>)
 8002ff2:	68d3      	ldr	r3, [r2, #12]
 8002ff4:	f013 0310 	ands.w	r3, r3, #16
 8002ff8:	d005      	beq.n	8003006 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ffa:	4910      	ldr	r1, [pc, #64]	; (800303c <FLASH_SetErrorCode+0x4c>)
 8002ffc:	69cb      	ldr	r3, [r1, #28]
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003004:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003006:	68d2      	ldr	r2, [r2, #12]
 8003008:	0750      	lsls	r0, r2, #29
 800300a:	d506      	bpl.n	800301a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800300c:	490b      	ldr	r1, [pc, #44]	; (800303c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800300e:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003012:	69ca      	ldr	r2, [r1, #28]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800301a:	4a07      	ldr	r2, [pc, #28]	; (8003038 <FLASH_SetErrorCode+0x48>)
 800301c:	69d1      	ldr	r1, [r2, #28]
 800301e:	07c9      	lsls	r1, r1, #31
 8003020:	d508      	bpl.n	8003034 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003022:	4806      	ldr	r0, [pc, #24]	; (800303c <FLASH_SetErrorCode+0x4c>)
 8003024:	69c1      	ldr	r1, [r0, #28]
 8003026:	f041 0104 	orr.w	r1, r1, #4
 800302a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800302c:	69d1      	ldr	r1, [r2, #28]
 800302e:	f021 0101 	bic.w	r1, r1, #1
 8003032:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003034:	60d3      	str	r3, [r2, #12]
}  
 8003036:	4770      	bx	lr
 8003038:	40022000 	.word	0x40022000
 800303c:	20001050 	.word	0x20001050

08003040 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_FLASH_Unlock+0x1c>)
 8003042:	6918      	ldr	r0, [r3, #16]
 8003044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003048:	d007      	beq.n	800305a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800304a:	4a05      	ldr	r2, [pc, #20]	; (8003060 <HAL_FLASH_Unlock+0x20>)
 800304c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800304e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003052:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003054:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800305a:	4770      	bx	lr
 800305c:	40022000 	.word	0x40022000
 8003060:	45670123 	.word	0x45670123

08003064 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003064:	4a03      	ldr	r2, [pc, #12]	; (8003074 <HAL_FLASH_Lock+0x10>)
}
 8003066:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003068:	6913      	ldr	r3, [r2, #16]
 800306a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306e:	6113      	str	r3, [r2, #16]
}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000

08003078 <FLASH_WaitForLastOperation>:
{
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ff48 	bl	8002f10 <HAL_GetTick>
 8003080:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003082:	4c11      	ldr	r4, [pc, #68]	; (80030c8 <FLASH_WaitForLastOperation+0x50>)
 8003084:	68e3      	ldr	r3, [r4, #12]
 8003086:	07d8      	lsls	r0, r3, #31
 8003088:	d412      	bmi.n	80030b0 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800308a:	68e3      	ldr	r3, [r4, #12]
 800308c:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800308e:	bf44      	itt	mi
 8003090:	2320      	movmi	r3, #32
 8003092:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003094:	68e3      	ldr	r3, [r4, #12]
 8003096:	06da      	lsls	r2, r3, #27
 8003098:	d406      	bmi.n	80030a8 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800309a:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800309c:	07db      	lsls	r3, r3, #31
 800309e:	d403      	bmi.n	80030a8 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80030a0:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80030a2:	f010 0004 	ands.w	r0, r0, #4
 80030a6:	d007      	beq.n	80030b8 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 80030a8:	f7ff ffa2 	bl	8002ff0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80030ac:	2001      	movs	r0, #1
 80030ae:	e003      	b.n	80030b8 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 80030b0:	1c6b      	adds	r3, r5, #1
 80030b2:	d0e7      	beq.n	8003084 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80030b4:	b90d      	cbnz	r5, 80030ba <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 80030b6:	2003      	movs	r0, #3
}
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80030ba:	f7ff ff29 	bl	8002f10 <HAL_GetTick>
 80030be:	1b80      	subs	r0, r0, r6
 80030c0:	42a8      	cmp	r0, r5
 80030c2:	d9df      	bls.n	8003084 <FLASH_WaitForLastOperation+0xc>
 80030c4:	e7f7      	b.n	80030b6 <FLASH_WaitForLastOperation+0x3e>
 80030c6:	bf00      	nop
 80030c8:	40022000 	.word	0x40022000

080030cc <HAL_FLASH_Program>:
{
 80030cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80030d0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003164 <HAL_FLASH_Program+0x98>
{
 80030d4:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 80030d6:	f899 3018 	ldrb.w	r3, [r9, #24]
{
 80030da:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80030dc:	2b01      	cmp	r3, #1
{
 80030de:	460f      	mov	r7, r1
 80030e0:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80030e2:	d03d      	beq.n	8003160 <HAL_FLASH_Program+0x94>
 80030e4:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030e6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80030ea:	f889 3018 	strb.w	r3, [r9, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030ee:	f7ff ffc3 	bl	8003078 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80030f2:	bb80      	cbnz	r0, 8003156 <HAL_FLASH_Program+0x8a>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80030f4:	2c01      	cmp	r4, #1
 80030f6:	d003      	beq.n	8003100 <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 80030f8:	2c02      	cmp	r4, #2
 80030fa:	bf0c      	ite	eq
 80030fc:	2402      	moveq	r4, #2
 80030fe:	2404      	movne	r4, #4
 8003100:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003102:	46ab      	mov	fp, r5
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003104:	f8df a060 	ldr.w	sl, [pc, #96]	; 8003168 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003108:	0128      	lsls	r0, r5, #4
 800310a:	f1c0 0220 	rsb	r2, r0, #32
 800310e:	f1a0 0320 	sub.w	r3, r0, #32
 8003112:	fa06 f202 	lsl.w	r2, r6, r2
 8003116:	fa28 f000 	lsr.w	r0, r8, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800311a:	f8c9 b01c 	str.w	fp, [r9, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800311e:	4310      	orrs	r0, r2
 8003120:	fa26 f303 	lsr.w	r3, r6, r3
 8003124:	4318      	orrs	r0, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003126:	f8da 3010 	ldr.w	r3, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800312a:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	f8ca 3010 	str.w	r3, [sl, #16]
  *(__IO uint16_t*)Address = Data;
 8003134:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003138:	f24c 3050 	movw	r0, #50000	; 0xc350
 800313c:	f7ff ff9c 	bl	8003078 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003140:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 800314c:	b918      	cbnz	r0, 8003156 <HAL_FLASH_Program+0x8a>
    for (index = 0U; index < nbiterations; index++)
 800314e:	3501      	adds	r5, #1
 8003150:	b2eb      	uxtb	r3, r5
 8003152:	429c      	cmp	r4, r3
 8003154:	d8d8      	bhi.n	8003108 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8003156:	2300      	movs	r3, #0
 8003158:	f889 3018 	strb.w	r3, [r9, #24]
}
 800315c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8003160:	2002      	movs	r0, #2
 8003162:	e7fb      	b.n	800315c <HAL_FLASH_Program+0x90>
 8003164:	20001050 	.word	0x20001050
 8003168:	40022000 	.word	0x40022000

0800316c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800316c:	2200      	movs	r2, #0
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <FLASH_PageErase+0x1c>)
 8003170:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <FLASH_PageErase+0x20>)
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	f042 0202 	orr.w	r2, r2, #2
 800317a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800317c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003184:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003186:	4770      	bx	lr
 8003188:	20001050 	.word	0x20001050
 800318c:	40022000 	.word	0x40022000

08003190 <HAL_FLASHEx_Erase>:
{
 8003190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8003194:	4f26      	ldr	r7, [pc, #152]	; (8003230 <HAL_FLASHEx_Erase+0xa0>)
{
 8003196:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8003198:	7e3b      	ldrb	r3, [r7, #24]
{
 800319a:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800319c:	2b01      	cmp	r3, #1
 800319e:	d044      	beq.n	800322a <HAL_FLASHEx_Erase+0x9a>
 80031a0:	2401      	movs	r4, #1
 80031a2:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031a4:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80031a6:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d11a      	bne.n	80031e4 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80031ae:	f7ff ff63 	bl	8003078 <FLASH_WaitForLastOperation>
 80031b2:	b120      	cbz	r0, 80031be <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80031b4:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80031b6:	2300      	movs	r3, #0
 80031b8:	763b      	strb	r3, [r7, #24]
}
 80031ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80031be:	4c1d      	ldr	r4, [pc, #116]	; (8003234 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031c0:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80031c2:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031c4:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d4:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031d6:	f7ff ff4f 	bl	8003078 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80031da:	6923      	ldr	r3, [r4, #16]
 80031dc:	f023 0304 	bic.w	r3, r3, #4
 80031e0:	6123      	str	r3, [r4, #16]
 80031e2:	e7e8      	b.n	80031b6 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80031e4:	f7ff ff48 	bl	8003078 <FLASH_WaitForLastOperation>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d1e3      	bne.n	80031b4 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295
 80031f0:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031f4:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80031f6:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80031f8:	4c0e      	ldr	r4, [pc, #56]	; (8003234 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80031fa:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80031fe:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8003202:	42b3      	cmp	r3, r6
 8003204:	d9d7      	bls.n	80031b6 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8003206:	4630      	mov	r0, r6
 8003208:	f7ff ffb0 	bl	800316c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800320c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003210:	f7ff ff32 	bl	8003078 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003214:	6923      	ldr	r3, [r4, #16]
 8003216:	f023 0302 	bic.w	r3, r3, #2
 800321a:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800321c:	b110      	cbz	r0, 8003224 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 800321e:	f8c8 6000 	str.w	r6, [r8]
            break;
 8003222:	e7c8      	b.n	80031b6 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8003224:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003228:	e7e7      	b.n	80031fa <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 800322a:	2002      	movs	r0, #2
 800322c:	e7c5      	b.n	80031ba <HAL_FLASHEx_Erase+0x2a>
 800322e:	bf00      	nop
 8003230:	20001050 	.word	0x20001050
 8003234:	40022000 	.word	0x40022000

08003238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800323c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800323e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003240:	4f64      	ldr	r7, [pc, #400]	; (80033d4 <HAL_GPIO_Init+0x19c>)
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8003244:	f8df c194 	ldr.w	ip, [pc, #404]	; 80033dc <HAL_GPIO_Init+0x1a4>
 8003248:	f8df e194 	ldr.w	lr, [pc, #404]	; 80033e0 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800324c:	680d      	ldr	r5, [r1, #0]
 800324e:	fa35 f406 	lsrs.w	r4, r5, r6
 8003252:	d102      	bne.n	800325a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8003254:	b003      	add	sp, #12
 8003256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800325a:	f04f 0801 	mov.w	r8, #1
 800325e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003262:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8003266:	ea38 0505 	bics.w	r5, r8, r5
 800326a:	d17b      	bne.n	8003364 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 800326c:	684d      	ldr	r5, [r1, #4]
 800326e:	2d03      	cmp	r5, #3
 8003270:	d807      	bhi.n	8003282 <HAL_GPIO_Init+0x4a>
 8003272:	3d01      	subs	r5, #1
 8003274:	2d02      	cmp	r5, #2
 8003276:	f200 8088 	bhi.w	800338a <HAL_GPIO_Init+0x152>
 800327a:	e8df f005 	tbb	[pc, r5]
 800327e:	9b96      	.short	0x9b96
 8003280:	a1          	.byte	0xa1
 8003281:	00          	.byte	0x00
 8003282:	2d12      	cmp	r5, #18
 8003284:	f000 8099 	beq.w	80033ba <HAL_GPIO_Init+0x182>
 8003288:	d86e      	bhi.n	8003368 <HAL_GPIO_Init+0x130>
 800328a:	2d11      	cmp	r5, #17
 800328c:	f000 808f 	beq.w	80033ae <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003290:	2cff      	cmp	r4, #255	; 0xff
 8003292:	bf98      	it	ls
 8003294:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003296:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800329a:	bf88      	it	hi
 800329c:	f100 0a04 	addhi.w	sl, r0, #4
 80032a0:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032a4:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032a8:	bf88      	it	hi
 80032aa:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032ac:	fa09 fb05 	lsl.w	fp, r9, r5
 80032b0:	ea28 080b 	bic.w	r8, r8, fp
 80032b4:	fa02 f505 	lsl.w	r5, r2, r5
 80032b8:	ea48 0505 	orr.w	r5, r8, r5
 80032bc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032c0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80032c4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80032c8:	d04c      	beq.n	8003364 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032ca:	69bd      	ldr	r5, [r7, #24]
 80032cc:	f026 0803 	bic.w	r8, r6, #3
 80032d0:	f045 0501 	orr.w	r5, r5, #1
 80032d4:	61bd      	str	r5, [r7, #24]
 80032d6:	69bd      	ldr	r5, [r7, #24]
 80032d8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80032dc:	f005 0501 	and.w	r5, r5, #1
 80032e0:	9501      	str	r5, [sp, #4]
 80032e2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032e6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032ea:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032ec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80032f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032f4:	fa09 f90b 	lsl.w	r9, r9, fp
 80032f8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032fc:	4d39      	ldr	r5, [pc, #228]	; (80033e4 <HAL_GPIO_Init+0x1ac>)
 80032fe:	42a8      	cmp	r0, r5
 8003300:	d062      	beq.n	80033c8 <HAL_GPIO_Init+0x190>
 8003302:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003306:	42a8      	cmp	r0, r5
 8003308:	d060      	beq.n	80033cc <HAL_GPIO_Init+0x194>
 800330a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800330e:	42a8      	cmp	r0, r5
 8003310:	d05e      	beq.n	80033d0 <HAL_GPIO_Init+0x198>
 8003312:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003316:	42a8      	cmp	r0, r5
 8003318:	bf0c      	ite	eq
 800331a:	2503      	moveq	r5, #3
 800331c:	2504      	movne	r5, #4
 800331e:	fa05 f50b 	lsl.w	r5, r5, fp
 8003322:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003326:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800332a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800332c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003330:	bf14      	ite	ne
 8003332:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003334:	43a5      	biceq	r5, r4
 8003336:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8003338:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800333a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800333e:	bf14      	ite	ne
 8003340:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003342:	43a5      	biceq	r5, r4
 8003344:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003346:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003348:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800334c:	bf14      	ite	ne
 800334e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003350:	43a5      	biceq	r5, r4
 8003352:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003354:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003356:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800335a:	bf14      	ite	ne
 800335c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800335e:	ea25 0404 	biceq.w	r4, r5, r4
 8003362:	60dc      	str	r4, [r3, #12]
	position++;
 8003364:	3601      	adds	r6, #1
 8003366:	e771      	b.n	800324c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8003368:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80033e8 <HAL_GPIO_Init+0x1b0>
 800336c:	454d      	cmp	r5, r9
 800336e:	d00c      	beq.n	800338a <HAL_GPIO_Init+0x152>
 8003370:	d817      	bhi.n	80033a2 <HAL_GPIO_Init+0x16a>
 8003372:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003376:	454d      	cmp	r5, r9
 8003378:	d007      	beq.n	800338a <HAL_GPIO_Init+0x152>
 800337a:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800337e:	454d      	cmp	r5, r9
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x152>
 8003382:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003386:	454d      	cmp	r5, r9
 8003388:	d182      	bne.n	8003290 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800338a:	688a      	ldr	r2, [r1, #8]
 800338c:	b1d2      	cbz	r2, 80033c4 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800338e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8003390:	bf08      	it	eq
 8003392:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003396:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800339a:	bf18      	it	ne
 800339c:	f8c0 8014 	strne.w	r8, [r0, #20]
 80033a0:	e776      	b.n	8003290 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80033a2:	4565      	cmp	r5, ip
 80033a4:	d0f1      	beq.n	800338a <HAL_GPIO_Init+0x152>
 80033a6:	4575      	cmp	r5, lr
 80033a8:	e7ee      	b.n	8003388 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033aa:	68ca      	ldr	r2, [r1, #12]
          break;
 80033ac:	e770      	b.n	8003290 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033ae:	68ca      	ldr	r2, [r1, #12]
 80033b0:	3204      	adds	r2, #4
          break;
 80033b2:	e76d      	b.n	8003290 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033b4:	68ca      	ldr	r2, [r1, #12]
 80033b6:	3208      	adds	r2, #8
          break;
 80033b8:	e76a      	b.n	8003290 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033ba:	68ca      	ldr	r2, [r1, #12]
 80033bc:	320c      	adds	r2, #12
          break;
 80033be:	e767      	b.n	8003290 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80033c0:	2200      	movs	r2, #0
 80033c2:	e765      	b.n	8003290 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033c4:	2204      	movs	r2, #4
 80033c6:	e763      	b.n	8003290 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033c8:	2500      	movs	r5, #0
 80033ca:	e7a8      	b.n	800331e <HAL_GPIO_Init+0xe6>
 80033cc:	2501      	movs	r5, #1
 80033ce:	e7a6      	b.n	800331e <HAL_GPIO_Init+0xe6>
 80033d0:	2502      	movs	r5, #2
 80033d2:	e7a4      	b.n	800331e <HAL_GPIO_Init+0xe6>
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40010400 	.word	0x40010400
 80033dc:	10310000 	.word	0x10310000
 80033e0:	10320000 	.word	0x10320000
 80033e4:	40010800 	.word	0x40010800
 80033e8:	10220000 	.word	0x10220000

080033ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ec:	b10a      	cbz	r2, 80033f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ee:	6101      	str	r1, [r0, #16]
  }
}
 80033f0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033f2:	0409      	lsls	r1, r1, #16
 80033f4:	e7fb      	b.n	80033ee <HAL_GPIO_WritePin+0x2>
	...

080033f8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80033f8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80033fa:	f7ff fd89 	bl	8002f10 <HAL_GetTick>
 80033fe:	4605      	mov	r5, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003400:	4c2f      	ldr	r4, [pc, #188]	; (80034c0 <HAL_RCC_DeInit+0xc8>)
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	079b      	lsls	r3, r3, #30
 800340e:	d53b      	bpl.n	8003488 <HAL_RCC_DeInit+0x90>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8003410:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003412:	f241 3688 	movw	r6, #5000	; 0x1388
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8003416:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800341a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341e:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003420:	f7ff fd76 	bl	8002f10 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 8003424:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 8003426:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
 8003428:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800342a:	6863      	ldr	r3, [r4, #4]
 800342c:	f013 0f0c 	tst.w	r3, #12
 8003430:	d132      	bne.n	8003498 <HAL_RCC_DeInit+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCC_DeInit+0xcc>)
 8003434:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <HAL_RCC_DeInit+0xd0>)
 8003436:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003438:	4b24      	ldr	r3, [pc, #144]	; (80034cc <HAL_RCC_DeInit+0xd4>)
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	f7ff fd26 	bl	8002e8c <HAL_InitTick>
 8003440:	4605      	mov	r5, r0
 8003442:	2800      	cmp	r0, #0
 8003444:	d13a      	bne.n	80034bc <HAL_RCC_DeInit+0xc4>
  {
    return HAL_ERROR;
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003446:	f7ff fd63 	bl	8002f10 <HAL_GetTick>
 800344a:	4606      	mov	r6, r0

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003452:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800345a:	d123      	bne.n	80034a4 <HAL_RCC_DeInit+0xac>
      return HAL_TIMEOUT;
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800345c:	6063      	str	r3, [r4, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800345e:	f7ff fd57 	bl	8002f10 <HAL_GetTick>
 8003462:	4606      	mov	r6, r0

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800346a:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8003472:	d11d      	bne.n	80034b0 <HAL_RCC_DeInit+0xb8>
      return HAL_TIMEOUT;
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800347a:	6022      	str	r2, [r4, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800347c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800347e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003482:	6262      	str	r2, [r4, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8003484:	60a3      	str	r3, [r4, #8]

  return HAL_OK;
 8003486:	e005      	b.n	8003494 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003488:	f7ff fd42 	bl	8002f10 <HAL_GetTick>
 800348c:	1b40      	subs	r0, r0, r5
 800348e:	2802      	cmp	r0, #2
 8003490:	d9bb      	bls.n	800340a <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8003492:	2503      	movs	r5, #3
}
 8003494:	4628      	mov	r0, r5
 8003496:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f7ff fd3a 	bl	8002f10 <HAL_GetTick>
 800349c:	1b40      	subs	r0, r0, r5
 800349e:	42b0      	cmp	r0, r6
 80034a0:	d9c3      	bls.n	800342a <HAL_RCC_DeInit+0x32>
 80034a2:	e7f6      	b.n	8003492 <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7ff fd34 	bl	8002f10 <HAL_GetTick>
 80034a8:	1b80      	subs	r0, r0, r6
 80034aa:	2802      	cmp	r0, #2
 80034ac:	d9d2      	bls.n	8003454 <HAL_RCC_DeInit+0x5c>
 80034ae:	e7f0      	b.n	8003492 <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b0:	f7ff fd2e 	bl	8002f10 <HAL_GetTick>
 80034b4:	1b80      	subs	r0, r0, r6
 80034b6:	2864      	cmp	r0, #100	; 0x64
 80034b8:	d9d8      	bls.n	800346c <HAL_RCC_DeInit+0x74>
 80034ba:	e7ea      	b.n	8003492 <HAL_RCC_DeInit+0x9a>
    return HAL_ERROR;
 80034bc:	2501      	movs	r5, #1
 80034be:	e7e9      	b.n	8003494 <HAL_RCC_DeInit+0x9c>
 80034c0:	40021000 	.word	0x40021000
 80034c4:	20000080 	.word	0x20000080
 80034c8:	007a1200 	.word	0x007a1200
 80034cc:	20000088 	.word	0x20000088

080034d0 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80034d0:	4b01      	ldr	r3, [pc, #4]	; (80034d8 <LL_SetSystemCoreClock+0x8>)
 80034d2:	6018      	str	r0, [r3, #0]
}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000080 	.word	0x20000080

080034dc <__libc_init_array>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	2600      	movs	r6, #0
 80034e0:	4d0c      	ldr	r5, [pc, #48]	; (8003514 <__libc_init_array+0x38>)
 80034e2:	4c0d      	ldr	r4, [pc, #52]	; (8003518 <__libc_init_array+0x3c>)
 80034e4:	1b64      	subs	r4, r4, r5
 80034e6:	10a4      	asrs	r4, r4, #2
 80034e8:	42a6      	cmp	r6, r4
 80034ea:	d109      	bne.n	8003500 <__libc_init_array+0x24>
 80034ec:	f7ff f919 	bl	8002722 <_init>
 80034f0:	2600      	movs	r6, #0
 80034f2:	4d0a      	ldr	r5, [pc, #40]	; (800351c <__libc_init_array+0x40>)
 80034f4:	4c0a      	ldr	r4, [pc, #40]	; (8003520 <__libc_init_array+0x44>)
 80034f6:	1b64      	subs	r4, r4, r5
 80034f8:	10a4      	asrs	r4, r4, #2
 80034fa:	42a6      	cmp	r6, r4
 80034fc:	d105      	bne.n	800350a <__libc_init_array+0x2e>
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
 8003500:	f855 3b04 	ldr.w	r3, [r5], #4
 8003504:	4798      	blx	r3
 8003506:	3601      	adds	r6, #1
 8003508:	e7ee      	b.n	80034e8 <__libc_init_array+0xc>
 800350a:	f855 3b04 	ldr.w	r3, [r5], #4
 800350e:	4798      	blx	r3
 8003510:	3601      	adds	r6, #1
 8003512:	e7f2      	b.n	80034fa <__libc_init_array+0x1e>
 8003514:	080037bc 	.word	0x080037bc
 8003518:	080037bc 	.word	0x080037bc
 800351c:	080037bc 	.word	0x080037bc
 8003520:	080037bc 	.word	0x080037bc

08003524 <memcpy>:
 8003524:	440a      	add	r2, r1
 8003526:	4291      	cmp	r1, r2
 8003528:	f100 33ff 	add.w	r3, r0, #4294967295
 800352c:	d100      	bne.n	8003530 <memcpy+0xc>
 800352e:	4770      	bx	lr
 8003530:	b510      	push	{r4, lr}
 8003532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003536:	4291      	cmp	r1, r2
 8003538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800353c:	d1f9      	bne.n	8003532 <memcpy+0xe>
 800353e:	bd10      	pop	{r4, pc}

08003540 <memmove>:
 8003540:	4288      	cmp	r0, r1
 8003542:	b510      	push	{r4, lr}
 8003544:	eb01 0402 	add.w	r4, r1, r2
 8003548:	d902      	bls.n	8003550 <memmove+0x10>
 800354a:	4284      	cmp	r4, r0
 800354c:	4623      	mov	r3, r4
 800354e:	d807      	bhi.n	8003560 <memmove+0x20>
 8003550:	1e43      	subs	r3, r0, #1
 8003552:	42a1      	cmp	r1, r4
 8003554:	d008      	beq.n	8003568 <memmove+0x28>
 8003556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800355a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800355e:	e7f8      	b.n	8003552 <memmove+0x12>
 8003560:	4601      	mov	r1, r0
 8003562:	4402      	add	r2, r0
 8003564:	428a      	cmp	r2, r1
 8003566:	d100      	bne.n	800356a <memmove+0x2a>
 8003568:	bd10      	pop	{r4, pc}
 800356a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800356e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003572:	e7f7      	b.n	8003564 <memmove+0x24>

08003574 <memset>:
 8003574:	4603      	mov	r3, r0
 8003576:	4402      	add	r2, r0
 8003578:	4293      	cmp	r3, r2
 800357a:	d100      	bne.n	800357e <memset+0xa>
 800357c:	4770      	bx	lr
 800357e:	f803 1b01 	strb.w	r1, [r3], #1
 8003582:	e7f9      	b.n	8003578 <memset+0x4>
